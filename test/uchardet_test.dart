// GENERATED FILE - DO NOT EDIT
import 'dart:typed_data';

import 'package:test/test.dart';
import 'package:uchardet/uchardet.dart';

void main() {
  group('uchardet', () {
    setUp(() {});

    test('detect ar iso-8859-6', () {
      final detector = UCharDet();
      // dart format off
      final kArIso88596 = Uint8List.fromList([0xe8, 0xea, 0xe6, 0xcf, 0xe8, 0xd2, 0x2d, 0x31, 0x32, 0x35, 0x36, 0x20, 0xe7, 0xea, 0x20, 0xd5, 0xe1, 0xcd, 0xc9, 0x20, 0xe3, 0xe8, 0xcf, 0x20, 0xca, 0xd3, 0xca, 0xce, 0xcf, 0xe5, 0x20, 0xe1, 0xea, 0x20, 0xe3, 0xca, 0xc7, 0xc8, 0xc9, 0x20, 0xc7, 0xe4, 0xe4, 0xda, 0xc9, 0x20, 0xc7, 0xe4, 0xd9, 0xd1, 0xc8, 0xea, 0xc9, 0x20, 0xd9, 0xe5, 0xe8, 0xe5, 0xc7, 0xeb, 0x20, 0xe8, 0xc8, 0xd9, 0xd6, 0x20, 0xc7, 0xe4, 0xe4, 0xda, 0xc7, 0xca, 0x20, 0xc7, 0xe4, 0xd4, 0xc8, 0xea, 0xe7, 0xc9, 0x0a, 0xc7, 0xe4, 0xca, 0xea, 0x20, 0xca, 0xd3, 0xca, 0xce, 0xcf, 0xe5, 0x20, 0xe6, 0xe1, 0xd3, 0x20, 0xc7, 0xe4, 0xc3, 0xc8, 0xcc, 0xcf, 0xea, 0xc9, 0x20, 0xe5, 0xcb, 0xe4, 0x20, 0xc7, 0xe4, 0xc3, 0xd1, 0xcf, 0xe8, 0x20, 0xe8, 0xc7, 0xe4, 0xe1, 0xc7, 0xd1, 0xd3, 0xea, 0xc9, 0x20, 0xe8, 0xc7, 0xe4, 0xe3, 0xe8, 0xd1, 0xcf, 0xea, 0xc9, 0x2e, 0x20, 0xe8, 0xd0, 0xe4, 0xe3, 0x20, 0xca, 0xcd, 0xca, 0x20, 0xe6, 0xd8, 0xc7, 0xe5, 0x20, 0xe5, 0xc7, 0xea, 0xe3, 0xd1, 0xe8, 0xd3, 0xe8, 0xe1, 0xca, 0x0a, 0xe8, 0xea, 0xe6, 0xcf, 0xe8, 0xd2, 0x2e, 0x20, 0xd5, 0xe1, 0xcd, 0xc9, 0x20, 0xc7, 0xe4, 0xe3, 0xe8, 0xcf, 0x20, 0xe7, 0xd0, 0xe7, 0x20, 0xe4, 0xc7, 0x20, 0xca, 0xca, 0xe8, 0xc7, 0xe1, 0xe2, 0x20, 0xe5, 0xd9, 0x20, 0xc7, 0xe4, 0xc3, 0xea, 0xd2, 0xe8, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x36, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kArIso88596);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-6'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ar'));
    });

    test('detect ar utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kArUtf8 = Uint8List.fromList([0xd9, 0x88, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xb2, 0x2d, 0x31, 0x32, 0x35, 0x36, 0x20, 0xd9, 0x87, 0xd9, 0x8a, 0x20, 0xd8, 0xb5, 0xd9, 0x81, 0xd8, 0xad, 0xd8, 0xa9, 0x20, 0xd9, 0x83, 0xd9, 0x88, 0xd8, 0xaf, 0x20, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xaa, 0xd8, 0xae, 0xd8, 0xaf, 0xd9, 0x85, 0x20, 0xd9, 0x81, 0xd9, 0x8a, 0x20, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd8, 0xba, 0xd8, 0xa9, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0x20, 0xd8, 0xb9, 0xd9, 0x85, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x8b, 0x20, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xb9, 0xd8, 0xb6, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd8, 0xba, 0xd8, 0xa7, 0xd8, 0xaa, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x87, 0xd8, 0xa9, 0x0a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x8a, 0x20, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xaa, 0xd8, 0xae, 0xd8, 0xaf, 0xd9, 0x85, 0x20, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xa8, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa9, 0x20, 0xd9, 0x85, 0xd8, 0xab, 0xd9, 0x84, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0x20, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa9, 0x20, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa9, 0x2e, 0x20, 0xd9, 0x88, 0xd8, 0xb0, 0xd9, 0x84, 0xd9, 0x83, 0x20, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaa, 0x20, 0xd9, 0x86, 0xd8, 0xb8, 0xd8, 0xa7, 0xd9, 0x85, 0x20, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd9, 0x88, 0xd9, 0x81, 0xd8, 0xaa, 0x0a, 0xd9, 0x88, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xb2, 0x2e, 0x20, 0xd8, 0xb5, 0xd9, 0x81, 0xd8, 0xad, 0xd8, 0xa9, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd8, 0xaf, 0x20, 0xd9, 0x87, 0xd8, 0xb0, 0xd9, 0x87, 0x20, 0xd9, 0x84, 0xd8, 0xa7, 0x20, 0xd8, 0xaa, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x82, 0x20, 0xd9, 0x85, 0xd8, 0xb9, 0x20, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xb2, 0xd9, 0x88, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x36, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kArUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ar'));
    });

    test('detect ar windows-1256', () {
      final detector = UCharDet();
      // dart format off
      final kArWindows1256 = Uint8List.fromList([0xe6, 0xed, 0xe4, 0xcf, 0xe6, 0xd2, 0x2d, 0x31, 0x32, 0x35, 0x36, 0x20, 0xe5, 0xed, 0x20, 0xd5, 0xdd, 0xcd, 0xc9, 0x20, 0xdf, 0xe6, 0xcf, 0x20, 0xca, 0xd3, 0xca, 0xce, 0xcf, 0xe3, 0x20, 0xdd, 0xed, 0x20, 0xdf, 0xca, 0xc7, 0xc8, 0xc9, 0x20, 0xc7, 0xe1, 0xe1, 0xdb, 0xc9, 0x20, 0xc7, 0xe1, 0xda, 0xd1, 0xc8, 0xed, 0xc9, 0x20, 0xda, 0xe3, 0xe6, 0xe3, 0xc7, 0xf0, 0x20, 0xe6, 0xc8, 0xda, 0xd6, 0x20, 0xc7, 0xe1, 0xe1, 0xdb, 0xc7, 0xca, 0x20, 0xc7, 0xe1, 0xd4, 0xc8, 0xed, 0xe5, 0xc9, 0x0a, 0xc7, 0xe1, 0xca, 0xed, 0x20, 0xca, 0xd3, 0xca, 0xce, 0xcf, 0xe3, 0x20, 0xe4, 0xdd, 0xd3, 0x20, 0xc7, 0xe1, 0xc3, 0xc8, 0xcc, 0xcf, 0xed, 0xc9, 0x20, 0xe3, 0xcb, 0xe1, 0x20, 0xc7, 0xe1, 0xc3, 0xd1, 0xcf, 0xe6, 0x20, 0xe6, 0xc7, 0xe1, 0xdd, 0xc7, 0xd1, 0xd3, 0xed, 0xc9, 0x20, 0xe6, 0xc7, 0xe1, 0xdf, 0xe6, 0xd1, 0xcf, 0xed, 0xc9, 0x2e, 0x20, 0xe6, 0xd0, 0xe1, 0xdf, 0x20, 0xca, 0xcd, 0xca, 0x20, 0xe4, 0xd9, 0xc7, 0xe3, 0x20, 0xe3, 0xc7, 0xed, 0xdf, 0xd1, 0xe6, 0xd3, 0xe6, 0xdd, 0xca, 0x0a, 0xe6, 0xed, 0xe4, 0xcf, 0xe6, 0xd2, 0x2e, 0x20, 0xd5, 0xdd, 0xcd, 0xc9, 0x20, 0xc7, 0xe1, 0xdf, 0xe6, 0xcf, 0x20, 0xe5, 0xd0, 0xe5, 0x20, 0xe1, 0xc7, 0x20, 0xca, 0xca, 0xe6, 0xc7, 0xdd, 0xde, 0x20, 0xe3, 0xda, 0x20, 0xc7, 0xe1, 0xc3, 0xed, 0xd2, 0xe6, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x36, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kArWindows1256);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1256'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ar'));
    });

    test('detect be iso-8859-5', () {
      final detector = UCharDet();
      // dart format off
      final kBeIso88595 = Uint8List.fromList([0xc1, 0xe3, 0xe0, 0xda, 0xf6, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x2c, 0x20, 0xe1, 0xeb, 0xe1, 0xe3, 0xdd, 0xeb, 0x2c, 0x20, 0xdf, 0xe0, 0xd0, 0xd4, 0xe1, 0xe2, 0xd0, 0xfe, 0xdd, 0xf6, 0xda, 0xf6, 0x20, 0xd0, 0xe2, 0xe0, 0xd0, 0xd4, 0xe3, 0x20, 0xd3, 0xe0, 0xeb, 0xd7, 0xe3, 0xdd, 0xde, 0xfe, 0x2e, 0x0a, 0x0a, 0xbd, 0xd0, 0x20, 0xb7, 0xef, 0xdc, 0xdb, 0xf6, 0x20, 0xf6, 0xe1, 0xdd, 0xe3, 0xd5, 0x20, 0x31, 0x35, 0x20, 0xd2, 0xf6, 0xd4, 0xd0, 0xfe, 0x20, 0xe1, 0xe3, 0xe0, 0xda, 0xde, 0xfe, 0x2c, 0x20, 0xef, 0xda, 0xf6, 0xef, 0x20, 0xdc, 0xd0, 0xee, 0xe6, 0xec, 0x20, 0xd0, 0xd3, 0xe3, 0xdb, 0xec, 0xdd, 0xd0, 0xd3, 0xd0, 0x20, 0xdf, 0xe0, 0xde, 0xd4, 0xda, 0xd0, 0x2e, 0x20, 0xbf, 0xe0, 0xd0, 0xe0, 0xd0, 0xd4, 0xd7, 0xf6, 0xdc, 0xd0, 0x20, 0xe1, 0xe3, 0xe0, 0xda, 0xde, 0xfe, 0xa0, 0x2d, 0x2d, 0x20, 0xb0, 0xdc, 0xd5, 0xe0, 0xeb, 0xda, 0xd0, 0x2e, 0x20, 0xc3, 0x20, 0xe2, 0xde, 0xd9, 0x20, 0xe7, 0xd0, 0xe1, 0x20, 0xef, 0xda, 0x20, 0xd1, 0xde, 0xdb, 0xec, 0xe8, 0xd0, 0xe1, 0xe6, 0xec, 0x20, 0xd6, 0xeb, 0xd2, 0xf1, 0xdb, 0x20, 0xe0, 0xe3, 0xe5, 0xd0, 0xdb, 0xd0, 0xe1, 0xef, 0x20, 0xd7, 0x20, 0xb5, 0xfe, 0xe0, 0xd0, 0xd7, 0xf6, 0xf6, 0x20, 0xfe, 0x20, 0xb0, 0xdc, 0xd5, 0xe0, 0xeb, 0xda, 0xe3, 0x2c, 0x20, 0xe1, 0xe3, 0xe0, 0xda, 0xf6, 0x20, 0xd7, 0x20, 0xb0, 0xdc, 0xd5, 0xe0, 0xeb, 0xda, 0xf6, 0x20, 0xdf, 0xd5, 0xe0, 0xd0, 0xd1, 0xf6, 0xe0, 0xd0, 0xdb, 0xf6, 0xe1, 0xef, 0x20, 0xfe, 0x20, 0xb0, 0xd7, 0xf6, 0xee, 0x2e, 0x20, 0xc0, 0xde, 0xd7, 0xdd, 0xeb, 0xef, 0x20, 0xd2, 0xf6, 0xd4, 0xeb, 0x20, 0xd0, 0xd1, 0xd0, 0xe1, 0xde, 0xd1, 0xf6, 0xdb, 0xf6, 0xe1, 0xef, 0x20, 0xfe, 0x20, 0xe0, 0xde, 0xd7, 0xdd, 0xeb, 0xe5, 0x20, 0xd3, 0xd5, 0xd0, 0xd3, 0xe0, 0xd0, 0xe4, 0xf6, 0xe7, 0xdd, 0xeb, 0xe5, 0x20, 0xd7, 0xde, 0xdd, 0xd0, 0xe5, 0x20, 0xf6, 0x20, 0xd0, 0xd4, 0xe0, 0xde, 0xd7, 0xdd, 0xf6, 0xd2, 0xd0, 0xee, 0xe6, 0xe6, 0xd0, 0x20, 0xd0, 0xe1, 0xd0, 0xd1, 0xdb, 0xf6, 0xd2, 0xd0, 0xe1, 0xe6, 0xef, 0xdc, 0xf6, 0x20, 0xdf, 0xd0, 0xd2, 0xde, 0xd4, 0xd7, 0xf6, 0xdd, 0x2c, 0x20, 0xd0, 0xdb, 0xd5, 0x20, 0xd7, 0xd0, 0xe5, 0xd0, 0xd2, 0xd0, 0xdb, 0xf6, 0x20, 0xd7, 0xdd, 0xd5, 0xe8, 0xdd, 0xee, 0xee, 0x20, 0xdf, 0xd0, 0xd4, 0xde, 0xd1, 0xdd, 0xd0, 0xe1, 0xe6, 0xec, 0x2c, 0x20, 0xdd, 0xd5, 0xd0, 0xd1, 0xe5, 0xde, 0xd4, 0xdd, 0xd0, 0xe1, 0xe6, 0xec, 0x20, 0xe3, 0xdf, 0xd0, 0xd4, 0xd0, 0xe6, 0xec, 0x20, 0xe3, 0x20, 0xe1, 0xdf, 0xef, 0xe7, 0xda, 0xe3, 0x20, 0xf6, 0x20, 0xd6, 0xeb, 0xe6, 0xe6, 0xf1, 0x20, 0xfe, 0x20, 0xda, 0xd0, 0xdb, 0xde, 0xdd, 0xf6, 0xef, 0xe5, 0x2e, 0x20, 0xc3, 0xe1, 0xd5, 0x20, 0xe1, 0xe3, 0xe0, 0xda, 0xf6, 0x20, 0xe2, 0xe0, 0xd0, 0xd2, 0xd0, 0xef, 0xd4, 0xdd, 0xeb, 0xef, 0x2c, 0x20, 0xd6, 0xeb, 0xd2, 0xe3, 0xe6, 0xec, 0x20, 0xe3, 0x20, 0xdd, 0xde, 0xe0, 0xd0, 0xe5, 0x2c, 0x20, 0xdc, 0xd0, 0xee, 0xe6, 0xec, 0x20, 0xe6, 0xf1, 0xdf, 0xdb, 0xd0, 0xd5, 0x20, 0xe4, 0xe3, 0xe2, 0xe0, 0xd0, 0x2e, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBeIso88595);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-5'),
      );
      expect(candidates.first.language?.iso6391Code, equals('be'));
    });

    test('detect be utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kBeUtf8 = Uint8List.fromList([0xd0, 0xa1, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd1, 0x96, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x2c, 0x20, 0xd1, 0x81, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xbd, 0xd1, 0x8b, 0x2c, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x9e, 0xd0, 0xbd, 0xd1, 0x96, 0xd0, 0xba, 0xd1, 0x96, 0x20, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x83, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x9e, 0x2e, 0x0a, 0x0a, 0xd0, 0x9d, 0xd0, 0xb0, 0x20, 0xd0, 0x97, 0xd1, 0x8f, 0xd0, 0xbc, 0xd0, 0xbb, 0xd1, 0x96, 0x20, 0xd1, 0x96, 0xd1, 0x81, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xb5, 0x20, 0x31, 0x35, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x9e, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x9e, 0x2c, 0x20, 0xd1, 0x8f, 0xd0, 0xba, 0xd1, 0x96, 0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x83, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xba, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb7, 0xd1, 0x96, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x9e, 0xc2, 0xa0, 0xe2, 0x80, 0x94, 0x20, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0xa3, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0x20, 0xd1, 0x8f, 0xd0, 0xba, 0x20, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd0, 0xb6, 0xd1, 0x8b, 0xd0, 0xb2, 0xd1, 0x91, 0xd0, 0xbb, 0x20, 0xd1, 0x80, 0xd1, 0x83, 0xd1, 0x85, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0x20, 0xd0, 0x95, 0xd1, 0x9e, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x96, 0xd1, 0x96, 0x20, 0xd1, 0x9e, 0x20, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xba, 0xd1, 0x83, 0x2c, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd1, 0x96, 0x20, 0xd0, 0xb7, 0x20, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xba, 0xd1, 0x96, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd1, 0x96, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x96, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x9e, 0x20, 0xd0, 0x90, 0xd0, 0xb7, 0xd1, 0x96, 0xd1, 0x8e, 0x2e, 0x20, 0xd0, 0xa0, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0xd1, 0x8b, 0x20, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x96, 0xd0, 0xbb, 0xd1, 0x96, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x9e, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb3, 0xd0, 0xb5, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd1, 0x96, 0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0xd1, 0x96, 0x20, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x96, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x86, 0xd1, 0x86, 0xd0, 0xb0, 0x20, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbb, 0xd1, 0x96, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x86, 0xd1, 0x8f, 0xd0, 0xbc, 0xd1, 0x96, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb7, 0xd1, 0x96, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x85, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x96, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd1, 0x8e, 0xd1, 0x8e, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x86, 0xd1, 0x8c, 0x2c, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb0, 0xd0, 0xb1, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x8f, 0xd1, 0x87, 0xd0, 0xba, 0xd1, 0x83, 0x20, 0xd1, 0x96, 0x20, 0xd0, 0xb6, 0xd1, 0x8b, 0xd1, 0x86, 0xd1, 0x86, 0xd1, 0x91, 0x20, 0xd1, 0x9e, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x96, 0xd1, 0x8f, 0xd1, 0x85, 0x2e, 0x20, 0xd0, 0xa3, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd1, 0x96, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xb6, 0xd1, 0x8b, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x85, 0x2c, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x86, 0xd1, 0x8c, 0x20, 0xd1, 0x86, 0xd1, 0x91, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb5, 0x20, 0xd1, 0x84, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0x2e, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBeUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('be'));
    });

    test('detect be windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kBeWindows1251 = Uint8List.fromList([0xd1, 0xf3, 0xf0, 0xea, 0xb3, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x2c, 0x20, 0xf1, 0xfb, 0xf1, 0xf3, 0xed, 0xfb, 0x2c, 0x20, 0xef, 0xf0, 0xe0, 0xe4, 0xf1, 0xf2, 0xe0, 0xa2, 0xed, 0xb3, 0xea, 0xb3, 0x20, 0xe0, 0xf2, 0xf0, 0xe0, 0xe4, 0xf3, 0x20, 0xe3, 0xf0, 0xfb, 0xe7, 0xf3, 0xed, 0xee, 0xa2, 0x2e, 0x0a, 0x0a, 0xcd, 0xe0, 0x20, 0xc7, 0xff, 0xec, 0xeb, 0xb3, 0x20, 0xb3, 0xf1, 0xed, 0xf3, 0xe5, 0x20, 0x31, 0x35, 0x20, 0xe2, 0xb3, 0xe4, 0xe0, 0xa2, 0x20, 0xf1, 0xf3, 0xf0, 0xea, 0xee, 0xa2, 0x2c, 0x20, 0xff, 0xea, 0xb3, 0xff, 0x20, 0xec, 0xe0, 0xfe, 0xf6, 0xfc, 0x20, 0xe0, 0xe3, 0xf3, 0xeb, 0xfc, 0xed, 0xe0, 0xe3, 0xe0, 0x20, 0xef, 0xf0, 0xee, 0xe4, 0xea, 0xe0, 0x2e, 0x20, 0xcf, 0xf0, 0xe0, 0xf0, 0xe0, 0xe4, 0xe7, 0xb3, 0xec, 0xe0, 0x20, 0xf1, 0xf3, 0xf0, 0xea, 0xee, 0xa2, 0xa0, 0x97, 0x20, 0xc0, 0xec, 0xe5, 0xf0, 0xfb, 0xea, 0xe0, 0x2e, 0x20, 0xd3, 0x20, 0xf2, 0xee, 0xe9, 0x20, 0xf7, 0xe0, 0xf1, 0x20, 0xff, 0xea, 0x20, 0xe1, 0xee, 0xeb, 0xfc, 0xf8, 0xe0, 0xf1, 0xf6, 0xfc, 0x20, 0xe6, 0xfb, 0xe2, 0xb8, 0xeb, 0x20, 0xf0, 0xf3, 0xf5, 0xe0, 0xeb, 0xe0, 0xf1, 0xff, 0x20, 0xe7, 0x20, 0xc5, 0xa2, 0xf0, 0xe0, 0xe7, 0xb3, 0xb3, 0x20, 0xa2, 0x20, 0xc0, 0xec, 0xe5, 0xf0, 0xfb, 0xea, 0xf3, 0x2c, 0x20, 0xf1, 0xf3, 0xf0, 0xea, 0xb3, 0x20, 0xe7, 0x20, 0xc0, 0xec, 0xe5, 0xf0, 0xfb, 0xea, 0xb3, 0x20, 0xef, 0xe5, 0xf0, 0xe0, 0xe1, 0xb3, 0xf0, 0xe0, 0xeb, 0xb3, 0xf1, 0xff, 0x20, 0xa2, 0x20, 0xc0, 0xe7, 0xb3, 0xfe, 0x2e, 0x20, 0xd0, 0xee, 0xe7, 0xed, 0xfb, 0xff, 0x20, 0xe2, 0xb3, 0xe4, 0xfb, 0x20, 0xe0, 0xe1, 0xe0, 0xf1, 0xee, 0xe1, 0xb3, 0xeb, 0xb3, 0xf1, 0xff, 0x20, 0xa2, 0x20, 0xf0, 0xee, 0xe7, 0xed, 0xfb, 0xf5, 0x20, 0xe3, 0xe5, 0xe0, 0xe3, 0xf0, 0xe0, 0xf4, 0xb3, 0xf7, 0xed, 0xfb, 0xf5, 0x20, 0xe7, 0xee, 0xed, 0xe0, 0xf5, 0x20, 0xb3, 0x20, 0xe0, 0xe4, 0xf0, 0xee, 0xe7, 0xed, 0xb3, 0xe2, 0xe0, 0xfe, 0xf6, 0xf6, 0xe0, 0x20, 0xe0, 0xf1, 0xe0, 0xe1, 0xeb, 0xb3, 0xe2, 0xe0, 0xf1, 0xf6, 0xff, 0xec, 0xb3, 0x20, 0xef, 0xe0, 0xe2, 0xee, 0xe4, 0xe7, 0xb3, 0xed, 0x2c, 0x20, 0xe0, 0xeb, 0xe5, 0x20, 0xe7, 0xe0, 0xf5, 0xe0, 0xe2, 0xe0, 0xeb, 0xb3, 0x20, 0xe7, 0xed, 0xe5, 0xf8, 0xed, 0xfe, 0xfe, 0x20, 0xef, 0xe0, 0xe4, 0xee, 0xe1, 0xed, 0xe0, 0xf1, 0xf6, 0xfc, 0x2c, 0x20, 0xed, 0xe5, 0xe0, 0xe1, 0xf5, 0xee, 0xe4, 0xed, 0xe0, 0xf1, 0xf6, 0xfc, 0x20, 0xf3, 0xef, 0xe0, 0xe4, 0xe0, 0xf6, 0xfc, 0x20, 0xf3, 0x20, 0xf1, 0xef, 0xff, 0xf7, 0xea, 0xf3, 0x20, 0xb3, 0x20, 0xe6, 0xfb, 0xf6, 0xf6, 0xb8, 0x20, 0xa2, 0x20, 0xea, 0xe0, 0xeb, 0xee, 0xed, 0xb3, 0xff, 0xf5, 0x2e, 0x20, 0xd3, 0xf1, 0xe5, 0x20, 0xf1, 0xf3, 0xf0, 0xea, 0xb3, 0x20, 0xf2, 0xf0, 0xe0, 0xe2, 0xe0, 0xff, 0xe4, 0xed, 0xfb, 0xff, 0x2c, 0x20, 0xe6, 0xfb, 0xe2, 0xf3, 0xf6, 0xfc, 0x20, 0xf3, 0x20, 0xed, 0xee, 0xf0, 0xe0, 0xf5, 0x2c, 0x20, 0xec, 0xe0, 0xfe, 0xf6, 0xfc, 0x20, 0xf6, 0xb8, 0xef, 0xeb, 0xe0, 0xe5, 0x20, 0xf4, 0xf3, 0xf2, 0xf0, 0xe0, 0x2e, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBeWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('be'));
    });

    test('detect bg iso-8859-5', () {
      final detector = UCharDet();
      // dart format off
      final kBgIso88595 = Uint8List.fromList([0xbc, 0xd0, 0xe0, 0xdc, 0xde, 0xe2, 0xd8, 0xe2, 0xd5, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0xe1, 0xd0, 0x20, 0xd1, 0xde, 0xd7, 0xd0, 0xd9, 0xdd, 0xd8, 0xe6, 0xd8, 0x20, 0x2d, 0x20, 0xe0, 0xde, 0xd4, 0x20, 0xd3, 0xe0, 0xd8, 0xd7, 0xd0, 0xe7, 0xd8, 0x20, 0xde, 0xe2, 0x20, 0xe1, 0xd5, 0xdc, 0xd5, 0xd9, 0xe1, 0xe2, 0xd2, 0xde, 0x20, 0xda, 0xd0, 0xe2, 0xd5, 0xe0, 0xd8, 0xe6, 0xde, 0xd2, 0xd8, 0x20, 0x28, 0x53, 0x63, 0x69, 0x75, 0x72, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2c, 0x20, 0xd2, 0xda, 0xdb, 0xee, 0xe7, 0xd2, 0xd0, 0xe9, 0x20, 0x31, 0x34, 0x20, 0xd2, 0xd8, 0xd4, 0xd0, 0x2c, 0x20, 0xd2, 0xda, 0xdb, 0xee, 0xe7, 0xd2, 0xd0, 0xe9, 0xd8, 0x20, 0xd3, 0xe0, 0xe3, 0xdf, 0xd0, 0xe2, 0xd0, 0x20, 0xdd, 0xd0, 0x20, 0xdb, 0xd0, 0xdb, 0xe3, 0xd3, 0xd5, 0xe0, 0xd8, 0xe2, 0xd5, 0x20, 0x28, 0x53, 0x70, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x68, 0x69, 0x6c, 0x75, 0x73, 0x20, 0x63, 0x69, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x29, 0x2e, 0x0a, 0x0a, 0xb7, 0xd0, 0x20, 0xe0, 0xd0, 0xd7, 0xdb, 0xd8, 0xda, 0xd0, 0x20, 0xde, 0xe2, 0x20, 0xe0, 0xde, 0xd4, 0xe1, 0xe2, 0xd2, 0xd5, 0xdd, 0xd0, 0xe2, 0xd0, 0x20, 0xda, 0xd0, 0xe2, 0xd5, 0xe0, 0xd8, 0xe6, 0xd0, 0x2c, 0x20, 0xdc, 0xd0, 0xe0, 0xdc, 0xde, 0xe2, 0xea, 0xe2, 0x20, 0xd8, 0x20, 0xdb, 0xd0, 0xdb, 0xe3, 0xd3, 0xd5, 0xe0, 0xea, 0xe2, 0x20, 0xd2, 0xde, 0xd4, 0xef, 0xe2, 0x20, 0xdd, 0xd0, 0xd7, 0xd5, 0xdc, 0xd5, 0xdd, 0x20, 0xdd, 0xd0, 0xe7, 0xd8, 0xdd, 0x20, 0xdd, 0xd0, 0x20, 0xd6, 0xd8, 0xd2, 0xde, 0xe2, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBgIso88595);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-5'),
      );
      expect(candidates.first.language?.iso6391Code, equals('bg'));
    });

    test('detect bg utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kBgUtf8 = Uint8List.fromList([0xd0, 0x9c, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0x20, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0x20, 0x2d, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0x20, 0x28, 0x53, 0x63, 0x69, 0x75, 0x72, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2c, 0x20, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x89, 0x20, 0x31, 0x34, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x28, 0x53, 0x70, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x68, 0x69, 0x6c, 0x75, 0x73, 0x20, 0x63, 0x69, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x29, 0x2e, 0x0a, 0x0a, 0xd0, 0x97, 0xd0, 0xb0, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8a, 0xd1, 0x82, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8a, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8f, 0xd1, 0x82, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd0, 0xbd, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBgUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('bg'));
    });

    test('detect bg windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kBgWindows1251 = Uint8List.fromList([0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x31, 0x20, 0xe5, 0x20, 0x38, 0x2d, 0xe1, 0xe8, 0xf2, 0xee, 0xe2, 0x20, 0x28, 0xe5, 0xe4, 0xed, 0xee, 0xe1, 0xe0, 0xe9, 0xf2, 0xee, 0xe2, 0x29, 0x20, 0xed, 0xe0, 0xe1, 0xee, 0xf0, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xe8, 0x2c, 0x20, 0xef, 0xf0, 0xee, 0xe5, 0xea, 0xf2, 0xe8, 0xf0, 0xe0, 0xed, 0x20, 0xee, 0xf2, 0x20, 0xcc, 0xe0, 0xe9, 0xea, 0xf0, 0xee, 0xf1, 0xee, 0xf4, 0xf2, 0x20, 0xe7, 0xe0, 0x20, 0xe5, 0xe7, 0xe8, 0xf6, 0xe8, 0xf2, 0xe5, 0x2c, 0x20, 0xe8, 0xe7, 0xef, 0xee, 0xeb, 0xe7, 0xe2, 0xe0, 0xf9, 0xe8, 0x20, 0xea, 0xe8, 0xf0, 0xe8, 0xeb, 0xe8, 0xf6, 0xe0, 0x20, 0xea, 0xe0, 0xf2, 0xee, 0x20, 0xe1, 0xfa, 0xeb, 0xe3, 0xe0, 0xf0, 0xf1, 0xea, 0xe8, 0x2c, 0x20, 0xf0, 0xf3, 0xf1, 0xea, 0xe8, 0x20, 0xe8, 0x20, 0xe4, 0xf0, 0xf3, 0xe3, 0xe8, 0x2e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x31, 0x20, 0xe8, 0x20, 0x4b, 0x4f, 0x49, 0x38, 0x2d, 0x52, 0x20, 0x28, 0xe8, 0xeb, 0xe8, 0x20, 0xf3, 0xea, 0xf0, 0xe0, 0xe8, 0xed, 0xf1, 0xea, 0xe8, 0xff, 0xf2, 0x20, 0xec, 0xf3, 0x20, 0xe2, 0xe0, 0xf0, 0xe8, 0xe0, 0xed, 0xf2, 0x20, 0x4b, 0x4f, 0x49, 0x38, 0x2d, 0x55, 0x29, 0x20, 0xf1, 0xe0, 0x20, 0xec, 0xed, 0xee, 0xe3, 0xee, 0x20, 0xef, 0xee, 0x2d, 0xf0, 0xe0, 0xe7, 0xef, 0xf0, 0xee, 0xf1, 0xf2, 0xf0, 0xe0, 0xed, 0xe5, 0xed, 0xe8, 0x20, 0xee, 0xf2, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x35, 0x2c, 0x20, 0xea, 0xee, 0xe9, 0xf2, 0xee, 0x20, 0xed, 0xe5, 0x20, 0xf1, 0xe5, 0x20, 0xe8, 0xe7, 0xef, 0xee, 0xeb, 0xe7, 0xe2, 0xe0, 0x20, 0xec, 0xe0, 0xf1, 0xee, 0xe2, 0xee, 0x2e, 0x20, 0xd2, 0xe5, 0x20, 0xef, 0xee, 0xf1, 0xf2, 0xe5, 0xef, 0xe5, 0xed, 0xed, 0xee, 0x20, 0xf1, 0xe5, 0x20, 0xe8, 0xe7, 0xec, 0xe5, 0xf1, 0xf2, 0xe2, 0xe0, 0xf2, 0x20, 0xee, 0xf2, 0x20, 0xe4, 0xe2, 0xf3, 0xe1, 0xe0, 0xe9, 0xf2, 0xee, 0xe2, 0xe0, 0xf2, 0xe0, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe0, 0x20, 0xd3, 0xed, 0xe8, 0xea, 0xee, 0xe4, 0x2c, 0x20, 0xf1, 0x20, 0xea, 0xee, 0xff, 0xf2, 0xee, 0x20, 0xf0, 0xe0, 0xe1, 0xee, 0xf2, 0xe8, 0x20, 0xe8, 0x20, 0xd3, 0xe8, 0xea, 0xe8, 0xef, 0xe5, 0xe4, 0xe8, 0xff, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kBgWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('bg'));
    });

    test('detect ca iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kCaIso88591 = Uint8List.fromList([0x4c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0x73, 0xf3, 0x6e, 0x20, 0x75, 0x6e, 0x20, 0x67, 0xe8, 0x6e, 0x65, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x6d, 0xed, 0x66, 0x65, 0x72, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x66, 0x61, 0x6d, 0xed, 0x6c, 0x69, 0x61, 0x20, 0x64, 0x65, 0x6c, 0x73, 0x20, 0x65, 0x73, 0x63, 0x69, 0xfa, 0x72, 0x69, 0x64, 0x73, 0x2e, 0x5b, 0x31, 0x5d, 0x20, 0x56, 0x69, 0x75, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x27, 0x61, 0x6c, 0x74, 0x61, 0x20, 0x6d, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x61, 0x20, 0x6c, 0x27, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x66, 0x65, 0x72, 0x69, 0x20, 0x6e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x53, 0xf3, 0x6e, 0x20, 0x72, 0x6f, 0x73, 0x65, 0x67, 0x61, 0x64, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x69, 0x64, 0x61, 0x20, 0x6d, 0x69, 0x74, 0x6a, 0x61, 0x6e, 0x61, 0x2c, 0x20, 0x75, 0x6e, 0x61, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x20, 0x6d, 0xe9, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x73, 0x20, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x20, 0x67, 0x61, 0x74, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0xe8, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x20, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x63, 0x75, 0x72, 0x74, 0x65, 0x73, 0x20, 0x69, 0x20, 0x63, 0x6f, 0x73, 0x20, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0xe7, 0x61, 0x20, 0x72, 0x61, 0x62, 0x61, 0x73, 0x73, 0x75, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCaIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ca'));
    });

    test('detect ca utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kCaUtf8 = Uint8List.fromList([0x4c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0x73, 0xc3, 0xb3, 0x6e, 0x20, 0x75, 0x6e, 0x20, 0x67, 0xc3, 0xa8, 0x6e, 0x65, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x6d, 0xc3, 0xad, 0x66, 0x65, 0x72, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x66, 0x61, 0x6d, 0xc3, 0xad, 0x6c, 0x69, 0x61, 0x20, 0x64, 0x65, 0x6c, 0x73, 0x20, 0x65, 0x73, 0x63, 0x69, 0xc3, 0xba, 0x72, 0x69, 0x64, 0x73, 0x2e, 0x5b, 0x31, 0x5d, 0x20, 0x56, 0x69, 0x75, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x27, 0x61, 0x6c, 0x74, 0x61, 0x20, 0x6d, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x61, 0x20, 0x6c, 0x27, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x66, 0x65, 0x72, 0x69, 0x20, 0x6e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x53, 0xc3, 0xb3, 0x6e, 0x20, 0x72, 0x6f, 0x73, 0x65, 0x67, 0x61, 0x64, 0x6f, 0x72, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x69, 0x64, 0x61, 0x20, 0x6d, 0x69, 0x74, 0x6a, 0x61, 0x6e, 0x61, 0x2c, 0x20, 0x75, 0x6e, 0x61, 0x20, 0x6d, 0x69, 0x63, 0x61, 0x20, 0x6d, 0xc3, 0xa9, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x73, 0x20, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x20, 0x67, 0x61, 0x74, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0xc3, 0xa8, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x20, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x63, 0x75, 0x72, 0x74, 0x65, 0x73, 0x20, 0x69, 0x20, 0x63, 0x6f, 0x73, 0x20, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x71, 0x75, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0xc3, 0xa7, 0x61, 0x20, 0x72, 0x61, 0x62, 0x61, 0x73, 0x73, 0x75, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCaUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ca'));
    });

    test('detect ca windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kCaWindows1252 = Uint8List.fromList([0x4c, 0x65, 0x73, 0x20, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x65, 0x63, 0x6f, 0x6e, 0xf2, 0x6d, 0x69, 0x71, 0x75, 0x65, 0x73, 0x20, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x20, 0x6c, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x74, 0x61, 0x74, 0x20, 0x64, 0x65, 0x20, 0x74, 0x72, 0xe0, 0x6e, 0x73, 0x69, 0x74, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x6c, 0x61, 0x64, 0x6f, 0x72, 0x73, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x69, 0x78, 0xed, 0x20, 0x63, 0x6f, 0x6d, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x27, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x27, 0x75, 0x6e, 0x61, 0x20, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x20, 0xfa, 0x6e, 0x69, 0x63, 0x61, 0x2c, 0x20, 0x6c, 0x27, 0x65, 0x75, 0x72, 0x6f, 0x20, 0x28, 0x80, 0x29, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x74, 0x73, 0x20, 0x65, 0x6c, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x73, 0x20, 0x28, 0x6c, 0x61, 0x20, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x64, 0x61, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x7a, 0x6f, 0x6e, 0x61, 0x29, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCaWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ca'));
    });

    test('detect cs ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kCsIbm852 = Uint8List.fromList([0x4c, 0x65, 0x64, 0xe5, 0xa0, 0x9f, 0x65, 0x6b, 0x20, 0xfd, 0xa1, 0x9f, 0x6e, 0xa1, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x72, 0x85, 0x6d, 0xd8, 0x72, 0x6e, 0xd8, 0x20, 0x31, 0x36, 0x2c, 0x35, 0x20, 0x63, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x6b, 0xec, 0x20, 0x70, 0x74, 0xa0, 0x6b, 0x20, 0x7a, 0x20, 0x9f, 0x65, 0x6c, 0x65, 0x64, 0x69, 0x0a, 0x6c, 0x65, 0x64, 0xe5, 0xa0, 0x9f, 0x6b, 0x6f, 0x76, 0x69, 0x74, 0xec, 0x63, 0x68, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x6d, 0x69, 0x20, 0x76, 0xec, 0x72, 0x61, 0x7a, 0x6e, 0xd8, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xec, 0x20, 0x73, 0x20, 0x6f, 0x72, 0x61, 0x6e, 0xa7, 0x6f, 0x76, 0x6f, 0x75, 0x20, 0x73, 0x70, 0x6f, 0x64, 0x69, 0x6e, 0x6f, 0x75, 0x20, 0x61, 0x0a, 0x6d, 0x6f, 0x64, 0x72, 0xec, 0x6d, 0x20, 0x68, 0xfd, 0x62, 0x65, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6b, 0xfd, 0xa1, 0x64, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x65, 0x6d, 0x2e, 0x20, 0x56, 0xec, 0x72, 0x61, 0x7a, 0x6e, 0xec, 0x6d, 0x20, 0x7a, 0x6e, 0x61, 0x6b, 0x65, 0x6d, 0x20, 0x6a, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x82, 0x20, 0x6a, 0x65, 0x68, 0x6f, 0x20, 0x6e, 0xa0, 0x70, 0x61, 0x64, 0x6e, 0xd8, 0x20, 0x64, 0x6c, 0x6f, 0x75, 0x68, 0xec, 0x0a, 0x7a, 0x61, 0xe7, 0x70, 0x69, 0x9f, 0x61, 0x74, 0xd8, 0x6c, 0xec, 0x20, 0x7a, 0x6f, 0x62, 0xa0, 0x6b, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x20, 0x73, 0x76, 0x82, 0x20, 0x6b, 0x72, 0xa0, 0x73, 0x6e, 0x82, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xa1, 0x20, 0x6a, 0x65, 0x20, 0x6e, 0x61, 0x7a, 0xec, 0x76, 0xa0, 0x6e, 0x20, 0x4c, 0x82, 0x74, 0x61, 0x6a, 0xa1, 0x63, 0xa1, 0x20, 0x64, 0x72, 0x61, 0x68, 0x6f, 0x6b, 0x61, 0x6d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCsIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('cs'));
    });

    test('detect cs iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kCsIso88592 = Uint8List.fromList([0x4c, 0x65, 0x64, 0xf2, 0xe1, 0xe8, 0x65, 0x6b, 0x20, 0xf8, 0xed, 0xe8, 0x6e, 0xed, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x72, 0xf9, 0x6d, 0xec, 0x72, 0x6e, 0xec, 0x20, 0x31, 0x36, 0x2c, 0x35, 0x20, 0x63, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x6b, 0xfd, 0x20, 0x70, 0x74, 0xe1, 0x6b, 0x20, 0x7a, 0x20, 0xe8, 0x65, 0x6c, 0x65, 0x64, 0x69, 0x0a, 0x6c, 0x65, 0x64, 0xf2, 0xe1, 0xe8, 0x6b, 0x6f, 0x76, 0x69, 0x74, 0xfd, 0x63, 0x68, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x6d, 0x69, 0x20, 0x76, 0xfd, 0x72, 0x61, 0x7a, 0x6e, 0xec, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xfd, 0x20, 0x73, 0x20, 0x6f, 0x72, 0x61, 0x6e, 0xbe, 0x6f, 0x76, 0x6f, 0x75, 0x20, 0x73, 0x70, 0x6f, 0x64, 0x69, 0x6e, 0x6f, 0x75, 0x20, 0x61, 0x0a, 0x6d, 0x6f, 0x64, 0x72, 0xfd, 0x6d, 0x20, 0x68, 0xf8, 0x62, 0x65, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6b, 0xf8, 0xed, 0x64, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x65, 0x6d, 0x2e, 0x20, 0x56, 0xfd, 0x72, 0x61, 0x7a, 0x6e, 0xfd, 0x6d, 0x20, 0x7a, 0x6e, 0x61, 0x6b, 0x65, 0x6d, 0x20, 0x6a, 0x65, 0x20, 0x74, 0x61, 0x6b, 0xe9, 0x20, 0x6a, 0x65, 0x68, 0x6f, 0x20, 0x6e, 0xe1, 0x70, 0x61, 0x64, 0x6e, 0xec, 0x20, 0x64, 0x6c, 0x6f, 0x75, 0x68, 0xfd, 0x0a, 0x7a, 0x61, 0xb9, 0x70, 0x69, 0xe8, 0x61, 0x74, 0xec, 0x6c, 0xfd, 0x20, 0x7a, 0x6f, 0x62, 0xe1, 0x6b, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x20, 0x73, 0x76, 0xe9, 0x20, 0x6b, 0x72, 0xe1, 0x73, 0x6e, 0xe9, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xed, 0x20, 0x6a, 0x65, 0x20, 0x6e, 0x61, 0x7a, 0xfd, 0x76, 0xe1, 0x6e, 0x20, 0x4c, 0xe9, 0x74, 0x61, 0x6a, 0xed, 0x63, 0xed, 0x20, 0x64, 0x72, 0x61, 0x68, 0x6f, 0x6b, 0x61, 0x6d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCsIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('cs'));
    });

    test('detect cs mac-centraleurope', () {
      final detector = UCharDet();
      // dart format off
      final kCsMaccentraleurope = Uint8List.fromList([0x4c, 0x65, 0x64, 0xcb, 0x87, 0x8b, 0x65, 0x6b, 0x20, 0xde, 0x92, 0x8b, 0x6e, 0x92, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x72, 0xf3, 0x6d, 0x9e, 0x72, 0x6e, 0x9e, 0x20, 0x31, 0x36, 0x2c, 0x35, 0x20, 0x63, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x6b, 0xf9, 0x20, 0x70, 0x74, 0x87, 0x6b, 0x20, 0x7a, 0x20, 0x8b, 0x65, 0x6c, 0x65, 0x64, 0x69, 0x0a, 0x6c, 0x65, 0x64, 0xcb, 0x87, 0x8b, 0x6b, 0x6f, 0x76, 0x69, 0x74, 0xf9, 0x63, 0x68, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x6d, 0x69, 0x20, 0x76, 0xf9, 0x72, 0x61, 0x7a, 0x6e, 0x9e, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xf9, 0x20, 0x73, 0x20, 0x6f, 0x72, 0x61, 0x6e, 0xec, 0x6f, 0x76, 0x6f, 0x75, 0x20, 0x73, 0x70, 0x6f, 0x64, 0x69, 0x6e, 0x6f, 0x75, 0x20, 0x61, 0x0a, 0x6d, 0x6f, 0x64, 0x72, 0xf9, 0x6d, 0x20, 0x68, 0xde, 0x62, 0x65, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6b, 0xde, 0x92, 0x64, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x65, 0x6d, 0x2e, 0x20, 0x56, 0xf9, 0x72, 0x61, 0x7a, 0x6e, 0xf9, 0x6d, 0x20, 0x7a, 0x6e, 0x61, 0x6b, 0x65, 0x6d, 0x20, 0x6a, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x8e, 0x20, 0x6a, 0x65, 0x68, 0x6f, 0x20, 0x6e, 0x87, 0x70, 0x61, 0x64, 0x6e, 0x9e, 0x20, 0x64, 0x6c, 0x6f, 0x75, 0x68, 0xf9, 0x0a, 0x7a, 0x61, 0xe4, 0x70, 0x69, 0x8b, 0x61, 0x74, 0x9e, 0x6c, 0xf9, 0x20, 0x7a, 0x6f, 0x62, 0x87, 0x6b, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x20, 0x73, 0x76, 0x8e, 0x20, 0x6b, 0x72, 0x87, 0x73, 0x6e, 0x8e, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0x92, 0x20, 0x6a, 0x65, 0x20, 0x6e, 0x61, 0x7a, 0xf9, 0x76, 0x87, 0x6e, 0x20, 0x4c, 0x8e, 0x74, 0x61, 0x6a, 0x92, 0x63, 0x92, 0x20, 0x64, 0x72, 0x61, 0x68, 0x6f, 0x6b, 0x61, 0x6d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCsMaccentraleurope);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-centraleurope'),
      );
      expect(candidates.first.language?.iso6391Code, equals('cs'));
    });

    test('detect cs utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kCsUtf8 = Uint8List.fromList([0x4c, 0x65, 0x64, 0xc5, 0x88, 0xc3, 0xa1, 0xc4, 0x8d, 0x65, 0x6b, 0x20, 0xc5, 0x99, 0xc3, 0xad, 0xc4, 0x8d, 0x6e, 0xc3, 0xad, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x72, 0xc5, 0xaf, 0x6d, 0xc4, 0x9b, 0x72, 0x6e, 0xc4, 0x9b, 0x20, 0x31, 0x36, 0x2c, 0x35, 0x20, 0x63, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x6b, 0xc3, 0xbd, 0x20, 0x70, 0x74, 0xc3, 0xa1, 0x6b, 0x20, 0x7a, 0x20, 0xc4, 0x8d, 0x65, 0x6c, 0x65, 0x64, 0x69, 0x0a, 0x6c, 0x65, 0x64, 0xc5, 0x88, 0xc3, 0xa1, 0xc4, 0x8d, 0x6b, 0x6f, 0x76, 0x69, 0x74, 0xc3, 0xbd, 0x63, 0x68, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x6d, 0x69, 0x20, 0x76, 0xc3, 0xbd, 0x72, 0x61, 0x7a, 0x6e, 0xc4, 0x9b, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xc3, 0xbd, 0x20, 0x73, 0x20, 0x6f, 0x72, 0x61, 0x6e, 0xc5, 0xbe, 0x6f, 0x76, 0x6f, 0x75, 0x20, 0x73, 0x70, 0x6f, 0x64, 0x69, 0x6e, 0x6f, 0x75, 0x20, 0x61, 0x0a, 0x6d, 0x6f, 0x64, 0x72, 0xc3, 0xbd, 0x6d, 0x20, 0x68, 0xc5, 0x99, 0x62, 0x65, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6b, 0xc5, 0x99, 0xc3, 0xad, 0x64, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x65, 0x6d, 0x2e, 0x20, 0x56, 0xc3, 0xbd, 0x72, 0x61, 0x7a, 0x6e, 0xc3, 0xbd, 0x6d, 0x20, 0x7a, 0x6e, 0x61, 0x6b, 0x65, 0x6d, 0x20, 0x6a, 0x65, 0x20, 0x74, 0x61, 0x6b, 0xc3, 0xa9, 0x20, 0x6a, 0x65, 0x68, 0x6f, 0x20, 0x6e, 0xc3, 0xa1, 0x70, 0x61, 0x64, 0x6e, 0xc4, 0x9b, 0x20, 0x64, 0x6c, 0x6f, 0x75, 0x68, 0xc3, 0xbd, 0x0a, 0x7a, 0x61, 0xc5, 0xa1, 0x70, 0x69, 0xc4, 0x8d, 0x61, 0x74, 0xc4, 0x9b, 0x6c, 0xc3, 0xbd, 0x20, 0x7a, 0x6f, 0x62, 0xc3, 0xa1, 0x6b, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x20, 0x73, 0x76, 0xc3, 0xa9, 0x20, 0x6b, 0x72, 0xc3, 0xa1, 0x73, 0x6e, 0xc3, 0xa9, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xc3, 0xad, 0x20, 0x6a, 0x65, 0x20, 0x6e, 0x61, 0x7a, 0xc3, 0xbd, 0x76, 0xc3, 0xa1, 0x6e, 0x20, 0x4c, 0xc3, 0xa9, 0x74, 0x61, 0x6a, 0xc3, 0xad, 0x63, 0xc3, 0xad, 0x20, 0x64, 0x72, 0x61, 0x68, 0x6f, 0x6b, 0x61, 0x6d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCsUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('cs'));
    });

    test('detect cs windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kCsWindows1250 = Uint8List.fromList([0x4c, 0x65, 0x64, 0xf2, 0xe1, 0xe8, 0x65, 0x6b, 0x20, 0xf8, 0xed, 0xe8, 0x6e, 0xed, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x72, 0xf9, 0x6d, 0xec, 0x72, 0x6e, 0xec, 0x20, 0x31, 0x36, 0x2c, 0x35, 0x20, 0x63, 0x6d, 0x20, 0x76, 0x65, 0x6c, 0x6b, 0xfd, 0x20, 0x70, 0x74, 0xe1, 0x6b, 0x20, 0x7a, 0x20, 0xe8, 0x65, 0x6c, 0x65, 0x64, 0x69, 0x0a, 0x6c, 0x65, 0x64, 0xf2, 0xe1, 0xe8, 0x6b, 0x6f, 0x76, 0x69, 0x74, 0xfd, 0x63, 0x68, 0x20, 0x28, 0x41, 0x6c, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x29, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x76, 0x65, 0x6c, 0x6d, 0x69, 0x20, 0x76, 0xfd, 0x72, 0x61, 0x7a, 0x6e, 0xec, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xfd, 0x20, 0x73, 0x20, 0x6f, 0x72, 0x61, 0x6e, 0x9e, 0x6f, 0x76, 0x6f, 0x75, 0x20, 0x73, 0x70, 0x6f, 0x64, 0x69, 0x6e, 0x6f, 0x75, 0x20, 0x61, 0x0a, 0x6d, 0x6f, 0x64, 0x72, 0xfd, 0x6d, 0x20, 0x68, 0xf8, 0x62, 0x65, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6b, 0xf8, 0xed, 0x64, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x65, 0x6d, 0x2e, 0x20, 0x56, 0xfd, 0x72, 0x61, 0x7a, 0x6e, 0xfd, 0x6d, 0x20, 0x7a, 0x6e, 0x61, 0x6b, 0x65, 0x6d, 0x20, 0x6a, 0x65, 0x20, 0x74, 0x61, 0x6b, 0xe9, 0x20, 0x6a, 0x65, 0x68, 0x6f, 0x20, 0x6e, 0xe1, 0x70, 0x61, 0x64, 0x6e, 0xec, 0x20, 0x64, 0x6c, 0x6f, 0x75, 0x68, 0xfd, 0x0a, 0x7a, 0x61, 0x9a, 0x70, 0x69, 0xe8, 0x61, 0x74, 0xec, 0x6c, 0xfd, 0x20, 0x7a, 0x6f, 0x62, 0xe1, 0x6b, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x20, 0x73, 0x76, 0xe9, 0x20, 0x6b, 0x72, 0xe1, 0x73, 0x6e, 0xe9, 0x20, 0x7a, 0x62, 0x61, 0x72, 0x76, 0x65, 0x6e, 0xed, 0x20, 0x6a, 0x65, 0x20, 0x6e, 0x61, 0x7a, 0xfd, 0x76, 0xe1, 0x6e, 0x20, 0x4c, 0xe9, 0x74, 0x61, 0x6a, 0xed, 0x63, 0xed, 0x20, 0x64, 0x72, 0x61, 0x68, 0x6f, 0x6b, 0x61, 0x6d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kCsWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('cs'));
    });

    test('detect da ibm865', () {
      final detector = UCharDet();
      // dart format off
      final kDaIbm865 = Uint8List.fromList([0x4a, 0x69, 0x6d, 0x69, 0x20, 0x48, 0x65, 0x6e, 0x64, 0x72, 0x69, 0x78, 0x20, 0x28, 0x31, 0x39, 0x34, 0x32, 0x2d, 0x31, 0x39, 0x37, 0x30, 0x29, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x6b, 0x61, 0x6e, 0x73, 0x6b, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x67, 0x75, 0x69, 0x74, 0x61, 0x72, 0x69, 0x73, 0x74, 0x2c, 0x20, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x73, 0x61, 0x6e, 0x67, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x64, 0x74, 0x65, 0x20, 0x61, 0x74, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x67, 0x75, 0x69, 0x74, 0x61, 0x72, 0x2c, 0x20, 0x64, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x20, 0x66, 0x65, 0x6d, 0x74, 0x65, 0x6e, 0x20, 0x86, 0x72, 0x2c, 0x20, 0x6f, 0x67, 0x20, 0x65, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x52, 0x69, 0x63, 0x68, 0x61, 0x72, 0x64, 0x20, 0x64, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x4a, 0x69, 0x6d, 0x69, 0x20, 0x48, 0x65, 0x6e, 0x64, 0x72, 0x69, 0x78, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x20, 0x73, 0x6c, 0x75, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x20, 0x31, 0x39, 0x36, 0x36, 0x2e, 0x20, 0x44, 0x65, 0x6e, 0x6e, 0x65, 0x20, 0x67, 0x72, 0x75, 0x70, 0x70, 0x65, 0x20, 0x66, 0x69, 0x6b, 0x20, 0x73, 0x6e, 0x61, 0x72, 0x74, 0x20, 0x68, 0x69, 0x74, 0x73, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x22, 0x48, 0x65, 0x79, 0x20, 0x4a, 0x6f, 0x65, 0x22, 0x20, 0x6f, 0x67, 0x20, 0x22, 0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x20, 0x48, 0x61, 0x7a, 0x65, 0x22, 0x2c, 0x20, 0x6f, 0x67, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x20, 0x74, 0x72, 0x65, 0x64, 0x6a, 0x65, 0x20, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x2c, 0x20, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x20, 0x4c, 0x61, 0x64, 0x79, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72, 0x61, 0x20, 0x31, 0x39, 0x36, 0x38, 0x2c, 0x20, 0x66, 0x69, 0x6b, 0x20, 0x67, 0x72, 0x75, 0x70, 0x70, 0x65, 0x6e, 0x20, 0x73, 0x69, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x6e, 0x65, 0x6d, 0x62, 0x72, 0x75, 0x64, 0x2e, 0x20, 0x4d, 0x65, 0x64, 0x20, 0x66, 0x6c, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x6e, 0x74, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x72, 0x91, 0x64, 0x65, 0x6e, 0x65, 0x72, 0x20, 0x70, 0x86, 0x20, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x66, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x68, 0x65, 0x72, 0x69, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x74, 0x20, 0x57, 0x6f, 0x6f, 0x64, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2c, 0x20, 0x6f, 0x70, 0x6e, 0x86, 0x65, 0x64, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x6d, 0x75, 0x73, 0x69, 0x6b, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x65, 0x64, 0x65, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x20, 0x69, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x0a, 0x0a, 0x48, 0x65, 0x6e, 0x64, 0x72, 0x69, 0x78, 0x20, 0x62, 0x72, 0x75, 0x67, 0x74, 0x65, 0x20, 0x73, 0x69, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6b, 0x74, 0x72, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x67, 0x75, 0x69, 0x74, 0x61, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x65, 0x6c, 0x65, 0x6b, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x6c, 0x79, 0x64, 0x6b, 0x69, 0x6c, 0x64, 0x65, 0x20, 0x6f, 0x67, 0x20, 0x65, 0x6b, 0x73, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x67, 0x20, 0x64, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x75, 0x64, 0x67, 0x61, 0x6e, 0x67, 0x73, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x20, 0x69, 0x20, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x27, 0x6e, 0x27, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x6f, 0x67, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x20, 0x48, 0x61, 0x6e, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x62, 0x72, 0x75, 0x67, 0x20, 0x61, 0x66, 0x20, 0x61, 0x6c, 0x6b, 0x6f, 0x68, 0x6f, 0x6c, 0x20, 0x6f, 0x67, 0x20, 0x6e, 0x61, 0x72, 0x6b, 0x6f, 0x74, 0x69, 0x6b, 0x61, 0x20, 0x66, 0x9b, 0x72, 0x74, 0x65, 0x20, 0x69, 0x6d, 0x69, 0x64, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x64, 0x20, 0x74, 0x69, 0x6c, 0x2c, 0x20, 0x61, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x9b, 0x64, 0x65, 0x6c, 0x61, 0x67, 0x64, 0x65, 0x20, 0x73, 0x69, 0x67, 0x20, 0x73, 0x65, 0x6c, 0x76, 0x2c, 0x20, 0x6f, 0x67, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x9b, 0x64, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x6c, 0x6f, 0x74, 0x20, 0x32, 0x37, 0x2d, 0x86, 0x72, 0x69, 0x67, 0x20, 0x65, 0x66, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x74, 0x61, 0x67, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x61, 0x66, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDaIbm865);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm865'));
      expect(candidates.first.language?.iso6391Code, equals('da'));
    });

    test('detect da iso-8859-15', () {
      final detector = UCharDet();
      // dart format off
      final kDaIso885915 = Uint8List.fromList([0x45, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x74, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x28, 0xa4, 0x29, 0x20, 0x61, 0x6e, 0x76, 0x65, 0x6e, 0x64, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0xf8, 0x6e, 0x74, 0x65, 0x6e, 0x68, 0x65, 0x64, 0x65, 0x6e, 0x0a, 0x65, 0x75, 0x72, 0x6f, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x6b, 0x20, 0x6b, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x20, 0x65, 0x74, 0x20, 0x45, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x74, 0x20, 0x67, 0x72, 0xe6, 0x73, 0x6b, 0x20, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6c, 0x65, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x69, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x20, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6b, 0x6b, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x73, 0x69, 0x6b, 0x6b, 0x65, 0x72, 0x68, 0x65, 0x64, 0x2c, 0x20, 0x68, 0x76, 0x65, 0x6d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x66, 0x2e, 0x20, 0x4e, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x65, 0x72, 0x0a, 0x68, 0xe6, 0x76, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x74, 0x69, 0x64, 0x6c, 0x69, 0x67, 0x65, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x76, 0x65, 0x64, 0x20, 0x45, 0x46, 0x20, 0x41, 0x72, 0x74, 0x68, 0x75, 0x72, 0x20, 0x45, 0x69, 0x73, 0x65, 0x6e, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x20, 0x70, 0xe5, 0x73, 0x74, 0xe5, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x75, 0x70, 0x70, 0x65, 0x20, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x20, 0x61, 0x66, 0x20, 0x41, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x74, 0x2e, 0x20, 0x4d, 0x75, 0x6c, 0x69, 0x67, 0x76, 0x69, 0x73, 0x0a, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x20, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6b, 0x6c, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6b, 0x6f, 0x72, 0x72, 0x65, 0x6b, 0x74, 0x65, 0x2c, 0x20, 0x64, 0x61, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x50, 0x61, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0xe6, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x64, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x0a, 0x27, 0x31, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x27, 0x2d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x6a, 0x65, 0x20, 0x69, 0x20, 0x31, 0x39, 0x37, 0x32, 0x2c, 0x20, 0x68, 0x76, 0x6f, 0x72, 0x70, 0xe5, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6b, 0x61, 0x6e, 0x20, 0x73, 0x65, 0x20, 0x65, 0x74, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x69, 0x20, 0x68, 0xf8, 0x6a, 0x20, 0x67, 0x72, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x0a, 0x6e, 0x75, 0x76, 0xe6, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDaIso885915);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-15'),
      );
      expect(candidates.first.language?.iso6391Code, equals('da'));
    });

    test('detect da utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kDaUtf8 = Uint8List.fromList([0x45, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x74, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x28, 0xe2, 0x82, 0xac, 0x29, 0x20, 0x61, 0x6e, 0x76, 0x65, 0x6e, 0x64, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0xc3, 0xb8, 0x6e, 0x74, 0x65, 0x6e, 0x68, 0x65, 0x64, 0x65, 0x6e, 0x0a, 0x65, 0x75, 0x72, 0x6f, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x6b, 0x20, 0x6b, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x20, 0x65, 0x74, 0x20, 0x45, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x74, 0x20, 0x67, 0x72, 0xc3, 0xa6, 0x73, 0x6b, 0x20, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6c, 0x65, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x69, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x20, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6b, 0x6b, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x73, 0x69, 0x6b, 0x6b, 0x65, 0x72, 0x68, 0x65, 0x64, 0x2c, 0x20, 0x68, 0x76, 0x65, 0x6d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x66, 0x2e, 0x20, 0x4e, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x65, 0x72, 0x0a, 0x68, 0xc3, 0xa6, 0x76, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x74, 0x69, 0x64, 0x6c, 0x69, 0x67, 0x65, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x76, 0x65, 0x64, 0x20, 0x45, 0x46, 0x20, 0x41, 0x72, 0x74, 0x68, 0x75, 0x72, 0x20, 0x45, 0x69, 0x73, 0x65, 0x6e, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x20, 0x70, 0xc3, 0xa5, 0x73, 0x74, 0xc3, 0xa5, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x75, 0x70, 0x70, 0x65, 0x20, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x20, 0x61, 0x66, 0x20, 0x41, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x74, 0x2e, 0x20, 0x4d, 0x75, 0x6c, 0x69, 0x67, 0x76, 0x69, 0x73, 0x0a, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x20, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6b, 0x6c, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6b, 0x6f, 0x72, 0x72, 0x65, 0x6b, 0x74, 0x65, 0x2c, 0x20, 0x64, 0x61, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x50, 0x61, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0xc3, 0xa6, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x64, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x0a, 0x27, 0x31, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x27, 0x2d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x6a, 0x65, 0x20, 0x69, 0x20, 0x31, 0x39, 0x37, 0x32, 0x2c, 0x20, 0x68, 0x76, 0x6f, 0x72, 0x70, 0xc3, 0xa5, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6b, 0x61, 0x6e, 0x20, 0x73, 0x65, 0x20, 0x65, 0x74, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x69, 0x20, 0x68, 0xc3, 0xb8, 0x6a, 0x20, 0x67, 0x72, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x0a, 0x6e, 0x75, 0x76, 0xc3, 0xa6, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDaUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('da'));
    });

    test('detect da windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kDaWindows1252 = Uint8List.fromList([0x45, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x74, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x28, 0x80, 0x29, 0x20, 0x61, 0x6e, 0x76, 0x65, 0x6e, 0x64, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0xf8, 0x6e, 0x74, 0x65, 0x6e, 0x68, 0x65, 0x64, 0x65, 0x6e, 0x0a, 0x65, 0x75, 0x72, 0x6f, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x6b, 0x20, 0x6b, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x20, 0x65, 0x74, 0x20, 0x45, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x74, 0x20, 0x67, 0x72, 0xe6, 0x73, 0x6b, 0x20, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6c, 0x65, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x20, 0x69, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x20, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x69, 0x6b, 0x6b, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x73, 0x69, 0x6b, 0x6b, 0x65, 0x72, 0x68, 0x65, 0x64, 0x2c, 0x20, 0x68, 0x76, 0x65, 0x6d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x66, 0x2e, 0x20, 0x4e, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x65, 0x72, 0x0a, 0x68, 0xe6, 0x76, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x74, 0x69, 0x64, 0x6c, 0x69, 0x67, 0x65, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x76, 0x65, 0x64, 0x20, 0x45, 0x46, 0x20, 0x41, 0x72, 0x74, 0x68, 0x75, 0x72, 0x20, 0x45, 0x69, 0x73, 0x65, 0x6e, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x20, 0x70, 0xe5, 0x73, 0x74, 0xe5, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x65, 0x76, 0x20, 0x73, 0x6b, 0x61, 0x62, 0x74, 0x20, 0x61, 0x66, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x75, 0x70, 0x70, 0x65, 0x20, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x20, 0x61, 0x66, 0x20, 0x41, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x65, 0x74, 0x2e, 0x20, 0x4d, 0x75, 0x6c, 0x69, 0x67, 0x76, 0x69, 0x73, 0x0a, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x20, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6b, 0x6c, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6b, 0x6f, 0x72, 0x72, 0x65, 0x6b, 0x74, 0x65, 0x2c, 0x20, 0x64, 0x61, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x50, 0x61, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0xe6, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x64, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x0a, 0x27, 0x31, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x27, 0x2d, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x6a, 0x65, 0x20, 0x69, 0x20, 0x31, 0x39, 0x37, 0x32, 0x2c, 0x20, 0x68, 0x76, 0x6f, 0x72, 0x70, 0xe5, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x6b, 0x61, 0x6e, 0x20, 0x73, 0x65, 0x20, 0x65, 0x74, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x69, 0x20, 0x68, 0xf8, 0x6a, 0x20, 0x67, 0x72, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x0a, 0x6e, 0x75, 0x76, 0xe6, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDaWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('da'));
    });

    test('detect de iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kDeIso88591 = Uint8List.fromList([0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x67, 0x65, 0x6e, 0x61, 0x75, 0x65, 0x72, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x61, 0x75, 0x63, 0x68, 0x20, 0x62, 0x65, 0x6b, 0x61, 0x6e, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x20, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x2d, 0x31, 0x2c, 0x20, 0x69, 0x73, 0x74, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x0a, 0x49, 0x53, 0x4f, 0x20, 0x7a, 0x75, 0x6c, 0x65, 0x74, 0x7a, 0x74, 0x20, 0x31, 0x39, 0x39, 0x38, 0x20, 0x61, 0x6b, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x69, 0x65, 0x72, 0x74, 0x65, 0x72, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x66, 0xfc, 0x72, 0x20, 0x64, 0x69, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x6b, 0x20, 0x7a, 0x75, 0x72, 0x0a, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x61, 0x63, 0x68, 0x74, 0x20, 0x42, 0x69, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x72, 0x20, 0x65, 0x72, 0x73, 0x74, 0x65, 0x20, 0x54, 0x65, 0x69, 0x6c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x65, 0x6e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2e, 0x0a, 0x0a, 0x44, 0x69, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x73, 0x69, 0x65, 0x62, 0x65, 0x6e, 0x20, 0x42, 0x69, 0x74, 0x20, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x53, 0x2d, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x66, 0xfc, 0x68, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x6d, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x2e, 0x20, 0x5a, 0x75, 0x73, 0xe4, 0x74, 0x7a, 0x6c, 0x69, 0x63, 0x68, 0x20, 0x7a, 0x75, 0x20, 0x64, 0x65, 0x6e, 0x20, 0x39, 0x35, 0x20, 0x64, 0x61, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2d, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x28, 0x32, 0x30, 0x31, 0x36, 0x2d, 0x37, 0x45, 0x31, 0x36, 0x29, 0x20, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x74, 0x0a, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x39, 0x36, 0x20, 0x77, 0x65, 0x69, 0x74, 0x65, 0x72, 0x65, 0x20, 0x28, 0x41, 0x30, 0x31, 0x36, 0x2d, 0x46, 0x46, 0x31, 0x36, 0x29, 0x2c, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x73, 0x67, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x20, 0x31, 0x39, 0x31, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x73, 0x63, 0x68, 0x20, 0x6d, 0xf6, 0x67, 0x6c, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x0a, 0x32, 0x35, 0x36, 0x20, 0x28, 0x3d, 0x20, 0x32, 0x38, 0x29, 0x2e, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x30, 0x30, 0x31, 0x36, 0x2d, 0x31, 0x46, 0x31, 0x36, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x37, 0x46, 0x31, 0x36, 0x2d, 0x39, 0x46, 0x31, 0x36, 0x20, 0x73, 0x69, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x20, 0x75, 0x6e, 0x64, 0x0a, 0x64, 0x61, 0x6d, 0x69, 0x74, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x6b, 0x65, 0x69, 0x6e, 0x65, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x7a, 0x75, 0x67, 0x65, 0x77, 0x69, 0x65, 0x73, 0x65, 0x6e, 0x2e, 0x20, 0x44, 0x69, 0x65, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x49, 0x41, 0x4e, 0x41, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x65, 0x72, 0x74, 0x65, 0x0a, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x28, 0x6d, 0x69, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x68, 0x29, 0x20, 0x73, 0x74, 0x65, 0x68, 0x74, 0x20, 0x66, 0xfc, 0x72, 0x20, 0x64, 0x69, 0x65, 0x20, 0x4b, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x0a, 0x64, 0x69, 0x65, 0x73, 0x65, 0x72, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x6e, 0x69, 0x63, 0x68, 0x74, 0x20, 0x64, 0x61, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x67, 0x65, 0x6d, 0xe4, 0xdf, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x36, 0x34, 0x32, 0x39, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDeIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('de'));
    });

    test('detect de utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kDeUtf8 = Uint8List.fromList([0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x20, 0x28, 0x5a, 0x75, 0x6d, 0x20, 0x41, 0x6e, 0x68, 0xc3, 0xb6, 0x72, 0x65, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x74, 0x65, 0x20, 0x6b, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x21, 0x41, 0x62, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x65, 0x6e, 0x20, 0x5b, 0x62, 0xc9, 0x9b, 0xc9, 0x90, 0xcc, 0xaf, 0xcb, 0x88, 0x6c, 0x69, 0xcb, 0x90, 0x6e, 0x5d, 0x29, 0x20, 0x69, 0x73, 0x74, 0x20, 0x48, 0x61, 0x75, 0x70, 0x74, 0x73, 0x74, 0x61, 0x64, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x73, 0x20, 0x4c, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x69, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x72, 0x6c, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x73, 0x63, 0x68, 0x65, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x69, 0x6c, 0x73, 0x6f, 0x75, 0x76, 0x65, 0x72, 0xc3, 0xa4, 0x6e, 0x65, 0x72, 0x20, 0x47, 0x6c, 0x69, 0x65, 0x64, 0x73, 0x74, 0x61, 0x61, 0x74, 0x20, 0x64, 0x65, 0x72, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x20, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x5b, 0x31, 0x34, 0x5d, 0x20, 0x44, 0x69, 0x65, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x20, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x72, 0x75, 0x6e, 0x64, 0x20, 0x33, 0x2c, 0x37, 0x20, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x45, 0x69, 0x6e, 0x77, 0x6f, 0x68, 0x6e, 0x65, 0x72, 0x6e, 0x20, 0x64, 0x69, 0x65, 0x20, 0x62, 0x65, 0x76, 0xc3, 0xb6, 0x6c, 0x6b, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x72, 0x65, 0x69, 0x63, 0x68, 0x73, 0x74, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x38, 0x39, 0x32, 0x20, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x64, 0x69, 0x65, 0x20, 0x66, 0x6c, 0xc3, 0xa4, 0x63, 0x68, 0x65, 0x6e, 0x67, 0x72, 0xc3, 0xb6, 0xc3, 0x9f, 0x74, 0x65, 0x20, 0x47, 0x65, 0x6d, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x20, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x65, 0x20, 0x65, 0x69, 0x6e, 0x77, 0x6f, 0x68, 0x6e, 0x65, 0x72, 0x73, 0x74, 0xc3, 0xa4, 0x72, 0x6b, 0x73, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x20, 0x64, 0x65, 0x72, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0xc3, 0xa4, 0x69, 0x73, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x5b, 0x34, 0x5d, 0x20, 0x49, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x41, 0x67, 0x67, 0x6c, 0x6f, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x62, 0x65, 0x6e, 0x20, 0x6b, 0x6e, 0x61, 0x70, 0x70, 0x20, 0x34, 0x2c, 0x37, 0x20, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x45, 0x69, 0x6e, 0x77, 0x6f, 0x68, 0x6e, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2f, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x6e, 0x62, 0x75, 0x72, 0x67, 0x20, 0x67, 0x75, 0x74, 0x20, 0x73, 0x65, 0x63, 0x68, 0x73, 0x20, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x72, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x73, 0x74, 0x61, 0x61, 0x74, 0x20, 0x62, 0x65, 0x73, 0x74, 0x65, 0x68, 0x74, 0x20, 0x61, 0x75, 0x73, 0x20, 0x7a, 0x77, 0xc3, 0xb6, 0x6c, 0x66, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x42, 0x65, 0x7a, 0x69, 0x72, 0x6b, 0x65, 0x6e, 0x2e, 0x20, 0x4e, 0x65, 0x62, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x20, 0x46, 0x6c, 0xc3, 0xbc, 0x73, 0x73, 0x65, 0x6e, 0x20, 0x53, 0x70, 0x72, 0x65, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x48, 0x61, 0x76, 0x65, 0x6c, 0x20, 0x62, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x73, 0x69, 0x63, 0x68, 0x20, 0x69, 0x6d, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x20, 0x6b, 0x6c, 0x65, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x20, 0x46, 0x6c, 0x69, 0x65, 0xc3, 0x9f, 0x67, 0x65, 0x77, 0xc3, 0xa4, 0x73, 0x73, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x77, 0x69, 0x65, 0x20, 0x7a, 0x61, 0x68, 0x6c, 0x72, 0x65, 0x69, 0x63, 0x68, 0x65, 0x20, 0x53, 0x65, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x57, 0xc3, 0xa4, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x49, 0x6d, 0x20, 0x4a, 0x61, 0x68, 0x72, 0x20, 0x31, 0x32, 0x33, 0x37, 0x20, 0x65, 0x72, 0x73, 0x74, 0x6d, 0x61, 0x6c, 0x73, 0x20, 0x75, 0x72, 0x6b, 0x75, 0x6e, 0x64, 0x6c, 0x69, 0x63, 0x68, 0x20, 0x65, 0x72, 0x77, 0xc3, 0xa4, 0x68, 0x6e, 0x74, 0x2c, 0x20, 0x77, 0x61, 0x72, 0x20, 0x64, 0x69, 0x65, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x47, 0x65, 0x73, 0x63, 0x68, 0x69, 0x63, 0x68, 0x74, 0x65, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x73, 0x20, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x7a, 0x2d, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x48, 0x61, 0x75, 0x70, 0x74, 0x73, 0x74, 0x61, 0x64, 0x74, 0x20, 0x64, 0x65, 0x72, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x20, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x6e, 0x62, 0x75, 0x72, 0x67, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x20, 0x4b, 0xc3, 0xb6, 0x6e, 0x69, 0x67, 0x72, 0x65, 0x69, 0x63, 0x68, 0x73, 0x20, 0x50, 0x72, 0x65, 0x75, 0xc3, 0x9f, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x20, 0x4e, 0x61, 0x63, 0x68, 0x20, 0x64, 0x65, 0x6d, 0x20, 0x45, 0x6e, 0x64, 0x65, 0x20, 0x64, 0x65, 0x73, 0x20, 0x5a, 0x77, 0x65, 0x69, 0x74, 0x65, 0x6e, 0x20, 0x57, 0x65, 0x6c, 0x74, 0x6b, 0x72, 0x69, 0x65, 0x67, 0x73, 0x20, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x61, 0x67, 0x20, 0x64, 0x69, 0x65, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x20, 0x31, 0x39, 0x34, 0x35, 0x20, 0x64, 0x65, 0x6d, 0x20, 0x56, 0x69, 0x65, 0x72, 0x6d, 0xc3, 0xa4, 0x63, 0x68, 0x74, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x20, 0x4f, 0x73, 0x74, 0x2d, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x20, 0x68, 0x61, 0x74, 0x74, 0x65, 0x20, 0x61, 0x62, 0x20, 0x31, 0x39, 0x34, 0x39, 0x20, 0x64, 0x69, 0x65, 0x20, 0x46, 0x75, 0x6e, 0x6b, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x73, 0x20, 0x48, 0x61, 0x75, 0x70, 0x74, 0x73, 0x74, 0x61, 0x64, 0x74, 0x20, 0x64, 0x65, 0x72, 0x20, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x44, 0x65, 0x6d, 0x6f, 0x6b, 0x72, 0x61, 0x74, 0x69, 0x73, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x2c, 0x20, 0x77, 0xc3, 0xa4, 0x68, 0x72, 0x65, 0x6e, 0x64, 0x20, 0x57, 0x65, 0x73, 0x74, 0x2d, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x20, 0x73, 0x69, 0x63, 0x68, 0x20, 0x65, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x20, 0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x73, 0x63, 0x68, 0x6c, 0x6f, 0x73, 0x73, 0x2e, 0x20, 0x4d, 0x69, 0x74, 0x20, 0x64, 0x65, 0x6d, 0x20, 0x46, 0x61, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x4d, 0x61, 0x75, 0x65, 0x72, 0x20, 0x31, 0x39, 0x38, 0x39, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x72, 0x20, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x57, 0x69, 0x65, 0x64, 0x65, 0x72, 0x76, 0x65, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x67, 0x75, 0x6e, 0x67, 0x20, 0x69, 0x6d, 0x20, 0x4a, 0x61, 0x68, 0x72, 0x20, 0x31, 0x39, 0x39, 0x30, 0x20, 0x77, 0x75, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x20, 0x64, 0x69, 0x65, 0x20, 0x62, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x68, 0xc3, 0xa4, 0x6c, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x65, 0x64, 0x65, 0x72, 0x20, 0x7a, 0x75, 0x73, 0x61, 0x6d, 0x6d, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x42, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x20, 0x65, 0x72, 0x68, 0x69, 0x65, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x69, 0x6e, 0x65, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x20, 0x67, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65, 0x20, 0x48, 0x61, 0x75, 0x70, 0x74, 0x73, 0x74, 0x61, 0x64, 0x74, 0x20, 0x7a, 0x75, 0x72, 0xc3, 0xbc, 0x63, 0x6b, 0x2e, 0x20, 0x53, 0x65, 0x69, 0x74, 0x20, 0x31, 0x39, 0x39, 0x39, 0x20, 0x69, 0x73, 0x74, 0x20, 0x64, 0x69, 0x65, 0x20, 0x53, 0x74, 0x61, 0x64, 0x74, 0x20, 0x53, 0x69, 0x74, 0x7a, 0x20, 0x64, 0x65, 0x72, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x72, 0x65, 0x67, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x70, 0x72, 0xc3, 0xa4, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x77, 0x69, 0x65, 0x20, 0x64, 0x65, 0x72, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x7a, 0x61, 0x68, 0x6c, 0x72, 0x65, 0x69, 0x63, 0x68, 0x65, 0x72, 0x20, 0x42, 0x6f, 0x74, 0x73, 0x63, 0x68, 0x61, 0x66, 0x74, 0x65, 0x6e, 0x2e, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDeUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('de'));
    });

    test('detect de windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kDeWindows1252 = Uint8List.fromList([0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x67, 0x65, 0x6e, 0x61, 0x75, 0x65, 0x72, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x61, 0x75, 0x63, 0x68, 0x20, 0x62, 0x65, 0x6b, 0x61, 0x6e, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x20, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x2d, 0x31, 0x2c, 0x20, 0x69, 0x73, 0x74, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x0a, 0x49, 0x53, 0x4f, 0x20, 0x7a, 0x75, 0x6c, 0x65, 0x74, 0x7a, 0x74, 0x20, 0x31, 0x39, 0x39, 0x38, 0x20, 0x61, 0x6b, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x69, 0x65, 0x72, 0x74, 0x65, 0x72, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x66, 0xfc, 0x72, 0x20, 0x64, 0x69, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x6b, 0x20, 0x7a, 0x75, 0x72, 0x0a, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x61, 0x63, 0x68, 0x74, 0x20, 0x42, 0x69, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x72, 0x20, 0x65, 0x72, 0x73, 0x74, 0x65, 0x20, 0x54, 0x65, 0x69, 0x6c, 0x20, 0x64, 0x65, 0x72, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x65, 0x6e, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2e, 0x0a, 0x0a, 0x44, 0x69, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x73, 0x69, 0x65, 0x62, 0x65, 0x6e, 0x20, 0x42, 0x69, 0x74, 0x20, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x55, 0x53, 0x2d, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x66, 0xfc, 0x68, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x6d, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x62, 0x69, 0x74, 0x2e, 0x20, 0x5a, 0x75, 0x73, 0xe4, 0x74, 0x7a, 0x6c, 0x69, 0x63, 0x68, 0x20, 0x7a, 0x75, 0x20, 0x64, 0x65, 0x6e, 0x20, 0x39, 0x35, 0x20, 0x64, 0x61, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2d, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x28, 0x32, 0x30, 0x31, 0x36, 0x96, 0x37, 0x45, 0x31, 0x36, 0x29, 0x20, 0x6b, 0x6f, 0x64, 0x69, 0x65, 0x72, 0x74, 0x0a, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x39, 0x36, 0x20, 0x77, 0x65, 0x69, 0x74, 0x65, 0x72, 0x65, 0x20, 0x28, 0x41, 0x30, 0x31, 0x36, 0x96, 0x46, 0x46, 0x31, 0x36, 0x29, 0x2c, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x73, 0x67, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x20, 0x31, 0x39, 0x31, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x73, 0x63, 0x68, 0x20, 0x6d, 0xf6, 0x67, 0x6c, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x0a, 0x32, 0x35, 0x36, 0x20, 0x28, 0x3d, 0x20, 0x32, 0x38, 0x29, 0x2e, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x20, 0x30, 0x30, 0x31, 0x36, 0x96, 0x31, 0x46, 0x31, 0x36, 0x20, 0x75, 0x6e, 0x64, 0x20, 0x37, 0x46, 0x31, 0x36, 0x96, 0x39, 0x46, 0x31, 0x36, 0x20, 0x73, 0x69, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x20, 0x75, 0x6e, 0x64, 0x0a, 0x64, 0x61, 0x6d, 0x69, 0x74, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x6b, 0x65, 0x69, 0x6e, 0x65, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x7a, 0x75, 0x67, 0x65, 0x77, 0x69, 0x65, 0x73, 0x65, 0x6e, 0x2e, 0x20, 0x44, 0x69, 0x65, 0x20, 0x76, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x49, 0x41, 0x4e, 0x41, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x65, 0x72, 0x74, 0x65, 0x0a, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x28, 0x6d, 0x69, 0x74, 0x20, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x68, 0x29, 0x20, 0x73, 0x74, 0x65, 0x68, 0x74, 0x20, 0x66, 0xfc, 0x72, 0x20, 0x64, 0x69, 0x65, 0x20, 0x4b, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x72, 0x20, 0x5a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x0a, 0x64, 0x69, 0x65, 0x73, 0x65, 0x72, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x69, 0x74, 0x20, 0x6e, 0x69, 0x63, 0x68, 0x74, 0x20, 0x64, 0x61, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x20, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x20, 0x67, 0x65, 0x6d, 0xe4, 0xdf, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x36, 0x34, 0x32, 0x39, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kDeWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('de'));
    });

    test('detect el cp737', () {
      final detector = UCharDet();
      // dart format off
      final kElCp737 = Uint8List.fromList([0x86, 0x20, 0xa3, 0x98, 0xa8, 0xa3, 0xe6, 0xab, 0x98, 0x20, 0x9c, 0xe5, 0xa4, 0x98, 0xa0, 0x20, 0x9a, 0xe2, 0xa4, 0xa6, 0xaa, 0x20, 0xab, 0xa8, 0xe0, 0xa1, 0xab, 0xa0, 0xa1, 0xe9, 0xa4, 0x20, 0x98, 0xa7, 0xa6, 0xab, 0x9c, 0xa2, 0xa6, 0xe7, 0xa3, 0x9c, 0xa4, 0xa6, 0x20, 0x98, 0xa7, 0xe6, 0x20, 0x9b, 0x9c, 0xa1, 0x98, 0xab, 0xe2, 0xa9, 0xa9, 0x9c, 0xa8, 0x98, 0x20, 0x9c, 0xe5, 0x9b, 0x9e, 0x20, 0xab, 0xa6, 0xac, 0x20, 0x9a, 0xe2, 0xa4, 0xa6, 0xac, 0xaa, 0x20, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x2c, 0x20, 0xa7, 0xa6, 0xac, 0x20, 0xa9, 0xac, 0xa4, 0x98, 0xa4, 0xab, 0xe9, 0xa4, 0xab, 0x98, 0xa0, 0x20, 0xa9, 0xab, 0x9e, 0xa4, 0x20, 0x84, 0xac, 0xa8, 0x98, 0xa9, 0xe5, 0x98, 0x20, 0xa1, 0x98, 0xa0, 0x20, 0xab, 0x9e, 0x20, 0x81, 0xe6, 0xa8, 0x9c, 0xa0, 0x98, 0x20, 0x80, 0xa3, 0x9c, 0xa8, 0xa0, 0xa1, 0xe3, 0x2e, 0x20, 0x92, 0x98, 0x20, 0x9b, 0xa0, 0xe1, 0xad, 0xa6, 0xa8, 0x98, 0x20, 0x9c, 0xe5, 0x9b, 0x9e, 0x20, 0xab, 0xe0, 0xa4, 0x20, 0x9c, 0xe5, 0xa4, 0x98, 0xa0, 0x20, 0xe0, 0xaa, 0x20, 0x9c, 0xa7, 0xe5, 0x20, 0xab, 0xa6, 0x20, 0xa7, 0xa2, 0x9c, 0xe5, 0xa9, 0xab, 0xa6, 0xa4, 0x20, 0xa1, 0xe1, 0xab, 0xa6, 0xa0, 0xa1, 0xa6, 0xa0, 0x20, 0xa1, 0xa8, 0xe7, 0xe0, 0xa4, 0x20, 0xa9, 0xab, 0x9c, 0xa7, 0xe9, 0xa4, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kElCp737);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('cp737'));
      expect(candidates.first.language?.iso6391Code, equals('el'));
    });

    test('detect el iso-8859-7', () {
      final detector = UCharDet();
      // dart format off
      final kElIso88597 = Uint8List.fromList([0xc7, 0x20, 0xf4, 0xf5, 0xf0, 0xef, 0xf0, 0xef, 0xe9, 0xe7, 0xec, 0xdd, 0xed, 0xe7, 0x20, 0xea, 0xf9, 0xe4, 0xe9, 0xea, 0xef, 0xf0, 0xef, 0xdf, 0xe7, 0xf3, 0xe7, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xf9, 0xed, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0xe4, 0xe9, 0xe5, 0xe8, 0xed, 0xef, 0xfd, 0xf2, 0x20, 0xef, 0xf1, 0xe3, 0xe1, 0xed, 0xe9, 0xf3, 0xec, 0xef, 0xfd, 0x20, 0xf4, 0xf5, 0xf0, 0xef, 0xf0, 0xef, 0xe9, 0xde, 0xf3, 0xe5, 0xf9, 0xed, 0x20, 0xec, 0xe5, 0x20, 0xf4, 0xef, 0x20, 0xfc, 0xed, 0xef, 0xec, 0xe1, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x37, 0x2c, 0x20, 0xe3, 0xed, 0xf9, 0xf3, 0xf4, 0xde, 0x20, 0xea, 0xe1, 0xe9, 0x20, 0xf3, 0xe1, 0xed, 0x20, 0xc5, 0xeb, 0xeb, 0xe7, 0xed, 0xe9, 0xea, 0xdc, 0x2c, 0x20, 0xe5, 0xdf, 0xed, 0xe1, 0xe9, 0x20, 0xec, 0xe9, 0xe1, 0x20, 0x38, 0x2d, 0xec, 0xf0, 0xe9, 0xf4, 0xe7, 0x20, 0xea, 0xf9, 0xe4, 0xe9, 0xea, 0xef, 0xf0, 0xef, 0xdf, 0xe7, 0xf3, 0xe7, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xf9, 0xed, 0x2c, 0x20, 0xec, 0xdd, 0xf1, 0xef, 0xf2, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0xf0, 0xf1, 0xef, 0xf4, 0xfd, 0xf0, 0xef, 0xf5, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2e, 0x20, 0xd3, 0xf7, 0xe5, 0xe4, 0xe9, 0xdc, 0xf3, 0xf4, 0xe7, 0xea, 0xe5, 0x20, 0xec, 0xe5, 0x20, 0xf4, 0xef, 0xed, 0x20, 0xf3, 0xea, 0xef, 0xf0, 0xfc, 0x20, 0xed, 0xe1, 0x20, 0xea, 0xe1, 0xeb, 0xfd, 0xf0, 0xf4, 0xe5, 0xe9, 0x20, 0xf4, 0xe7, 0x20, 0xf3, 0xfd, 0xe3, 0xf7, 0xf1, 0xef, 0xed, 0xe7, 0x20, 0xe5, 0xeb, 0xeb, 0xe7, 0xed, 0xe9, 0xea, 0xde, 0x20, 0xe3, 0xeb, 0xfe, 0xf3, 0xf3, 0xe1, 0x20, 0xea, 0xe1, 0xe8, 0xfe, 0xf2, 0x20, 0xea, 0xe1, 0xe9, 0x20, 0xec, 0xe1, 0xe8, 0xe7, 0xec, 0xe1, 0xf4, 0xe9, 0xea, 0xdc, 0x20, 0xf3, 0xfd, 0xec, 0xe2, 0xef, 0xeb, 0xe1, 0x20, 0xf0, 0xf1, 0xef, 0xe5, 0xf1, 0xf7, 0xfc, 0xec, 0xe5, 0xed, 0xe1, 0x20, 0xe1, 0xf0, 0xfc, 0x20, 0xf4, 0xe1, 0x20, 0xe5, 0xeb, 0xeb, 0xe7, 0xed, 0xe9, 0xea, 0xdc, 0x2e, 0x0a, 0x0a, 0xc7, 0x20, 0xe1, 0xf1, 0xf7, 0xe9, 0xea, 0xde, 0x20, 0xdd, 0xea, 0xe4, 0xef, 0xf3, 0xe7, 0x20, 0xf4, 0xef, 0x20, 0x31, 0x39, 0x38, 0x37, 0x20, 0xe5, 0xdf, 0xf7, 0xe5, 0x20, 0xf4, 0xe9, 0xf2, 0x20, 0xdf, 0xe4, 0xe9, 0xe5, 0xf2, 0x20, 0xe1, 0xed, 0xe1, 0xe8, 0xdd, 0xf3, 0xe5, 0xe9, 0xf2, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xf9, 0xed, 0x20, 0xec, 0xe5, 0x20, 0xf4, 0xef, 0x20, 0xc5, 0xeb, 0xeb, 0xe7, 0xed, 0xe9, 0xea, 0xfc, 0x20, 0xf0, 0xf1, 0xfc, 0xf4, 0xf5, 0xf0, 0xef, 0x20, 0x45, 0x4c, 0x4f, 0x54, 0x20, 0x39, 0x32, 0x38, 0x2c, 0x20, 0xf0, 0xef, 0xf5, 0x20, 0xe5, 0xea, 0xe4, 0xfc, 0xe8, 0xe7, 0xea, 0xe5, 0x20, 0xf4, 0xef, 0x20, 0x31, 0x39, 0x38, 0x36, 0x2e, 0x20, 0xcf, 0x20, 0xf0, 0xdf, 0xed, 0xe1, 0xea, 0xe1, 0xf2, 0x20, 0xf3, 0xe5, 0x20, 0xe1, 0xf5, 0xf4, 0xfc, 0x20, 0xf4, 0xef, 0x20, 0xdc, 0xf1, 0xe8, 0xf1, 0xef, 0x20, 0xe4, 0xe5, 0xdf, 0xf7, 0xed, 0xe5, 0xe9, 0x20, 0xf4, 0xe7, 0xed, 0x20, 0xe1, 0xed, 0xe1, 0xed, 0xe5, 0xf9, 0xec, 0xdd, 0xed, 0xe7, 0x20, 0xdd, 0xea, 0xe4, 0xef, 0xf3, 0xe7, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0x32, 0x30, 0x30, 0x33, 0x2c, 0x20, 0xf0, 0xef, 0xf5, 0x20, 0xf0, 0xf1, 0xef, 0xf3, 0xe8, 0xdd, 0xf4, 0xe5, 0xe9, 0x20, 0xf4, 0xf1, 0xe5, 0xe9, 0xf2, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xe5, 0xf2, 0x2c, 0x20, 0xf3, 0xf5, 0xec, 0xf0, 0xe5, 0xf1, 0xe9, 0xeb, 0xe1, 0xec, 0xe2, 0xe1, 0xed, 0xef, 0xec, 0xdd, 0xed, 0xef, 0xf5, 0x20, 0xea, 0xe1, 0xe9, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0xf3, 0xfd, 0xec, 0xe2, 0xef, 0xeb, 0xef, 0xf5, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0xe5, 0xf5, 0xf1, 0xfe, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kElIso88597);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-7'),
      );
      expect(candidates.first.language?.iso6391Code, equals('el'));
    });

    test('detect el utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kElUtf8 = Uint8List.fromList([0xce, 0xa4, 0xce, 0xbf, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x28, 0x38, 0x2d, 0x62, 0x69, 0x74, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29, 0x20, 0xce, 0xb5, 0xce, 0xaf, 0xce, 0xbd, 0xce, 0xb1, 0xce, 0xb9, 0x20, 0xce, 0xad, 0xce, 0xbd, 0xce, 0xb1, 0x20, 0xce, 0xbc, 0xce, 0xb7, 0x2d, 0xce, 0xb1, 0xcf, 0x80, 0xcf, 0x89, 0xce, 0xbb, 0xce, 0xb5, 0xcf, 0x83, 0xcf, 0x84, 0xce, 0xb9, 0xce, 0xba, 0xcf, 0x8c, 0x20, 0xcf, 0x83, 0xcf, 0x87, 0xce, 0xae, 0xce, 0xbc, 0xce, 0xb1, 0x20, 0xce, 0xba, 0xcf, 0x89, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xbf, 0xcf, 0x80, 0xce, 0xbf, 0xce, 0xaf, 0xce, 0xb7, 0xcf, 0x83, 0xce, 0xb7, 0xcf, 0x82, 0x20, 0xcf, 0x87, 0xce, 0xb1, 0xcf, 0x81, 0xce, 0xb1, 0xce, 0xba, 0xcf, 0x84, 0xce, 0xae, 0xcf, 0x81, 0xcf, 0x89, 0xce, 0xbd, 0x20, 0xce, 0xbc, 0xce, 0xb5, 0xcf, 0x84, 0xce, 0xb1, 0xce, 0xb2, 0xce, 0xbb, 0xce, 0xb7, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x8d, 0x20, 0xce, 0xbc, 0xce, 0xae, 0xce, 0xba, 0xce, 0xbf, 0xcf, 0x85, 0xcf, 0x82, 0x20, 0xce, 0xb3, 0xce, 0xb9, 0xce, 0xb1, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0x20, 0xcf, 0x80, 0xcf, 0x81, 0xcf, 0x8c, 0xcf, 0x84, 0xcf, 0x85, 0xcf, 0x80, 0xce, 0xbf, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0xcf, 0x80, 0xce, 0xbf, 0xcf, 0x85, 0x20, 0xce, 0xb4, 0xce, 0xb7, 0xce, 0xbc, 0xce, 0xb9, 0xce, 0xbf, 0xcf, 0x85, 0xcf, 0x81, 0xce, 0xb3, 0xce, 0xae, 0xce, 0xb8, 0xce, 0xb7, 0xce, 0xba, 0xce, 0xb5, 0x20, 0xce, 0xb1, 0xcf, 0x80, 0xcf, 0x8c, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x85, 0xcf, 0x82, 0x20, 0x4b, 0x65, 0x6e, 0x20, 0x54, 0x68, 0x6f, 0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x20, 0xce, 0xba, 0xce, 0xb1, 0xce, 0xb9, 0x20, 0x52, 0x6f, 0x62, 0x20, 0x50, 0x69, 0x6b, 0x65, 0x2e, 0x20, 0xce, 0xa7, 0xcf, 0x81, 0xce, 0xb7, 0xcf, 0x83, 0xce, 0xb9, 0xce, 0xbc, 0xce, 0xbf, 0xcf, 0x80, 0xce, 0xbf, 0xce, 0xb9, 0xce, 0xb5, 0xce, 0xaf, 0x20, 0xce, 0xbf, 0xce, 0xbc, 0xce, 0xac, 0xce, 0xb4, 0xce, 0xb5, 0xcf, 0x82, 0x20, 0xce, 0xb1, 0xcf, 0x80, 0xcf, 0x8c, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0xce, 0xb3, 0xce, 0xb9, 0xce, 0xb1, 0x20, 0xce, 0xbd, 0xce, 0xb1, 0x20, 0xce, 0xb1, 0xce, 0xbd, 0xce, 0xb1, 0xcf, 0x80, 0xce, 0xb1, 0xcf, 0x81, 0xce, 0xb1, 0xcf, 0x83, 0xcf, 0x84, 0xce, 0xae, 0xcf, 0x83, 0xce, 0xb5, 0xce, 0xb9, 0x20, 0xcf, 0x84, 0xce, 0xb1, 0x20, 0xce, 0xba, 0xcf, 0x89, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xac, 0x20, 0xcf, 0x83, 0xce, 0xb7, 0xce, 0xbc, 0xce, 0xb5, 0xce, 0xaf, 0xce, 0xb1, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x85, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0xce, 0x95, 0xce, 0xaf, 0xce, 0xbd, 0xce, 0xb1, 0xce, 0xb9, 0x20, 0xce, 0xb9, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xb1, 0xce, 0xaf, 0xcf, 0x84, 0xce, 0xb5, 0xcf, 0x81, 0xce, 0xb1, 0x20, 0xcf, 0x87, 0xcf, 0x81, 0xce, 0xae, 0xcf, 0x83, 0xce, 0xb9, 0xce, 0xbc, 0xce, 0xbf, 0x20, 0xce, 0xb3, 0xce, 0xb9, 0xce, 0xb1, 0x20, 0xce, 0xbc, 0xce, 0xb5, 0xcf, 0x84, 0xce, 0xac, 0xce, 0xb4, 0xce, 0xbf, 0xcf, 0x83, 0xce, 0xb7, 0x20, 0xce, 0xb4, 0xce, 0xb5, 0xce, 0xb4, 0xce, 0xbf, 0xce, 0xbc, 0xce, 0xad, 0xce, 0xbd, 0xcf, 0x89, 0xce, 0xbd, 0x20, 0xcf, 0x83, 0xce, 0xb5, 0x20, 0x38, 0x62, 0x69, 0x74, 0x20, 0xcf, 0x83, 0xcf, 0x85, 0xcf, 0x83, 0xcf, 0x84, 0xce, 0xae, 0xce, 0xbc, 0xce, 0xb1, 0xcf, 0x84, 0xce, 0xb1, 0x20, 0xce, 0xb7, 0xce, 0xbb, 0xce, 0xb5, 0xce, 0xba, 0xcf, 0x84, 0xcf, 0x81, 0xce, 0xbf, 0xce, 0xbd, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xbf, 0xcf, 0x8d, 0x20, 0xcf, 0x84, 0xce, 0xb1, 0xcf, 0x87, 0xcf, 0x85, 0xce, 0xb4, 0xcf, 0x81, 0xce, 0xbf, 0xce, 0xbc, 0xce, 0xb5, 0xce, 0xaf, 0xce, 0xbf, 0xcf, 0x85, 0x2e, 0x0a, 0x0a, 0xce, 0xa3, 0xcf, 0x85, 0xce, 0xb3, 0xce, 0xba, 0xce, 0xb5, 0xce, 0xba, 0xcf, 0x81, 0xce, 0xb9, 0xce, 0xbc, 0xce, 0xad, 0xce, 0xbd, 0xce, 0xb1, 0x20, 0xcf, 0x87, 0xcf, 0x81, 0xce, 0xb7, 0xcf, 0x83, 0xce, 0xb9, 0xce, 0xbc, 0xce, 0xbf, 0xcf, 0x80, 0xce, 0xbf, 0xce, 0xb9, 0xce, 0xb5, 0xce, 0xaf, 0x20, 0xce, 0xad, 0xce, 0xbd, 0xce, 0xb1, 0x20, 0xce, 0xbc, 0xce, 0xad, 0xcf, 0x87, 0xcf, 0x81, 0xce, 0xb9, 0x20, 0xcf, 0x84, 0xce, 0xad, 0xcf, 0x83, 0xcf, 0x83, 0xce, 0xb5, 0xcf, 0x81, 0xce, 0xb1, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0xce, 0xb1, 0xce, 0xbd, 0xce, 0xac, 0x20, 0xcf, 0x87, 0xce, 0xb1, 0xcf, 0x81, 0xce, 0xb1, 0xce, 0xba, 0xcf, 0x84, 0xce, 0xae, 0xcf, 0x81, 0xce, 0xb1, 0x20, 0xce, 0xb1, 0xce, 0xbd, 0xce, 0xac, 0xce, 0xbb, 0xce, 0xbf, 0xce, 0xb3, 0xce, 0xb1, 0x20, 0xce, 0xbc, 0xce, 0xb5, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0x20, 0xcf, 0x83, 0xcf, 0x8d, 0xce, 0xbc, 0xce, 0xb2, 0xce, 0xbf, 0xce, 0xbb, 0xce, 0xbf, 0x20, 0xce, 0xba, 0xce, 0xb1, 0xce, 0xb9, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0x20, 0xce, 0xba, 0xcf, 0x89, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xba, 0xcf, 0x8c, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x85, 0x20, 0xcf, 0x83, 0xce, 0xb7, 0xce, 0xbc, 0xce, 0xb5, 0xce, 0xaf, 0xce, 0xbf, 0x2e, 0x20, 0xce, 0x93, 0xce, 0xb9, 0xce, 0xb1, 0x20, 0xcf, 0x80, 0xce, 0xb1, 0xcf, 0x81, 0xce, 0xac, 0xce, 0xb4, 0xce, 0xb5, 0xce, 0xb9, 0xce, 0xb3, 0xce, 0xbc, 0xce, 0xb1, 0x20, 0xcf, 0x87, 0xcf, 0x81, 0xce, 0xb5, 0xce, 0xb9, 0xce, 0xac, 0xce, 0xb6, 0xce, 0xb5, 0xcf, 0x84, 0xce, 0xb1, 0xce, 0xb9, 0x20, 0xce, 0xbc, 0xcf, 0x8c, 0xce, 0xbd, 0xce, 0xbf, 0x20, 0xce, 0xad, 0xce, 0xbd, 0xce, 0xb1, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x85, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0xce, 0xb3, 0xce, 0xb9, 0xce, 0xb1, 0x20, 0xcf, 0x84, 0xce, 0xb7, 0xce, 0xbd, 0x20, 0xce, 0xba, 0xcf, 0x89, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xbf, 0xcf, 0x80, 0xce, 0xbf, 0xce, 0xaf, 0xce, 0xb7, 0xcf, 0x83, 0xce, 0xb7, 0x20, 0xcf, 0x84, 0xcf, 0x89, 0xce, 0xbd, 0x20, 0x31, 0x32, 0x38, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0xcf, 0x87, 0xce, 0xb1, 0xcf, 0x81, 0xce, 0xb1, 0xce, 0xba, 0xcf, 0x84, 0xce, 0xae, 0xcf, 0x81, 0xce, 0xb5, 0xcf, 0x82, 0x20, 0xcf, 0x83, 0xcf, 0x84, 0xce, 0xbf, 0x20, 0xce, 0xb4, 0xce, 0xb9, 0xce, 0xac, 0xcf, 0x83, 0xcf, 0x84, 0xce, 0xb7, 0xce, 0xbc, 0xce, 0xb1, 0x20, 0xcf, 0x84, 0xce, 0xbf, 0xcf, 0x85, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x2b, 0x30, 0x30, 0x30, 0x30, 0x20, 0xce, 0xbc, 0xce, 0xad, 0xcf, 0x87, 0xcf, 0x81, 0xce, 0xb9, 0x20, 0x55, 0x2b, 0x30, 0x30, 0x37, 0x46, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kElUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('el'));
    });

    test('detect el windows-1253', () {
      final detector = UCharDet();
      // dart format off
      final kElWindows1253 = Uint8List.fromList([0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x33, 0x0a, 0x0a, 0xc7, 0x20, 0xea, 0xf9, 0xe4, 0xe9, 0xea, 0xef, 0xf0, 0xef, 0xdf, 0xe7, 0xf3, 0xe7, 0x20, 0xf4, 0xf9, 0xed, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xf9, 0xed, 0x20, 0xe5, 0xdf, 0xed, 0xe1, 0xe9, 0x20, 0xf3, 0xf7, 0xe5, 0xe4, 0xfc, 0xed, 0x20, 0xdf, 0xe4, 0xe9, 0xe1, 0x20, 0xec, 0xe5, 0x20, 0xf4, 0xe7, 0xed, 0x20, 0xea, 0xf9, 0xe4, 0xe9, 0xea, 0xef, 0xf0, 0xef, 0xdf, 0xe7, 0xf3, 0xe7, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x33, 0x2e, 0x20, 0xc7, 0x20, 0xe2, 0xe1, 0xf3, 0xe9, 0xea, 0xde, 0x20, 0xe4, 0xe9, 0xe1, 0xf6, 0xef, 0xf1, 0xdc, 0x20, 0xf3, 0xf4, 0xe1, 0x20, 0xe3, 0xf1, 0xdc, 0xec, 0xec, 0xe1, 0xf4, 0xe1, 0x20, 0xe5, 0xdf, 0xed, 0xe1, 0xe9, 0x20, 0xe7, 0x20, 0xe8, 0xdd, 0xf3, 0xe7, 0x20, 0xf4, 0xef, 0xf5, 0x20, 0xf4, 0xef, 0xed, 0xef, 0xfd, 0xec, 0xe5, 0xed, 0xef, 0xf5, 0x20, 0xea, 0xe5, 0xf6, 0xe1, 0xeb, 0xe1, 0xdf, 0xef, 0xf5, 0x20, 0xdc, 0xeb, 0xf6, 0xe1, 0x20, 0xf4, 0xef, 0x20, 0xef, 0xf0, 0xef, 0xdf, 0xef, 0x20, 0xe2, 0xf1, 0xdf, 0xf3, 0xea, 0xe5, 0xf4, 0xe1, 0xe9, 0x20, 0x28, 0xf3, 0xf4, 0xe1, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x33, 0x29, 0x20, 0xf3, 0xf4, 0xe7, 0x20, 0xe4, 0xe5, 0xea, 0xe1, 0xe5, 0xee, 0xe1, 0xe4, 0xe9, 0xea, 0xde, 0x20, 0xe8, 0xdd, 0xf3, 0xe7, 0x20, 0x22, 0x41, 0x32, 0x22, 0x2e, 0x20, 0xc1, 0xf5, 0xf4, 0xfc, 0x20, 0xdd, 0xf7, 0xe5, 0xe9, 0x20, 0xf9, 0xf2, 0x20, 0xe1, 0xf0, 0xef, 0xf4, 0xdd, 0xeb, 0xe5, 0xf3, 0xec, 0xe1, 0x20, 0xed, 0xe1, 0x20, 0xe5, 0xec, 0xf6, 0xe1, 0xed, 0xdf, 0xe6, 0xe5, 0xf4, 0xe1, 0xe9, 0x20, 0xf3, 0xe5, 0x20, 0xe1, 0xf5, 0xf4, 0xfc, 0xed, 0x20, 0xf4, 0xef, 0xed, 0x20, 0xf7, 0xe1, 0xf1, 0xe1, 0xea, 0xf4, 0xde, 0xf1, 0xe1, 0x20, 0xe4, 0xe9, 0xe1, 0xf6, 0xef, 0xf1, 0xe5, 0xf4, 0xe9, 0xea, 0xfc, 0x20, 0xf3, 0xfd, 0xec, 0xe2, 0xef, 0xeb, 0xef, 0x20, 0x28, 0xf4, 0xef, 0x20, 0xf3, 0xe7, 0xec, 0xdc, 0xe4, 0xe9, 0x20, 0xf4, 0xe7, 0xf2, 0x20, 0xf0, 0xe1, 0xf1, 0xe1, 0xe3, 0xf1, 0xdc, 0xf6, 0xef, 0xf5, 0x20, 0xde, 0x20, 0xdd, 0xed, 0xe1, 0xf2, 0x20, 0xf3, 0xea, 0xdd, 0xf4, 0xef, 0xf2, 0x20, 0xf4, 0xfc, 0xed, 0xef, 0xf2, 0x29, 0x2c, 0x20, 0xfc, 0xf4, 0xe1, 0xed, 0x20, 0xe5, 0xf0, 0xe9, 0xeb, 0xe5, 0xe3, 0xe5, 0xdf, 0x20, 0xe4, 0xe9, 0xe1, 0xf6, 0xef, 0xf1, 0xe5, 0xf4, 0xe9, 0xea, 0xde, 0x20, 0xea, 0xf9, 0xe4, 0xe9, 0xea, 0xef, 0xf0, 0xef, 0xdf, 0xe7, 0xf3, 0xe7, 0x2c, 0x20, 0xe5, 0xed, 0xfe, 0x20, 0xf4, 0xe1, 0x20, 0xf5, 0xf0, 0xfc, 0xeb, 0xef, 0xe9, 0xf0, 0xe1, 0x20, 0xe3, 0xf1, 0xdc, 0xec, 0xec, 0xe1, 0xf4, 0xe1, 0x20, 0xe5, 0xec, 0xf6, 0xe1, 0xed, 0xdf, 0xe6, 0xef, 0xed, 0xf4, 0xe1, 0xe9, 0x20, 0xea, 0xe1, 0xed, 0xef, 0xed, 0xe9, 0xea, 0xdc, 0x2e, 0x0a, 0x0a, 0xa2, 0xeb, 0xeb, 0xe5, 0xf2, 0x20, 0xe3, 0xeb, 0xfe, 0xf3, 0xf3, 0xe5, 0xf2, 0x0a]);
      // dart format on
      final candidates = detector.detect(kElWindows1253);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1253'),
      );
      expect(candidates.first.language?.iso6391Code, equals('el'));
    });

    test('detect en ascii', () {
      final detector = UCharDet();
      // dart format off
      final kEnAscii = Uint8List.fromList([0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x54, 0x45, 0x53, 0x54, 0x2e, 0x0a, 0x57, 0x65, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x75, 0x63, 0x68, 0x61, 0x72, 0x64, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x20, 0x69, 0x74, 0x20, 0x61, 0x73, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x0a, 0x61, 0x6e, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x1b, 0x0a, 0x4f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x5a, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x7e, 0x7b, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEnAscii);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ascii'));
    });

    test('detect en utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kEnUtf8 = Uint8List.fromList([0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x31, 0x30, 0x2c, 0x31, 0x38, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x6b, 0x6d, 0xc2, 0xb2, 0x20, 0x28, 0x33, 0x2c, 0x39, 0x33, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x73, 0x71, 0x20, 0x6d, 0x69, 0x29, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x32, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x61, 0x72, 0x74, 0x68, 0x27, 0x73, 0x20, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x28, 0x36, 0x2e, 0x38, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x72, 0x65, 0x61, 0x29, 0x2c, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x29, 0x2e, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x69, 0x66, 0x74, 0x79, 0x20, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x6f, 0x75, 0x73, 0x2c, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x33, 0x39, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x31, 0x35, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x20, 0x68, 0x61, 0x64, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x37, 0x34, 0x36, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x31, 0x30, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x32, 0x30, 0x31, 0x38, 0x2e, 0x5b, 0x32, 0x5d, 0x5b, 0x33, 0x5d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x77, 0x61, 0x72, 0x6d, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x41, 0x73, 0x69, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x2e, 0x20, 0x46, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x61, 0x2c, 0x20, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEnUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('en'));
    });

    test('detect eo iso-8859-3', () {
      final detector = UCharDet();
      // dart format off
      final kEoIso88593 = Uint8List.fromList([0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x20, 0x28, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x4c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x29, 0x20, 0x65, 0x73, 0x74, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x70, 0x6c, 0x65, 0x6a, 0x20, 0x64, 0x69, 0x73, 0x76, 0x61, 0x73, 0x74, 0x69, 0x67, 0x69, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x2e, 0x5b, 0x33, 0x5d, 0x20, 0x4c, 0x61, 0x20, 0x6e, 0x6f, 0x6d, 0x6f, 0x20, 0x76, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6b, 0x61, 0xfe, 0x6e, 0x6f, 0x6d, 0x6f, 0x20, 0x22, 0x44, 0x72, 0x2d, 0x6f, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x22, 0x2c, 0x20, 0x73, 0x75, 0x62, 0x20, 0x6b, 0x69, 0x75, 0x20, 0x6c, 0x61, 0x20, 0x6a, 0x75, 0x64, 0x61, 0x0a, 0x6b, 0x75, 0x72, 0x61, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x20, 0x4c, 0x75, 0x64, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x20, 0x4c, 0x61, 0x7a, 0x61, 0x72, 0x6f, 0x20, 0x5a, 0x61, 0x6d, 0x65, 0x6e, 0x68, 0x6f, 0x66, 0x6f, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x72, 0x6f, 0x20, 0x31, 0x38, 0x38, 0x37, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x69, 0x67, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x62, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x2e, 0x20, 0x4c, 0x61, 0x20, 0x75, 0x6e, 0x75, 0x61, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x2c, 0x20, 0x6c, 0x61, 0x20, 0x72, 0x75, 0x73, 0x61, 0x2c, 0x20, 0x72, 0x69, 0x63, 0x65, 0x76, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x7a, 0x75, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x76, 0x61, 0x73, 0x74, 0x69, 0xf8, 0x69, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x0a, 0x32, 0x36, 0x2d, 0x61, 0x20, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x6c, 0x69, 0x6f, 0x3b, 0x20, 0xe6, 0x69, 0x20, 0x74, 0x69, 0x75, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x69, 0x20, 0x6b, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x6e, 0x61, 0x73, 0x6b, 0x69, 0xf8, 0x74, 0x61, 0x67, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x5b, 0x34, 0x5d, 0x5b, 0x35, 0x5d, 0x2e, 0x20, 0x4c, 0x69, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x73, 0x20, 0x6b, 0x72, 0x65, 0x69, 0x20, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x65, 0x20, 0x6c, 0x65, 0x72, 0x6e, 0x65, 0x62, 0x6c, 0x61, 0x6e, 0x20, 0x6e, 0x65, 0xfd, 0x74, 0x72, 0x61, 0x6c, 0x61, 0x6e, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x61, 0xfd, 0x67, 0x61, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x20, 0x75, 0x7a, 0x6f, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x20, 0x6b, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x6b, 0x61, 0x64, 0x6f, 0x2c, 0x20, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x61, 0xfd, 0x69, 0x67, 0x69, 0x20, 0x61, 0x6c, 0x69, 0x61, 0x6a, 0x6e, 0x2c, 0x20, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x6a, 0x6e, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x6a, 0x6e, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEoIso88593);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-3'),
      );
      expect(candidates.first.language?.iso6391Code, equals('eo'));
    });

    test('detect eo utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kEoUtf8 = Uint8List.fromList([0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x2c, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x4c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x2c, 0x5b, 0x34, 0x5d, 0x20, 0x65, 0x73, 0x74, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x70, 0x6c, 0x65, 0x6a, 0x20, 0x64, 0x69, 0x73, 0x76, 0x61, 0x73, 0x74, 0x69, 0xc4, 0x9d, 0x69, 0x6e, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x2e, 0x5b, 0x35, 0x5d, 0x20, 0x45, 0x6e, 0x20, 0x31, 0x38, 0x38, 0x37, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x6f, 0x6c, 0x69, 0x73, 0x20, 0x6e, 0x75, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x70, 0x6c, 0x65, 0x6e, 0x6f, 0x20, 0x64, 0x61, 0x20, 0x68, 0x6f, 0x6d, 0x6f, 0x6a, 0x3b, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x75, 0x20, 0x65, 0x6c, 0x20, 0x6c, 0x61, 0x20, 0x70, 0x6c, 0x65, 0x6a, 0x20, 0x6d, 0x61, 0x6c, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6a, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x2d, 0x6b, 0x6f, 0x6d, 0x75, 0x6e, 0x75, 0x6d, 0x6f, 0x6a, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6d, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x20, 0xc4, 0x9c, 0x69, 0x20, 0x66, 0x75, 0x6e, 0x6b, 0x63, 0x69, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6b, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6b, 0x69, 0x65, 0x6c, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x61, 0x20, 0x6b, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x6b, 0x61, 0x64, 0x6f, 0x20, 0x6b, 0x61, 0x6a, 0x20, 0x64, 0x65, 0x20, 0x61, 0x72, 0x74, 0x61, 0x20, 0x6b, 0x72, 0x65, 0x69, 0x70, 0x6f, 0x76, 0x6f, 0x5b, 0x36, 0x5d, 0x2e, 0x20, 0x45, 0x6e, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2c, 0x20, 0x6c, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x66, 0x61, 0x72, 0x69, 0xc4, 0x9d, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x36, 0x34, 0x2d, 0x61, 0x20, 0x74, 0x72, 0x61, 0x64, 0x75, 0x6b, 0x65, 0x62, 0x6c, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5b, 0x37, 0x5d, 0x3b, 0x20, 0x45, 0x6e, 0x20, 0x32, 0x30, 0x31, 0x36, 0x2c, 0x20, 0x6c, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x66, 0x61, 0x72, 0x69, 0xc4, 0x9d, 0x69, 0x73, 0x20, 0x74, 0x72, 0x61, 0x64, 0x75, 0x6b, 0x65, 0x62, 0x6c, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5b, 0x38, 0x5d, 0x3b, 0x20, 0x6c, 0x61, 0xc5, 0xad, 0x20, 0x32, 0x30, 0x31, 0x36, 0x2c, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x65, 0x72, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x6a, 0x20, 0x70, 0x6c, 0x65, 0x6a, 0x20, 0x6c, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x61, 0x6a, 0x5b, 0x39, 0x5d, 0x20, 0x6b, 0x61, 0x6a, 0x20, 0x6b, 0x6f, 0x6e, 0x61, 0x74, 0x61, 0x6a, 0x20, 0x65, 0x6e, 0x20, 0x48, 0x75, 0x6e, 0x67, 0x61, 0x72, 0x75, 0x6a, 0x6f, 0x5b, 0x31, 0x30, 0x5d, 0x2e, 0x20, 0x4c, 0x61, 0x20, 0x6e, 0x6f, 0x6d, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x20, 0x76, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6b, 0x61, 0xc5, 0x9d, 0x6e, 0x6f, 0x6d, 0x6f, 0x20, 0xe2, 0x80, 0x9c, 0x44, 0x2d, 0x72, 0x6f, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0xe2, 0x80, 0x9e, 0x20, 0x73, 0x75, 0x62, 0x20, 0x6b, 0x69, 0x75, 0x20, 0x6c, 0x61, 0x20, 0x6a, 0x75, 0x64, 0x61, 0x20, 0x6b, 0x75, 0x72, 0x61, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x20, 0x4c, 0x75, 0x64, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x20, 0x4c, 0x61, 0x7a, 0x61, 0x72, 0x6f, 0x20, 0x5a, 0x61, 0x6d, 0x65, 0x6e, 0x68, 0x6f, 0x66, 0x6f, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x72, 0x6f, 0x20, 0x31, 0x38, 0x38, 0x37, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x6b, 0x69, 0x67, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x62, 0x61, 0x7a, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x2e, 0x20, 0x4c, 0x61, 0x20, 0x75, 0x6e, 0x75, 0x61, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x2c, 0x20, 0x6c, 0x61, 0x20, 0x72, 0x75, 0x73, 0x61, 0x2c, 0x20, 0x72, 0x69, 0x63, 0x65, 0x76, 0x69, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x7a, 0x75, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x76, 0x61, 0x73, 0x74, 0x69, 0xc4, 0x9d, 0x69, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x20, 0x32, 0x36, 0x2d, 0x61, 0x20, 0x64, 0x65, 0x20, 0x6a, 0x75, 0x6c, 0x69, 0x6f, 0x3b, 0x20, 0xc4, 0x89, 0x69, 0x20, 0x74, 0x69, 0x75, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x69, 0x20, 0x6b, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x6e, 0x61, 0x73, 0x6b, 0x69, 0xc4, 0x9d, 0x74, 0x61, 0x67, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x45, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x5b, 0x31, 0x31, 0x5d, 0x5b, 0x31, 0x32, 0x5d, 0x2e, 0x20, 0x4c, 0x69, 0x20, 0x63, 0x65, 0x6c, 0x69, 0x73, 0x20, 0x6b, 0x61, 0x6a, 0x20, 0x73, 0x75, 0x6b, 0x63, 0x65, 0x73, 0x69, 0x73, 0x20, 0x6b, 0x72, 0x65, 0x69, 0x20, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x65, 0x20, 0x6c, 0x65, 0x72, 0x6e, 0x65, 0x62, 0x6c, 0x61, 0x6e, 0x20, 0x6e, 0x65, 0xc5, 0xad, 0x74, 0x72, 0x61, 0x6c, 0x61, 0x6e, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x61, 0xc5, 0xad, 0x67, 0x61, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x20, 0x75, 0x7a, 0x6f, 0x20, 0x65, 0x6e, 0x20, 0x6c, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x20, 0x6b, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x6b, 0x61, 0x64, 0x6f, 0x3b, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x20, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x65, 0x73, 0x74, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x61, 0xc5, 0xad, 0x69, 0x67, 0x69, 0x20, 0x61, 0x6c, 0x69, 0x61, 0x6a, 0x6e, 0x2c, 0x20, 0x6e, 0x61, 0x63, 0x69, 0x61, 0x6a, 0x6e, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x6f, 0x6a, 0x6e, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEoUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('eo'));
    });

    test('detect es iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kEsIso88591 = Uint8List.fromList([0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x20, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x20, 0x65, 0x73, 0x20, 0x64, 0x65, 0x20, 0x32, 0x32, 0x31, 0x32, 0x20, 0x45, 0x55, 0x52, 0x2f, 0x6d, 0x32, 0x2c, 0x20, 0x73, 0x65, 0x67, 0xfa, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x64, 0x61, 0x64, 0x0a, 0x64, 0x65, 0x20, 0x54, 0x61, 0x73, 0x61, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x61, 0x20, 0x33, 0x31, 0x20, 0x64, 0x65, 0x20, 0x64, 0x69, 0x63, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2e, 0x31, 0x35, 0x36, 0x20, 0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x20, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x2c, 0x0a, 0x76, 0x61, 0x72, 0xed, 0x61, 0x20, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0xf3, 0x6e, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x79, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x65, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0xe1, 0x6e, 0x64, 0x6f, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x75, 0xf1, 0x61, 0x20, 0x28, 0x33, 0x31, 0x34, 0x36, 0x20, 0x45, 0x55, 0x52, 0x2f, 0x6d, 0xb2, 0x29, 0x2c, 0x20, 0x79, 0x20, 0x65, 0x6e, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x64, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x61, 0x64, 0x75, 0x72, 0x61, 0x20, 0x79, 0x20, 0x4d, 0x75, 0x72, 0x63, 0x69, 0x61, 0x20, 0x28, 0x31, 0x32, 0x37, 0x31, 0x20, 0x45, 0x55, 0x52, 0x2f, 0x6d, 0xb2, 0x29, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEsIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('es'));
    });

    test('detect es utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kEsUtf8 = Uint8List.fromList([0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x20, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x20, 0x65, 0x73, 0x20, 0x64, 0x65, 0x20, 0x32, 0x32, 0x31, 0x32, 0x20, 0xe2, 0x82, 0xac, 0x2f, 0x6d, 0x32, 0x2c, 0x20, 0x73, 0x65, 0x67, 0xc3, 0xba, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x64, 0x61, 0x64, 0x0a, 0x64, 0x65, 0x20, 0x54, 0x61, 0x73, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x20, 0x61, 0x20, 0x33, 0x31, 0x20, 0x64, 0x65, 0x20, 0x64, 0x69, 0x63, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2e, 0x31, 0x35, 0x36, 0x20, 0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x20, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x2c, 0x0a, 0x76, 0x61, 0x72, 0xc3, 0xad, 0x61, 0x20, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0xc3, 0xb3, 0x6e, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x79, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x65, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0xc3, 0xa1, 0x6e, 0x64, 0x6f, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x75, 0xc3, 0xb1, 0x61, 0x20, 0x28, 0x33, 0x31, 0x34, 0x36, 0x20, 0xe2, 0x82, 0xac, 0x2f, 0x6d, 0xc2, 0xb2, 0x29, 0x2c, 0x20, 0x79, 0x20, 0x65, 0x6e, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x64, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x61, 0x64, 0x75, 0x72, 0x61, 0x20, 0x79, 0x20, 0x4d, 0x75, 0x72, 0x63, 0x69, 0x61, 0x20, 0x28, 0x31, 0x32, 0x37, 0x31, 0x20, 0xe2, 0x82, 0xac, 0x2f, 0x6d, 0xc2, 0xb2, 0x29, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEsUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('es'));
    });

    test('detect es windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kEsWindows1252 = Uint8List.fromList([0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x20, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x20, 0x65, 0x73, 0x20, 0x64, 0x65, 0x20, 0x32, 0x32, 0x31, 0x32, 0x20, 0x80, 0x2f, 0x6d, 0x32, 0x2c, 0x20, 0x73, 0x65, 0x67, 0xfa, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x64, 0x61, 0x64, 0x0a, 0x64, 0x65, 0x20, 0x54, 0x61, 0x73, 0x61, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x61, 0x20, 0x33, 0x31, 0x20, 0x64, 0x65, 0x20, 0x64, 0x69, 0x63, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2e, 0x31, 0x35, 0x36, 0x20, 0x45, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x69, 0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x20, 0x65, 0x6d, 0x62, 0x61, 0x72, 0x67, 0x6f, 0x2c, 0x0a, 0x76, 0x61, 0x72, 0xed, 0x61, 0x20, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0xf3, 0x6e, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x79, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x65, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x69, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0xe1, 0x6e, 0x64, 0x6f, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x64, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x75, 0xf1, 0x61, 0x20, 0x28, 0x33, 0x31, 0x34, 0x36, 0x20, 0x80, 0x2f, 0x6d, 0xb2, 0x29, 0x2c, 0x20, 0x79, 0x20, 0x65, 0x6e, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xf3, 0x6e, 0x20, 0x6c, 0x61, 0x73, 0x20, 0x64, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x61, 0x64, 0x75, 0x72, 0x61, 0x20, 0x79, 0x20, 0x4d, 0x75, 0x72, 0x63, 0x69, 0x61, 0x20, 0x28, 0x31, 0x32, 0x37, 0x31, 0x20, 0x80, 0x2f, 0x6d, 0xb2, 0x29, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEsWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('es'));
    });

    test('detect et iso-8859-13', () {
      final detector = UCharDet();
      // dart format off
      final kEtIso885913 = Uint8List.fromList([0xa5, 0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0xf0, 0x20, 0x54, 0xf0, 0x65, 0x68, 0x68, 0x6f, 0x76, 0xb4, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xe4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0xf0, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xf5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xe4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xe4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xfc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xf5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xfc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xe4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtIso885913);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-13'),
      );
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect et iso-8859-15', () {
      final detector = UCharDet();
      // dart format off
      final kEtIso885915 = Uint8List.fromList([0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0xa8, 0x20, 0x54, 0xa8, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xe4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0xa8, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xf5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xe4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xe4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xfc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xf5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xfc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xe4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtIso885915);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-15'),
      );
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect et iso-8859-4', () {
      final detector = UCharDet();
      // dart format off
      final kEtIso88594 = Uint8List.fromList([0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0xb9, 0x20, 0x54, 0xb9, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xe4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0xb9, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xf5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xe4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xe4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xfc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xf5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xfc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xe4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtIso88594);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-4'),
      );
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect et utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kEtUtf8 = Uint8List.fromList([0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0xc5, 0xa1, 0x20, 0x54, 0xc5, 0xa1, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xc3, 0xa4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0xc5, 0xa1, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xc3, 0xb5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xc3, 0xa4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xc3, 0xa4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xc3, 0xbc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xc3, 0xb5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xc3, 0xbc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xc3, 0xa4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect et windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kEtWindows1252 = Uint8List.fromList([0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0x9a, 0x20, 0x54, 0x9a, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xe4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0x9a, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xf5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xe4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xe4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xfc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xf5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xfc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xe4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect et windows-1257', () {
      final detector = UCharDet();
      // dart format off
      final kEtWindows1257 = Uint8List.fromList([0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x76, 0x6c, 0x6f, 0x76, 0x69, 0x74, 0xf0, 0x20, 0x54, 0xf0, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6c, 0x69, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x6e, 0xe4, 0x69, 0x74, 0x65, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6e, 0x69, 0x6b, 0x20, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x61, 0x6b, 0x74, 0x69, 0x73, 0x65, 0x65, 0x72, 0x69, 0x76, 0x20, 0x61, 0x72, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x54, 0xf0, 0x65, 0x68, 0x68, 0x6f, 0x76, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x65, 0x6c, 0x6b, 0xf5, 0x69, 0x67, 0x65, 0x20, 0x74, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x65, 0x6d, 0x61, 0x20, 0x6a, 0x75, 0x74, 0x75, 0x73, 0x74, 0x75, 0x73, 0x74, 0x65, 0x20, 0x74, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x6b, 0x73, 0x0a, 0x74, 0x65, 0x67, 0x65, 0x76, 0x75, 0x73, 0x70, 0x61, 0x69, 0x67, 0x61, 0x6b, 0x73, 0x20, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x65, 0x20, 0x76, 0xe4, 0x69, 0x6b, 0x65, 0x61, 0x73, 0x75, 0x6c, 0x61, 0x64, 0x20, 0x6a, 0x61, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x6b, 0xe4, 0x73, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x69, 0x64, 0x20, 0x68, 0x69, 0x6e, 0x67, 0x65, 0xfc, 0x6b, 0x73, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x61, 0x69, 0x73, 0x61, 0x74, 0x75, 0x64, 0x0a, 0xf5, 0x6e, 0x6e, 0x65, 0x20, 0x6a, 0x6d, 0x73, 0x2e, 0x20, 0x54, 0x75, 0x6e, 0x74, 0x75, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6b, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x73, 0xfc, 0x68, 0x68, 0x6f, 0x6c, 0x6f, 0x6f, 0x67, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6e, 0xe4, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x2c, 0x20, 0x6b, 0x75, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x65, 0x62, 0x20, 0x6b, 0x75, 0x72, 0x62, 0x20, 0x6a, 0x61, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x75, 0x73, 0x65, 0x74, 0x75, 0x20, 0x6d, 0x65, 0x65, 0x6c, 0x65, 0x6f, 0x6c, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kEtWindows1257);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1257'),
      );
      expect(candidates.first.language?.iso6391Code, equals('et'));
    });

    test('detect fi iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kFiIso88591 = Uint8List.fromList([0x54, 0x65, 0x72, 0x6d, 0x69, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x6b, 0x6b, 0x61, 0x6c, 0x61, 0x69, 0x73, 0x65, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6c, 0x65, 0x68, 0x74, 0x69, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x69, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6a, 0x61, 0x6e, 0x20, 0x48, 0x75, 0x67, 0x6f, 0x0a, 0x47, 0x65, 0x72, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x20, 0x6b, 0x65, 0x6b, 0x73, 0x69, 0x6d, 0xe4, 0x2e, 0x20, 0x53, 0x75, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x69, 0x20, 0x74, 0x6f, 0x68, 0x74, 0x6f, 0x72, 0x69, 0x20, 0x45, 0x69, 0x6e, 0x6f, 0x0a, 0x4b, 0x61, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x6e, 0x20, 0x31, 0x39, 0x35, 0x30, 0x2d, 0x6c, 0x75, 0x76, 0x75, 0x6e, 0x20, 0x61, 0x6c, 0x6b, 0x75, 0x70, 0x75, 0x6f, 0x6c, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x0a, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x61, 0x64, 0x69, 0x74, 0x74, 0x75, 0x20, 0x65, 0x72, 0x69, 0x6c, 0x61, 0x69, 0x73, 0x69, 0x61, 0x20, 0x6d, 0xe4, 0xe4, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x6d, 0x69, 0xe4, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6e, 0x0a, 0x72, 0x61, 0x6a, 0x61, 0x74, 0x20, 0x65, 0x69, 0x76, 0xe4, 0x74, 0x20, 0x6f, 0x6c, 0x65, 0x20, 0x79, 0x6b, 0x73, 0x69, 0x73, 0x65, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x69, 0x73, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0xe4, 0x74, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x73, 0x20, 0x6c, 0xe4, 0x68, 0x65, 0x6e, 0x65, 0x65, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x0a, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6e, 0x6c, 0x61, 0x6a, 0x65, 0x6a, 0x61, 0x2c, 0x20, 0x65, 0x72, 0x69, 0x74, 0x79, 0x69, 0x73, 0x65, 0x73, 0x74, 0x69, 0x20, 0x6b, 0x61, 0x75, 0x68, 0x75, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x69, 0x61, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x74, 0x74, 0x61, 0x2e, 0x20, 0x4e, 0xe4, 0x69, 0x6c, 0x6c, 0xe4, 0x0a, 0x6b, 0x6f, 0x6c, 0x6d, 0x65, 0x6c, 0x6c, 0x61, 0x20, 0x6c, 0x61, 0x6a, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x6f, 0x6e, 0x6b, 0x69, 0x6e, 0x20, 0x79, 0x68, 0x74, 0x65, 0x69, 0x73, 0x65, 0x74, 0x20, 0x6a, 0x75, 0x75, 0x72, 0x65, 0x74, 0x20, 0x31, 0x38, 0x30, 0x30, 0x2d, 0x6c, 0x75, 0x6b, 0x75, 0x61, 0x20, 0x65, 0x64, 0x65, 0x6c, 0x74, 0xe4, 0x76, 0xe4, 0x73, 0x73, 0xe4, 0x20, 0x65, 0x69, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x73, 0x65, 0x73, 0x73, 0x61, 0x0a, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x73, 0x73, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFiIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('fi'));
    });

    test('detect fi utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kFiUtf8 = Uint8List.fromList([0x54, 0x65, 0x72, 0x6d, 0x69, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x6b, 0x6b, 0x61, 0x6c, 0x61, 0x69, 0x73, 0x65, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6c, 0x65, 0x68, 0x74, 0x69, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x69, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6a, 0x61, 0x6e, 0x20, 0x48, 0x75, 0x67, 0x6f, 0x0a, 0x47, 0x65, 0x72, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x20, 0x6b, 0x65, 0x6b, 0x73, 0x69, 0x6d, 0xc3, 0xa4, 0x2e, 0x20, 0x53, 0x75, 0x6f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x69, 0x20, 0x74, 0x6f, 0x68, 0x74, 0x6f, 0x72, 0x69, 0x20, 0x45, 0x69, 0x6e, 0x6f, 0x0a, 0x4b, 0x61, 0x75, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x6e, 0x20, 0x31, 0x39, 0x35, 0x30, 0x2d, 0x6c, 0x75, 0x76, 0x75, 0x6e, 0x20, 0x61, 0x6c, 0x6b, 0x75, 0x70, 0x75, 0x6f, 0x6c, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x0a, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x61, 0x61, 0x64, 0x69, 0x74, 0x74, 0x75, 0x20, 0x65, 0x72, 0x69, 0x6c, 0x61, 0x69, 0x73, 0x69, 0x61, 0x20, 0x6d, 0xc3, 0xa4, 0xc3, 0xa4, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x6d, 0x69, 0xc3, 0xa4, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6e, 0x0a, 0x72, 0x61, 0x6a, 0x61, 0x74, 0x20, 0x65, 0x69, 0x76, 0xc3, 0xa4, 0x74, 0x20, 0x6f, 0x6c, 0x65, 0x20, 0x79, 0x6b, 0x73, 0x69, 0x73, 0x65, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x69, 0x73, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6c, 0x6b, 0x65, 0xc3, 0xa4, 0x74, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x74, 0x65, 0x69, 0x73, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x73, 0x20, 0x6c, 0xc3, 0xa4, 0x68, 0x65, 0x6e, 0x65, 0x65, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x0a, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x6e, 0x6c, 0x61, 0x6a, 0x65, 0x6a, 0x61, 0x2c, 0x20, 0x65, 0x72, 0x69, 0x74, 0x79, 0x69, 0x73, 0x65, 0x73, 0x74, 0x69, 0x20, 0x6b, 0x61, 0x75, 0x68, 0x75, 0x2d, 0x20, 0x6a, 0x61, 0x20, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x69, 0x61, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x74, 0x74, 0x61, 0x2e, 0x20, 0x4e, 0xc3, 0xa4, 0x69, 0x6c, 0x6c, 0xc3, 0xa4, 0x0a, 0x6b, 0x6f, 0x6c, 0x6d, 0x65, 0x6c, 0x6c, 0x61, 0x20, 0x6c, 0x61, 0x6a, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x6f, 0x6e, 0x6b, 0x69, 0x6e, 0x20, 0x79, 0x68, 0x74, 0x65, 0x69, 0x73, 0x65, 0x74, 0x20, 0x6a, 0x75, 0x75, 0x72, 0x65, 0x74, 0x20, 0x31, 0x38, 0x30, 0x30, 0x2d, 0x6c, 0x75, 0x6b, 0x75, 0x61, 0x20, 0x65, 0x64, 0x65, 0x6c, 0x74, 0xc3, 0xa4, 0x76, 0xc3, 0xa4, 0x73, 0x73, 0xc3, 0xa4, 0x20, 0x65, 0x69, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x73, 0x65, 0x73, 0x73, 0x61, 0x0a, 0x6b, 0x69, 0x72, 0x6a, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x75, 0x75, 0x64, 0x65, 0x73, 0x73, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFiUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('fi'));
    });

    test('detect fr iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kFrIso88591 = Uint8List.fromList([0x4c, 0x61, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x64, 0x6f, 0x6e, 0x74, 0x20, 0x6c, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x20, 0x65, 0x73, 0x74, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x43, 0x45, 0x49, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x65, 0x74, 0x20, 0x71, 0x75, 0x69, 0x20, 0x65, 0x73, 0x74, 0x20, 0x73, 0x6f, 0x75, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6c, 0xe9, 0x65, 0x20, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x2d, 0x31, 0x20, 0x6f, 0x75, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x20, 0x6f, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x70, 0x72, 0x65, 0x6d, 0x69, 0xe8, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x43, 0x45, 0x49, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2c, 0x20, 0x71, 0x75, 0x69, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x75, 0x72, 0x20, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xe8, 0x72, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x45, 0x6c, 0x6c, 0x65, 0x20, 0x64, 0xe9, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x20, 0x63, 0x65, 0x20, 0x71, 0x75, 0x27, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x6c, 0x27, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0xe9, 0x72, 0x6f, 0x20, 0x31, 0x2c, 0x20, 0x71, 0x75, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x31, 0x39, 0x31, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xe8, 0x72, 0x65, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x2c, 0x20, 0x63, 0x68, 0x61, 0x63, 0x75, 0x6e, 0x20, 0x64, 0x27, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x65, 0x75, 0x78, 0x20, 0xe9, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x64, 0xe9, 0x20, 0x70, 0x61, 0x72, 0x20, 0x75, 0x6e, 0x20, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x20, 0x28, 0x73, 0x6f, 0x69, 0x74, 0x20, 0x38, 0x20, 0x62, 0x69, 0x74, 0x73, 0x29, 0x2e, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x6e, 0x64, 0x20, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xe8, 0x72, 0x65, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x27, 0x55, 0x53, 0x2d, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2e, 0x0a, 0x0a, 0x44, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x61, 0x79, 0x73, 0x20, 0x6f, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x78, 0x2c, 0x20, 0x63, 0x65, 0x74, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0xe9, 0x74, 0x61, 0x69, 0x74, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xe9, 0x65, 0x20, 0x70, 0x61, 0x72, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x75, 0x78, 0x20, 0x73, 0x79, 0x73, 0x74, 0xe8, 0x6d, 0x65, 0x73, 0x20, 0x64, 0x27, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x6f, 0x6e, 0x74, 0x20, 0x55, 0x4e, 0x49, 0x58, 0x2c, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x6f, 0x75, 0x20, 0x41, 0x6d, 0x69, 0x67, 0x61, 0x4f, 0x53, 0x2e, 0x20, 0x45, 0x6c, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x64, 0x6f, 0x6e, 0x6e, 0xe9, 0x20, 0x6c, 0x69, 0x65, 0x75, 0x20, 0xe0, 0x20, 0x71, 0x75, 0x65, 0x6c, 0x71, 0x75, 0x65, 0x73, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x65, 0x74, 0x20, 0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x64, 0x6f, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x32, 0x20, 0x65, 0x74, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x35, 0x2e, 0x20, 0x4c, 0x61, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2c, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x2c, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x35, 0x2c, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x32, 0x20, 0x65, 0x74, 0x20, 0x4d, 0x61, 0x63, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x6d, 0x69, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x64, 0xe9, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x70, 0x65, 0x75, 0x72, 0x73, 0x20, 0x64, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x75, 0x65, 0x73, 0x2e, 0x20, 0x4c, 0x65, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x53, 0x65, 0x74, 0x20, 0x63, 0x72, 0xe9, 0xe9, 0x20, 0x70, 0x61, 0x72, 0x20, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x75, 0x72, 0x20, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x75, 0x65, 0x20, 0x56, 0x54, 0x32, 0x32, 0x30, 0x20, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0xe9, 0x72, 0xe9, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0xe0, 0x20, 0x6c, 0x61, 0x20, 0x66, 0x6f, 0x69, 0x73, 0x20, 0x6c, 0x27, 0x61, 0x6e, 0x63, 0xea, 0x74, 0x72, 0x65, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x20, 0x65, 0x74, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x2e, 0x20, 0x41, 0x75, 0x6a, 0x6f, 0x75, 0x72, 0x64, 0x27, 0x68, 0x75, 0x69, 0x2c, 0x20, 0x73, 0x6f, 0x6e, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x6e, 0x64, 0x20, 0xe0, 0x20, 0x64, 0xe9, 0x63, 0x72, 0x6f, 0xee, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFrIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('fr'));
    });

    test('detect fr iso-8859-15', () {
      final detector = UCharDet();
      // dart format off
      final kFrIso885915 = Uint8List.fromList([0x4c, 0x27, 0xbd, 0x75, 0x66, 0x20, 0x64, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x61, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x69, 0x74, 0x20, 0x61, 0x67, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x27, 0x69, 0x6e, 0x67, 0x72, 0xe9, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x61, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x75, 0x78, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x73, 0x2c, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x75, 0x73, 0x65, 0x73, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x67, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x71, 0x75, 0x65, 0x73, 0x20, 0x64, 0x75, 0x0a, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x2e, 0x0a, 0x0a, 0x4c, 0x65, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xe9, 0x20, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x27, 0xbd, 0x75, 0x66, 0x20, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x6d, 0x61, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0xbd, 0x75, 0x66, 0x73, 0x20, 0x64, 0x27, 0x61, 0x75, 0x74, 0x72, 0x65, 0x73, 0x20, 0x6f, 0x69, 0x73, 0x65, 0x61, 0x75, 0x78, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0x61, 0x75, 0x73, 0x73, 0x69, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6d, 0x6d, 0xe9, 0x73, 0x20, 0x3a, 0x20, 0x63, 0x61, 0x69, 0x6c, 0x6c, 0x65, 0x2c, 0x20, 0x63, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x6f, 0x69, 0x65, 0x2c, 0x20, 0x61, 0x75, 0x74, 0x72, 0x75, 0x63, 0x68, 0x65, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x20, 0x4c, 0x65, 0x73, 0x20, 0xbd, 0x75, 0x66, 0x73, 0x20, 0x64, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x63, 0x61, 0x76, 0x69, 0x61, 0x72, 0x2c, 0x20, 0x6f, 0x75, 0x20, 0x64, 0x65, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x72, 0x65, 0x70, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0x63, 0x65, 0x75, 0x78, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x69, 0x67, 0x75, 0x61, 0x6e, 0x65, 0x20, 0x76, 0x65, 0x72, 0x74, 0x2c, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0xe9, 0x67, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xe9, 0x73, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x27, 0x61, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x75, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x2e, 0x20, 0x43, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x2c, 0x20, 0x6c, 0x65, 0x75, 0x72, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x73, 0x74, 0x20, 0x74, 0x72, 0xe8, 0x73, 0x0a, 0x64, 0x69, 0x66, 0x66, 0xe9, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x20, 0xbd, 0x75, 0x66, 0x73, 0x20, 0x64, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x61, 0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x4c, 0x65, 0x73, 0x20, 0xbd, 0x75, 0x66, 0x73, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xe9, 0x73, 0x20, 0x65, 0x6e, 0x20, 0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x20, 0x6e, 0x65, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0x67, 0xe9, 0x6e, 0xe9, 0x72, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x73, 0x20, 0x66, 0xe9, 0x63, 0x6f, 0x6e, 0x64, 0xe9, 0x73, 0x20, 0x64, 0x75, 0x20, 0x66, 0x61, 0x69, 0x74, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x65, 0x75, 0x72, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x27, 0xe9, 0x6c, 0x65, 0x76, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x6c, 0x73, 0x20, 0x6f, 0xf9, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x71, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x46, 0xe9, 0x63, 0x6f, 0x6e, 0x64, 0xe9, 0x73, 0x20, 0x6f, 0x75, 0x20, 0x6e, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x6c, 0x73, 0x0a, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xe9, 0x73, 0x20, 0xe0, 0x20, 0x6c, 0x27, 0xe9, 0x74, 0x61, 0x74, 0x20, 0x66, 0x72, 0x61, 0x69, 0x73, 0x20, 0x73, 0x69, 0x20, 0x6d, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x20, 0x76, 0x69, 0x6e, 0x67, 0x74, 0x2d, 0x68, 0x75, 0x69, 0x74, 0x20, 0x6a, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x73, 0x65, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0xe9, 0x63, 0x6f, 0x75, 0x6c, 0xe9, 0x73, 0x20, 0x61, 0x70, 0x72, 0xe8, 0x73, 0x0a, 0x6c, 0x61, 0x20, 0x70, 0x6f, 0x6e, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x65, 0x6c, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x20, 0x66, 0x72, 0x61, 0x6e, 0xe7, 0x61, 0x69, 0x73, 0x65, 0x73, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x0a, 0x63, 0x75, 0x6c, 0x69, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x73, 0x69, 0x61, 0x74, 0x69, 0x71, 0x75, 0x65, 0x73, 0x2c, 0x20, 0x6c, 0x65, 0x73, 0x20, 0xbd, 0x75, 0x66, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x72, 0x66, 0x6f, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6d, 0x6d, 0xe9, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x76, 0xe9, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x75, 0x74, 0x2c, 0x0a, 0x6f, 0x75, 0x20, 0x6d, 0x69, 0x73, 0x20, 0xe0, 0x20, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x69, 0x65, 0x75, 0x72, 0x73, 0x20, 0x73, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x20, 0x6c, 0x27, 0xbd, 0x75, 0x66, 0x20, 0x64, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFrIso885915);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-15'),
      );
      expect(candidates.first.language?.iso6391Code, equals('fr'));
    });

    test('detect fr utf-16be', () {
      final detector = UCharDet();
      // dart format off
      final kFrUtf16be = Uint8List.fromList([0xfe, 0xff, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x28, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x29, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x20, 0x00, 0x63, 0x00, 0x61, 0x00, 0x70, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x0a, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x20, 0x00, 0x31, 0x00, 0x2c, 0x00, 0x31, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2c, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x20, 0x00, 0x70, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x20, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x2e, 0x00, 0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x0a, 0x00, 0x76, 0x00, 0x61, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x2d, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x74, 0x00, 0x68, 0x00, 0x2c, 0x00, 0x20, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x70, 0x00, 0x6f, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x77, 0x00, 0x6f, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x75, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x74, 0x00, 0x73, 0x00, 0x2e, 0x00, 0x0a, 0x00, 0x28, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x20, 0x00, 0x73, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x61, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x61, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x20, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x38, 0x00, 0x2c, 0x00, 0x20, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x26, 0x00, 0x20, 0x00, 0x2d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x29, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x70, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x66, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x65, 0x00, 0x64, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x64, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x20, 0x00, 0x6b, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x20, 0x00, 0x28, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x0a, 0x00, 0x32, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x29, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x65, 0x00, 0x64, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x64, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x32, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0a, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x64, 0x00, 0x20, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x20, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x20, 0x00, 0x75, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x2e, 0x00, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFrUtf16be);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-16be'));
    });

    test('detect fr utf-32le', () {
      final detector = UCharDet();
      // dart format off
      final kFrUtf32le = Uint8List.fromList([0xff, 0xfe, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x19, 0x20, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x19, 0x20, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00]);
      // dart format on
      final candidates = detector.detect(kFrUtf32le);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-32le'));
    });

    test('detect fr utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kFrUtf8 = Uint8List.fromList([0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x28, 0x61, 0x62, 0x72, 0xc3, 0xa9, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0xe2, 0x80, 0x99, 0x61, 0x6e, 0x67, 0x6c, 0x61, 0x69, 0x73, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x53, 0x65, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x2d, 0x0a, 0x38, 0x20, 0x62, 0x69, 0x74, 0x73, 0x29, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xc3, 0xa8, 0x72, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x75, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0xc3, 0xa7, 0x75, 0x20, 0x70, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x20, 0x6c, 0xe2, 0x80, 0x99, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x0a, 0x64, 0x65, 0x73, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xc3, 0xa8, 0x72, 0x65, 0x73, 0x20, 0x64, 0x75, 0x20, 0xc2, 0xab, 0x20, 0x72, 0xc3, 0xa9, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x69, 0x72, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x63, 0x61, 0x72, 0x61, 0x63, 0x74, 0xc3, 0xa8, 0x72, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x64, 0xc3, 0xa9, 0x73, 0x20, 0xc2, 0xbb, 0x2c, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x64, 0xc3, 0xa9, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x70, 0xc3, 0xa9, 0x20, 0x70, 0x61, 0x72, 0x20, 0x6c, 0xe2, 0x80, 0x99, 0x49, 0x53, 0x4f, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x61, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x43, 0x45, 0x49, 0x20, 0x31, 0x30, 0x36, 0x34, 0x36, 0x2c, 0x20, 0x61, 0x75, 0x6a, 0x6f, 0x75, 0x72, 0x64, 0xe2, 0x80, 0x99, 0x68, 0x75, 0x69, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x76, 0x65, 0x63, 0x20, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x76, 0x65, 0x63, 0x20, 0x6c, 0x61, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0xc3, 0xa9, 0x65, 0x20, 0xc3, 0xa0, 0x20, 0x6c, 0xe2, 0x80, 0x99, 0x61, 0x6e, 0x67, 0x6c, 0x61, 0x69, 0x73, 0x20, 0x64, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x28, 0x65, 0x74, 0x20, 0x71, 0x75, 0x65, 0x6c, 0x71, 0x75, 0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0x72, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x65, 0x73, 0x20, 0x62, 0x65, 0x61, 0x75, 0x63, 0x6f, 0x75, 0x70, 0x0a, 0x6d, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x66, 0x72, 0xc3, 0xa9, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x29, 0x2c, 0x20, 0x6d, 0x61, 0x69, 0x73, 0x20, 0x74, 0x72, 0xc3, 0xa8, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x72, 0xc3, 0xa9, 0x70, 0x61, 0x6e, 0x64, 0x75, 0x65, 0x20, 0x64, 0x65, 0x70, 0x75, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x20, 0x64, 0xc3, 0xa9, 0x63, 0x65, 0x6e, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x4c, 0xe2, 0x80, 0x99, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xc3, 0xa9, 0x20, 0x70, 0x61, 0x72, 0x20, 0x38, 0x32, 0x2c, 0x32, 0x20, 0x25, 0x20, 0x64, 0x65, 0x73, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x77, 0x65, 0x62, 0x20, 0x65, 0x6e, 0x20, 0x64, 0xc3, 0xa9, 0x63, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x20, 0x32, 0x30, 0x31, 0x34, 0x31, 0x2e, 0x20, 0x44, 0x65, 0x20, 0x70, 0x61, 0x72, 0x20, 0x73, 0x61, 0x0a, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0x65, 0x73, 0x74, 0x20, 0x64, 0xe2, 0x80, 0x99, 0x75, 0x6e, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x20, 0x65, 0x6e, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x75, 0x72, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2c, 0x20, 0x65, 0x74, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x0a, 0x73, 0x79, 0x73, 0x74, 0xc3, 0xa8, 0x6d, 0x65, 0x73, 0x20, 0x64, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0xc3, 0xa9, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x27, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x6c, 0x20, 0x73, 0xe2, 0x80, 0x99, 0x61, 0x67, 0x69, 0x74, 0x20, 0xc3, 0xa9, 0x67, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x75, 0x20, 0x63, 0x6f, 0x64, 0x61, 0x67, 0x65, 0x20, 0x6c, 0x65, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x0a, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x73, 0xc3, 0xa9, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x73, 0x79, 0x73, 0x74, 0xc3, 0xa8, 0x6d, 0x65, 0x73, 0x20, 0x47, 0x4e, 0x55, 0x2c, 0x20, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x20, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x6f, 0x75, 0x72, 0x20, 0x67, 0xc3, 0xa9, 0x72, 0x65, 0x72, 0x20, 0x6c, 0x65, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x20, 0x74, 0x65, 0x78, 0x74, 0x65, 0x73, 0x20, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x75, 0x72, 0x73, 0x20, 0x74, 0x72, 0x61, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x73, 0x79, 0x73, 0x74, 0xc3, 0xa8, 0x6d, 0x65, 0x73, 0x0a, 0x64, 0xe2, 0x80, 0x99, 0xc3, 0xa9, 0x63, 0x72, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x73, 0x20, 0x64, 0x75, 0x20, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFrUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('fr'));
    });

    test('detect fr windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kFrWindows1252 = Uint8List.fromList([0x4c, 0x92, 0x9c, 0x75, 0x66, 0x20, 0x64, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x61, 0x69, 0x6c, 0x6c, 0x65, 0x20, 0x65, 0x73, 0x74, 0x20, 0x75, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x69, 0x74, 0x20, 0x61, 0x67, 0x72, 0x69, 0x63, 0x6f, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x27, 0x69, 0x6e, 0x67, 0x72, 0xe9, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x6c, 0x61, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x75, 0x78, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x73, 0x2c, 0x20, 0x64, 0x61, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x20, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x75, 0x73, 0x65, 0x73, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x67, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x71, 0x75, 0x65, 0x73, 0x20, 0x64, 0x75, 0x0a, 0x6d, 0x6f, 0x6e, 0x64, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kFrWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('fr'));
    });

    test('detect ga iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kGaIso88591 = Uint8List.fromList([0x41, 0x67, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x74, 0xe9, 0x61, 0x72, 0x6d, 0x61, 0xed, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xf3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x20, 0x62, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x61, 0x6e, 0x6e, 0x20, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x20, 0x61, 0x64, 0x68, 0x6d, 0x61, 0x69, 0x64, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x20, 0x62, 0xe1, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x4e, 0xed, 0x20, 0x62, 0x68, 0xed, 0x6f, 0x64, 0x68, 0x20, 0x64, 0x65, 0x20, 0x63, 0x68, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x69, 0x72, 0x20, 0xc9, 0x69, 0x72, 0x65, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xed, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x20, 0x65, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x68, 0x20, 0x6e, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x2c, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xe1, 0x20, 0xc9, 0x69, 0x72, 0x65, 0x0a, 0x66, 0xe9, 0x69, 0x6e, 0x20, 0x6c, 0xe1, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x64, 0x27, 0x61, 0x69, 0x62, 0x68, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x61, 0x2e, 0x20, 0x46, 0xe1, 0x67, 0x61, 0x6e, 0x6e, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x67, 0x6f, 0x20, 0x62, 0x68, 0x66, 0x75, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x20, 0x74, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x20, 0x62, 0x72, 0x65, 0x61, 0x63, 0x20, 0x6c, 0x65, 0x0a, 0x74, 0xe9, 0x61, 0x72, 0x6d, 0x61, 0xed, 0x6f, 0x63, 0x68, 0x74, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xf3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6f, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x63, 0x75, 0x69, 0x64, 0x20, 0x64, 0x69, 0x20, 0x74, 0x75, 0x67, 0x74, 0x68, 0x61, 0x20, 0x69, 0x73, 0x74, 0x65, 0x61, 0x63, 0x68, 0x20, 0xf3, 0x6e, 0x0a, 0x4c, 0x6f, 0x63, 0x68, 0x6c, 0x61, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0xf3, 0x6e, 0x20, 0x6d, 0x42, 0xe9, 0x61, 0x72, 0x6c, 0x61, 0x20, 0x74, 0x72, 0xed, 0x20, 0x6c, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x74, 0x68, 0x65, 0x6f, 0x69, 0x72, 0xed, 0x20, 0xf3, 0x6e, 0x20, 0x69, 0x61, 0x73, 0x61, 0x63, 0x68, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kGaIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ga'));
    });

    test('detect ga utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kGaUtf8 = Uint8List.fromList([0x41, 0x67, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x74, 0xc3, 0xa9, 0x61, 0x72, 0x6d, 0x61, 0xc3, 0xad, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xc3, 0xb3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x20, 0x62, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x61, 0x6e, 0x6e, 0x20, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x20, 0x61, 0x64, 0x68, 0x6d, 0x61, 0x69, 0x64, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x20, 0x62, 0xc3, 0xa1, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x4e, 0xc3, 0xad, 0x20, 0x62, 0x68, 0xc3, 0xad, 0x6f, 0x64, 0x68, 0x20, 0x64, 0x65, 0x20, 0x63, 0x68, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x69, 0x72, 0x20, 0xc3, 0x89, 0x69, 0x72, 0x65, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xc3, 0xad, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x20, 0x65, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x68, 0x20, 0x6e, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x2c, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xc3, 0xa1, 0x20, 0xc3, 0x89, 0x69, 0x72, 0x65, 0x0a, 0x66, 0xc3, 0xa9, 0x69, 0x6e, 0x20, 0x6c, 0xc3, 0xa1, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x64, 0xe2, 0x80, 0x99, 0x61, 0x69, 0x62, 0x68, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x61, 0x2e, 0x20, 0x46, 0xc3, 0xa1, 0x67, 0x61, 0x6e, 0x6e, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x67, 0x6f, 0x20, 0x62, 0x68, 0x66, 0x75, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x20, 0x74, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x20, 0x62, 0x72, 0x65, 0x61, 0x63, 0x20, 0x6c, 0x65, 0x0a, 0x74, 0xc3, 0xa9, 0x61, 0x72, 0x6d, 0x61, 0xc3, 0xad, 0x6f, 0x63, 0x68, 0x74, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xc3, 0xb3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6f, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x63, 0x75, 0x69, 0x64, 0x20, 0x64, 0x69, 0x20, 0x74, 0x75, 0x67, 0x74, 0x68, 0x61, 0x20, 0x69, 0x73, 0x74, 0x65, 0x61, 0x63, 0x68, 0x20, 0xc3, 0xb3, 0x6e, 0x0a, 0x4c, 0x6f, 0x63, 0x68, 0x6c, 0x61, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0xc3, 0xb3, 0x6e, 0x20, 0x6d, 0x42, 0xc3, 0xa9, 0x61, 0x72, 0x6c, 0x61, 0x20, 0x74, 0x72, 0xc3, 0xad, 0x20, 0x6c, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x74, 0x68, 0x65, 0x6f, 0x69, 0x72, 0xc3, 0xad, 0x20, 0xc3, 0xb3, 0x6e, 0x20, 0x69, 0x61, 0x73, 0x61, 0x63, 0x68, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kGaUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ga'));
    });

    test('detect ga windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kGaWindows1252 = Uint8List.fromList([0x41, 0x67, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x74, 0xe9, 0x61, 0x72, 0x6d, 0x61, 0xed, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xf3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x20, 0x62, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x61, 0x6e, 0x6e, 0x20, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x20, 0x61, 0x64, 0x68, 0x6d, 0x61, 0x69, 0x64, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x65, 0x20, 0x62, 0xe1, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x4e, 0xed, 0x20, 0x62, 0x68, 0xed, 0x6f, 0x64, 0x68, 0x20, 0x64, 0x65, 0x20, 0x63, 0x68, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x69, 0x72, 0x20, 0xc9, 0x69, 0x72, 0x65, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xed, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x20, 0x65, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x68, 0x20, 0x6e, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x61, 0x2c, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x74, 0xe1, 0x20, 0xc9, 0x69, 0x72, 0x65, 0x0a, 0x66, 0xe9, 0x69, 0x6e, 0x20, 0x6c, 0xe1, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x64, 0x92, 0x61, 0x69, 0x62, 0x68, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x61, 0x2e, 0x20, 0x46, 0xe1, 0x67, 0x61, 0x6e, 0x6e, 0x20, 0x73, 0x65, 0x6f, 0x20, 0x67, 0x6f, 0x20, 0x62, 0x68, 0x66, 0x75, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x20, 0x74, 0x65, 0x61, 0x6e, 0x67, 0x61, 0x20, 0x62, 0x72, 0x65, 0x61, 0x63, 0x20, 0x6c, 0x65, 0x0a, 0x74, 0xe9, 0x61, 0x72, 0x6d, 0x61, 0xed, 0x6f, 0x63, 0x68, 0x74, 0x20, 0x73, 0x65, 0x6f, 0x6c, 0x74, 0xf3, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6f, 0x69, 0x72, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0x63, 0x75, 0x69, 0x64, 0x20, 0x64, 0x69, 0x20, 0x74, 0x75, 0x67, 0x74, 0x68, 0x61, 0x20, 0x69, 0x73, 0x74, 0x65, 0x61, 0x63, 0x68, 0x20, 0xf3, 0x6e, 0x0a, 0x4c, 0x6f, 0x63, 0x68, 0x6c, 0x61, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x20, 0x61, 0x67, 0x75, 0x73, 0x20, 0xf3, 0x6e, 0x20, 0x6d, 0x42, 0xe9, 0x61, 0x72, 0x6c, 0x61, 0x20, 0x74, 0x72, 0xed, 0x20, 0x6c, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x74, 0x68, 0x65, 0x6f, 0x69, 0x72, 0xed, 0x20, 0xf3, 0x6e, 0x20, 0x69, 0x61, 0x73, 0x61, 0x63, 0x68, 0x74, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kGaWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ga'));
    });

    test('detect he ibm862', () {
      final detector = UCharDet();
      // dart format off
      final kHeIbm862 = Uint8List.fromList([0x99, 0x9a, 0x89, 0x20, 0x8e, 0x91, 0x8b, 0x9a, 0x85, 0x9a, 0x20, 0x92, 0x8c, 0x20, 0x8e, 0x8e, 0x99, 0x8c, 0x20, 0x8e, 0x83, 0x89, 0x90, 0x89, 0x20, 0x28, 0x81, 0x80, 0x90, 0x82, 0x8c, 0x89, 0x9a, 0x3a, 0x20, 0x54, 0x77, 0x6f, 0x20, 0x54, 0x72, 0x65, 0x61, 0x74, 0x69, 0x73, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x84, 0x85, 0x80, 0x20, 0x87, 0x89, 0x81, 0x85, 0x98, 0x20, 0x94, 0x89, 0x8c, 0x85, 0x91, 0x85, 0x94, 0x89, 0x2d, 0x94, 0x85, 0x8c, 0x89, 0x88, 0x89, 0x20, 0x8e, 0x80, 0x9a, 0x20, 0x84, 0x84, 0x85, 0x82, 0x84, 0x20, 0x84, 0x80, 0x90, 0x82, 0x8c, 0x89, 0x20, 0x82, 0x27, 0x85, 0x8f, 0x20, 0x8c, 0x85, 0x97, 0x2c, 0x20, 0x99, 0x94, 0x85, 0x98, 0x91, 0x8d, 0x20, 0x81, 0x92, 0x89, 0x8c, 0x85, 0x8d, 0x20, 0x99, 0x8d, 0x20, 0x81, 0x2d, 0x31, 0x36, 0x38, 0x39, 0x2e, 0x5b, 0x31, 0x5d, 0x20, 0x84, 0x87, 0x89, 0x81, 0x85, 0x98, 0x20, 0x8e, 0x85, 0x98, 0x8b, 0x81, 0x20, 0x8e, 0x99, 0x90, 0x89, 0x20, 0x87, 0x8c, 0x97, 0x89, 0x8d, 0x20, 0x28, 0x8e, 0x91, 0x8b, 0x9a, 0x85, 0x9a, 0x29, 0x2e, 0x20, 0x81, 0x8e, 0x91, 0x8b, 0x9a, 0x20, 0x84, 0x98, 0x80, 0x99, 0x85, 0x90, 0x84, 0x20, 0x8c, 0x85, 0x97, 0x20, 0x8e, 0x81, 0x97, 0x99, 0x20, 0x8c, 0x84, 0x94, 0x98, 0x89, 0x8a, 0x20, 0x80, 0x9a, 0x20, 0x84, 0x88, 0x89, 0x92, 0x85, 0x8f, 0x20, 0x99, 0x84, 0x96, 0x89, 0x82, 0x20, 0x98, 0x85, 0x81, 0x98, 0x88, 0x20, 0x94, 0x89, 0x8c, 0x8e, 0x98, 0x20, 0x81, 0x91, 0x94, 0x98, 0x85, 0x20, 0x22, 0x94, 0x88, 0x98, 0x89, 0x80, 0x98, 0x8b, 0x84, 0x22, 0x2e, 0x20, 0x8c, 0x85, 0x97, 0x20, 0x8e, 0x81, 0x97, 0x98, 0x20, 0x81, 0x8e, 0x91, 0x8b, 0x9a, 0x20, 0x86, 0x85, 0x20, 0x80, 0x9a, 0x20, 0x88, 0x89, 0x92, 0x85, 0x90, 0x89, 0x85, 0x20, 0x99, 0x8c, 0x20, 0x94, 0x89, 0x8c, 0x8e, 0x98, 0x20, 0x8c, 0x82, 0x81, 0x89, 0x20, 0x84, 0x8c, 0x82, 0x89, 0x88, 0x89, 0x85, 0x8e, 0x89, 0x85, 0x9a, 0x20, 0x99, 0x8c, 0x20, 0x8e, 0x8c, 0x85, 0x8b, 0x84, 0x20, 0x80, 0x81, 0x91, 0x85, 0x8c, 0x85, 0x88, 0x89, 0x9a, 0x2c, 0x20, 0x80, 0x9a, 0x20, 0x98, 0x92, 0x89, 0x85, 0x8f, 0x20, 0x86, 0x8b, 0x85, 0x9a, 0x8d, 0x20, 0x84, 0x80, 0x8c, 0x85, 0x84, 0x89, 0x9a, 0x20, 0x99, 0x8c, 0x20, 0x8e, 0x8c, 0x8b, 0x89, 0x8d, 0x20, 0x85, 0x80, 0x9a, 0x20, 0x84, 0x82, 0x89, 0x99, 0x84, 0x20, 0x8c, 0x94, 0x89, 0x84, 0x20, 0x97, 0x89, 0x89, 0x8e, 0x9a, 0x20, 0x84, 0x8e, 0x99, 0x8b, 0x89, 0x85, 0x9a, 0x20, 0x81, 0x89, 0x8f, 0x20, 0x99, 0x8c, 0x88, 0x85, 0x8f, 0x20, 0x84, 0x80, 0x81, 0x20, 0x81, 0x8e, 0x99, 0x94, 0x87, 0x84, 0x20, 0x8c, 0x81, 0x89, 0x8f, 0x20, 0x99, 0x8c, 0x88, 0x85, 0x8f, 0x20, 0x8e, 0x83, 0x89, 0x90, 0x89, 0x20, 0x84, 0x92, 0x85, 0x81, 0x98, 0x20, 0x81, 0x89, 0x98, 0x85, 0x99, 0x84, 0x2e, 0x20, 0x81, 0x8e, 0x91, 0x8b, 0x9a, 0x20, 0x84, 0x99, 0x90, 0x89, 0x89, 0x84, 0x20, 0x8e, 0x96, 0x89, 0x82, 0x20, 0x8c, 0x85, 0x97, 0x20, 0x80, 0x9a, 0x20, 0x82, 0x89, 0x99, 0x9a, 0x85, 0x20, 0x8c, 0x82, 0x81, 0x89, 0x20, 0x8e, 0x97, 0x85, 0x98, 0x20, 0x84, 0x8e, 0x8e, 0x99, 0x8c, 0x20, 0x84, 0x8e, 0x83, 0x89, 0x90, 0x89, 0x2c, 0x20, 0x9a, 0x8b, 0x8c, 0x89, 0x9a, 0x85, 0x20, 0x99, 0x8c, 0x20, 0x99, 0x8c, 0x88, 0x85, 0x8f, 0x20, 0x8c, 0x82, 0x89, 0x88, 0x89, 0x8e, 0x89, 0x20, 0x85, 0x82, 0x81, 0x85, 0x8c, 0x85, 0x9a, 0x20, 0x91, 0x8e, 0x8b, 0x85, 0x9a, 0x85, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHeIbm862);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm862'));
      expect(candidates.first.language?.iso6391Code, equals('he'));
    });

    test('detect he ibm862', () {
      final detector = UCharDet();
      // dart format off
      final kHeIbm862 = Uint8List.fromList([0x2e, 0x85, 0x9a, 0x85, 0x8b, 0x8e, 0x91, 0x20, 0x9a, 0x85, 0x8c, 0x85, 0x81, 0x82, 0x85, 0x20, 0x89, 0x8e, 0x89, 0x88, 0x89, 0x82, 0x8c, 0x20, 0x8f, 0x85, 0x88, 0x8c, 0x99, 0x20, 0x8c, 0x99, 0x20, 0x85, 0x9a, 0x89, 0x8c, 0x8b, 0x9a, 0x20, 0x2c, 0x89, 0x90, 0x89, 0x83, 0x8e, 0x84, 0x20, 0x8c, 0x99, 0x8e, 0x8e, 0x84, 0x20, 0x98, 0x85, 0x97, 0x8e, 0x20, 0x89, 0x81, 0x82, 0x8c, 0x20, 0x85, 0x9a, 0x99, 0x89, 0x82, 0x20, 0x9a, 0x80, 0x20, 0x97, 0x85, 0x8c, 0x20, 0x82, 0x89, 0x96, 0x8e, 0x20, 0x84, 0x89, 0x89, 0x90, 0x99, 0x84, 0x20, 0x9a, 0x8b, 0x91, 0x8e, 0x81, 0x20, 0x2e, 0x84, 0x99, 0x85, 0x98, 0x89, 0x81, 0x20, 0x98, 0x81, 0x85, 0x92, 0x84, 0x20, 0x89, 0x90, 0x89, 0x83, 0x8e, 0x20, 0x8f, 0x85, 0x88, 0x8c, 0x99, 0x20, 0x8f, 0x89, 0x81, 0x8c, 0x20, 0x84, 0x87, 0x94, 0x99, 0x8e, 0x81, 0x20, 0x81, 0x80, 0x84, 0x20, 0x8f, 0x85, 0x88, 0x8c, 0x99, 0x20, 0x8f, 0x89, 0x81, 0x20, 0x9a, 0x85, 0x89, 0x8b, 0x99, 0x8e, 0x84, 0x20, 0x9a, 0x8e, 0x89, 0x89, 0x97, 0x20, 0x84, 0x89, 0x94, 0x8c, 0x20, 0x84, 0x99, 0x89, 0x82, 0x84, 0x20, 0x9a, 0x80, 0x85, 0x20, 0x8d, 0x89, 0x8b, 0x8c, 0x8e, 0x20, 0x8c, 0x99, 0x20, 0x9a, 0x89, 0x84, 0x85, 0x8c, 0x80, 0x84, 0x20, 0x8d, 0x9a, 0x85, 0x8b, 0x86, 0x20, 0x8f, 0x85, 0x89, 0x92, 0x98, 0x20, 0x9a, 0x80, 0x20, 0x2c, 0x9a, 0x89, 0x88, 0x85, 0x8c, 0x85, 0x91, 0x81, 0x80, 0x20, 0x84, 0x8b, 0x85, 0x8c, 0x8e, 0x20, 0x8c, 0x99, 0x20, 0x9a, 0x85, 0x89, 0x8e, 0x85, 0x89, 0x88, 0x89, 0x82, 0x8c, 0x84, 0x20, 0x89, 0x81, 0x82, 0x8c, 0x20, 0x98, 0x8e, 0x8c, 0x89, 0x94, 0x20, 0x8c, 0x99, 0x20, 0x85, 0x89, 0x90, 0x85, 0x92, 0x89, 0x88, 0x20, 0x9a, 0x80, 0x20, 0x85, 0x86, 0x20, 0x9a, 0x8b, 0x91, 0x8e, 0x81, 0x20, 0x98, 0x97, 0x81, 0x8e, 0x20, 0x97, 0x85, 0x8c, 0x20, 0x2e, 0x22, 0x84, 0x8b, 0x98, 0x80, 0x89, 0x98, 0x88, 0x94, 0x22, 0x20, 0x85, 0x98, 0x94, 0x91, 0x81, 0x20, 0x98, 0x8e, 0x8c, 0x89, 0x94, 0x20, 0x88, 0x98, 0x81, 0x85, 0x98, 0x20, 0x82, 0x89, 0x96, 0x84, 0x99, 0x20, 0x8f, 0x85, 0x92, 0x89, 0x88, 0x84, 0x20, 0x9a, 0x80, 0x20, 0x8a, 0x89, 0x98, 0x94, 0x84, 0x8c, 0x20, 0x99, 0x97, 0x81, 0x8e, 0x20, 0x97, 0x85, 0x8c, 0x20, 0x84, 0x90, 0x85, 0x99, 0x80, 0x98, 0x84, 0x20, 0x9a, 0x8b, 0x91, 0x8e, 0x81, 0x20, 0x2e, 0x29, 0x9a, 0x85, 0x9a, 0x8b, 0x91, 0x8e, 0x28, 0x20, 0x8d, 0x89, 0x97, 0x8c, 0x87, 0x20, 0x89, 0x90, 0x99, 0x8e, 0x20, 0x81, 0x8b, 0x98, 0x85, 0x8e, 0x20, 0x98, 0x85, 0x81, 0x89, 0x87, 0x84, 0x20, 0x5d, 0x31, 0x5b, 0x2e, 0x39, 0x38, 0x36, 0x31, 0x2d, 0x81, 0x20, 0x8d, 0x99, 0x20, 0x8d, 0x85, 0x8c, 0x89, 0x92, 0x81, 0x20, 0x8d, 0x91, 0x98, 0x85, 0x94, 0x99, 0x20, 0x2c, 0x97, 0x85, 0x8c, 0x20, 0x8f, 0x85, 0x5c, 0x27, 0x82, 0x20, 0x89, 0x8c, 0x82, 0x90, 0x80, 0x84, 0x20, 0x84, 0x82, 0x85, 0x84, 0x84, 0x20, 0x9a, 0x80, 0x8e, 0x20, 0x89, 0x88, 0x89, 0x8c, 0x85, 0x94, 0x2d, 0x89, 0x94, 0x85, 0x91, 0x85, 0x8c, 0x89, 0x94, 0x20, 0x98, 0x85, 0x81, 0x89, 0x87, 0x20, 0x80, 0x85, 0x84, 0x20, 0x29, 0x74, 0x6e, 0x65, 0x6d, 0x6e, 0x72, 0x65, 0x76, 0x6f, 0x47, 0x20, 0x66, 0x6f, 0x20, 0x73, 0x65, 0x73, 0x69, 0x74, 0x61, 0x65, 0x72, 0x54, 0x20, 0x6f, 0x77, 0x54, 0x20, 0x3a, 0x9a, 0x89, 0x8c, 0x82, 0x90, 0x80, 0x81, 0x28, 0x20, 0x89, 0x90, 0x89, 0x83, 0x8e, 0x20, 0x8c, 0x99, 0x8e, 0x8e, 0x20, 0x8c, 0x92, 0x20, 0x9a, 0x85, 0x9a, 0x8b, 0x91, 0x8e, 0x20, 0x89, 0x9a, 0x99, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHeIbm862);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm862'));
      expect(candidates.first.language?.iso6391Code, equals('he'));
    });

    test('detect he utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kHeUtf8 = Uint8List.fromList([0x28, 0xd7, 0xa8, 0xd7, 0x90, 0xd7, 0xa9, 0xd7, 0x99, 0x20, 0xd7, 0xaa, 0xd7, 0x99, 0xd7, 0x91, 0xd7, 0x95, 0xd7, 0xaa, 0x20, 0xd7, 0xa9, 0xd7, 0x9c, 0x20, 0x38, 0xe2, 0x80, 0x8e, 0x2d, 0x62, 0x69, 0x74, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0xd7, 0x90, 0xd7, 0x95, 0x20, 0x38, 0xe2, 0x80, 0x8e, 0x2d, 0x62, 0x69, 0x74, 0x20, 0x55, 0x43, 0x53, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29, 0x20, 0xd7, 0x94, 0xd7, 0x95, 0xd7, 0x90, 0x20, 0xd7, 0xa7, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0xaa, 0xd7, 0x95, 0xd7, 0x95, 0xd7, 0x99, 0xd7, 0x9d, 0x20, 0xd7, 0x91, 0xd7, 0x90, 0xd7, 0x95, 0xd7, 0xa8, 0xd7, 0x9a, 0x20, 0xd7, 0x9e, 0xd7, 0xa9, 0xd7, 0xaa, 0xd7, 0xa0, 0xd7, 0x94, 0x20, 0xd7, 0x9c, 0xd7, 0x99, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x99, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0x93, 0x2c, 0x20, 0xd7, 0xa9, 0xd7, 0xa0, 0xd7, 0x95, 0xd7, 0xa6, 0xd7, 0xa8, 0x20, 0xd7, 0xa2, 0xd7, 0x9c, 0x20, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x99, 0x20, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0x91, 0x20, 0xd7, 0xa4, 0xd7, 0x99, 0xd7, 0x99, 0xd7, 0xa7, 0x20, 0xd7, 0x95, 0xd7, 0xa7, 0xd7, 0x9f, 0x20, 0xd7, 0xaa, 0xd7, 0x95, 0xd7, 0x9e, 0xd7, 0xa4, 0xd7, 0xa1, 0xd7, 0x95, 0xd7, 0x9f, 0x2e, 0x20, 0xd7, 0xa0, 0xd7, 0x99, 0xd7, 0xaa, 0xd7, 0x9f, 0x20, 0xd7, 0x9c, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0x93, 0xd7, 0x93, 0x20, 0xd7, 0x91, 0xd7, 0x95, 0x20, 0xd7, 0x9b, 0xd7, 0x9c, 0x20, 0xd7, 0xaa, 0xd7, 0x95, 0x20, 0xd7, 0x94, 0xd7, 0x9e, 0xd7, 0xa6, 0xd7, 0x95, 0xd7, 0x99, 0x20, 0xd7, 0x91, 0xd7, 0xaa, 0xd7, 0xa7, 0xd7, 0x9f, 0x20, 0xd7, 0x99, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x99, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0xa2, 0xd7, 0x9c, 0x20, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x99, 0x20, 0xd7, 0xa9, 0xd7, 0x99, 0xd7, 0x9e, 0xd7, 0x95, 0xd7, 0xa9, 0x20, 0xd7, 0x91, 0xd7, 0x90, 0xd7, 0x97, 0xd7, 0x93, 0x20, 0xd7, 0xa2, 0xd7, 0x93, 0x20, 0xd7, 0x90, 0xd7, 0xa8, 0xd7, 0x91, 0xd7, 0xa2, 0xd7, 0x94, 0x20, 0xd7, 0x91, 0xd7, 0xaa, 0xd7, 0x99, 0xd7, 0x9d, 0x2c, 0x20, 0xd7, 0xaa, 0xd7, 0x9c, 0xd7, 0x95, 0xd7, 0x99, 0x20, 0xd7, 0x91, 0xd7, 0xaa, 0xd7, 0x95, 0x2e, 0x20, 0xd7, 0x94, 0xd7, 0xa7, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0x91, 0x2d, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0xd7, 0x9e, 0xd7, 0xa2, 0xd7, 0xa0, 0xd7, 0x99, 0xd7, 0xa7, 0x20, 0xd7, 0x90, 0xd7, 0xaa, 0x20, 0xd7, 0x9b, 0xd7, 0x9c, 0x20, 0xd7, 0x99, 0xd7, 0xaa, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x95, 0xd7, 0xaa, 0x20, 0xd7, 0x94, 0xd7, 0xa9, 0xd7, 0x99, 0xd7, 0x9e, 0xd7, 0x95, 0xd7, 0xa9, 0x20, 0xd7, 0x91, 0xd7, 0xa7, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0x9c, 0xd7, 0x99, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x99, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0x95, 0xd7, 0x9e, 0xd7, 0x95, 0xd7, 0xa1, 0xd7, 0x99, 0xd7, 0xa3, 0x20, 0xd7, 0xa2, 0xd7, 0x9c, 0xd7, 0x99, 0xd7, 0x94, 0xd7, 0x9d, 0x2c, 0x20, 0xd7, 0x91, 0xd7, 0x99, 0xd7, 0x9f, 0x20, 0xd7, 0x94, 0xd7, 0x99, 0xd7, 0xaa, 0xd7, 0xa8, 0x2c, 0x20, 0xd7, 0x92, 0xd7, 0x9d, 0x20, 0xd7, 0x97, 0xd7, 0x99, 0xd7, 0xa1, 0xd7, 0x9b, 0xd7, 0x95, 0xd7, 0x9f, 0x20, 0xd7, 0x91, 0xd7, 0x96, 0xd7, 0x99, 0xd7, 0x9b, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0x9f, 0x2c, 0x20, 0xd7, 0xa2, 0xd7, 0x9e, 0xd7, 0x99, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0xaa, 0x20, 0xd7, 0x91, 0xd7, 0xa4, 0xd7, 0xa0, 0xd7, 0x99, 0x20, 0xd7, 0x90, 0xd7, 0x99, 0xd7, 0x91, 0xd7, 0x95, 0xd7, 0x93, 0x20, 0xd7, 0x90, 0xd7, 0x95, 0x20, 0xd7, 0x94, 0xd7, 0xa9, 0xd7, 0x97, 0xd7, 0xaa, 0xd7, 0xaa, 0x20, 0xd7, 0x91, 0xd7, 0xaa, 0xd7, 0x99, 0xd7, 0x9d, 0x20, 0xd7, 0x95, 0xd7, 0xaa, 0xd7, 0x90, 0xd7, 0x99, 0xd7, 0x9e, 0xd7, 0x95, 0xd7, 0xaa, 0x20, 0xd7, 0x9c, 0xd7, 0x90, 0xd7, 0x97, 0xd7, 0x95, 0xd7, 0xa8, 0x20, 0xd7, 0x9c, 0x2d, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2e, 0x20, 0xd7, 0x94, 0x2d, 0x49, 0x45, 0x54, 0x46, 0x20, 0xd7, 0x9e, 0xd7, 0xa2, 0xd7, 0x93, 0xd7, 0x99, 0xd7, 0xa3, 0x20, 0xd7, 0x91, 0xd7, 0x91, 0xd7, 0x99, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0xa8, 0x20, 0xd7, 0x90, 0xd7, 0xaa, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0xd7, 0x95, 0xd7, 0x9e, 0xd7, 0x97, 0xd7, 0x99, 0xd7, 0x99, 0xd7, 0x91, 0x20, 0xd7, 0x9b, 0xd7, 0x9c, 0x20, 0xd7, 0xa4, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0x98, 0xd7, 0x95, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0x9c, 0x20, 0xd7, 0x90, 0xd7, 0x99, 0xd7, 0xa0, 0xd7, 0x98, 0xd7, 0xa8, 0xd7, 0xa0, 0xd7, 0x98, 0x20, 0xd7, 0x9c, 0xd7, 0xaa, 0xd7, 0x9e, 0xd7, 0x95, 0xd7, 0x9a, 0x20, 0xd7, 0x91, 0xd7, 0x95, 0x2c, 0x20, 0xd7, 0x95, 0xd7, 0x9b, 0xd7, 0x9f, 0x20, 0xd7, 0xa7, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0xa1, 0xd7, 0x95, 0xd7, 0xa8, 0xd7, 0xa6, 0xd7, 0x99, 0xd7, 0x95, 0xd7, 0x9d, 0x20, 0xd7, 0x94, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x90, 0xd7, 0xa8, 0x20, 0xd7, 0x94, 0xd7, 0x90, 0xd7, 0x9c, 0xd7, 0xa7, 0xd7, 0x98, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x99, 0x2c, 0x20, 0xd7, 0x94, 0x2d, 0x49, 0x4d, 0x43, 0x2c, 0x20, 0xd7, 0x9e, 0xd7, 0x9e, 0xd7, 0x9c, 0xd7, 0x99, 0xd7, 0xa5, 0x20, 0xd7, 0xa9, 0xd7, 0x9b, 0xd7, 0x9c, 0x20, 0xd7, 0xaa, 0xd7, 0x95, 0xd7, 0x9b, 0xd7, 0xa0, 0xd7, 0xaa, 0x20, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x90, 0xd7, 0xa8, 0x20, 0xd7, 0x90, 0xd7, 0x9c, 0xd7, 0xa7, 0xd7, 0x98, 0xd7, 0xa8, 0xd7, 0x95, 0xd7, 0xa0, 0xd7, 0x99, 0x20, 0xd7, 0xaa, 0xd7, 0x95, 0xd7, 0x9b, 0xd7, 0x9c, 0x20, 0xd7, 0x9c, 0xd7, 0x94, 0xd7, 0xa6, 0xd7, 0x99, 0xd7, 0x92, 0x20, 0xd7, 0x95, 0xd7, 0x9c, 0xd7, 0x99, 0xd7, 0xa6, 0xd7, 0x95, 0xd7, 0xa8, 0x20, 0xd7, 0x93, 0xd7, 0x95, 0xd7, 0x90, 0xd7, 0xa8, 0x20, 0xd7, 0x91, 0xd7, 0x90, 0xd7, 0x9e, 0xd7, 0xa6, 0xd7, 0xa2, 0xd7, 0x95, 0xd7, 0xaa, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x2e, 0x0a, 0x0a, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHeUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('he'));
    });

    test('detect he windows-1255', () {
      final detector = UCharDet();
      // dart format off
      final kHeWindows1255 = Uint8List.fromList([0xf2, 0xc4, 0xe1, 0xc0, 0xf8, 0xc4, 0xe9, 0xfa, 0x20, 0xe4, 0xe9, 0xe0, 0x20, 0xf9, 0xf4, 0xe4, 0x20, 0xf9, 0xee, 0xe9, 0xfa, 0x2c, 0x20, 0xee, 0xee, 0xf9, 0xf4, 0xe7, 0xfa, 0x20, 0xe4, 0xf9, 0xf4, 0xe5, 0xfa, 0x20, 0xe4, 0xe0, 0xf4, 0xf8, 0xe5, 0x2d, 0xe0, 0xf1, 0xe9, 0xe0, 0xfa, 0xe9, 0xe5, 0xfa, 0x2c, 0x20, 0xe4, 0xe9, 0xe3, 0xe5, 0xf2, 0xe4, 0x20, 0xeb, 0xf9, 0xf4, 0xfa, 0xed, 0x20, 0xf9, 0xec, 0x20, 0xe4, 0xe9, 0xe4, 0xe5, 0xe3, 0xe9, 0xed, 0x20, 0xe5, 0xf9, 0xec, 0x20, 0xe4, 0xf9, 0xe5, 0xee, 0xf8, 0xe5, 0xf0, 0xe9, 0xed, 0x2c, 0x20, 0xe0, 0xf9, 0xf8, 0x20, 0xf0, 0xe9, 0xe1, 0x20, 0xee, 0xe5, 0xe3, 0xf8, 0xf0, 0xe9, 0x20, 0xf9, 0xec, 0xe4, 0x20, 0xee, 0xf9, 0xee, 0xf9, 0x20, 0xeb, 0xf9, 0xf4, 0xe4, 0x20, 0xe4, 0xf8, 0xf9, 0xee, 0xe9, 0xfa, 0x20, 0xe5, 0xe4, 0xf2, 0xe9, 0xf7, 0xf8, 0xe9, 0xfa, 0x20, 0xf9, 0xec, 0x20, 0xee, 0xe3, 0xe9, 0xf0, 0xfa, 0x20, 0xe9, 0xf9, 0xf8, 0xe0, 0xec, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHeWindows1255);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1255'),
      );
      expect(candidates.first.language?.iso6391Code, equals('he'));
    });

    test('detect hi utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kHiUtf8 = Uint8List.fromList([0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0x20, 0x28, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x80, 0x3a, 0x20, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x20, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x50, 0x61, 0x72, 0x6b, 0x3b, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0x2e, 0x3a, 0x20, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0x29, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0x2c, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe, 0x2d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0x2d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0x93, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x96, 0x20, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0x20, 0x28, 0x34, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0x32, 0x29, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xab, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0x20, 0x28, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0x2d, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0x29, 0x2c, 0x20, 0x31, 0x33, 0x30, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0x9d, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x2c, 0x20, 0x31, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa7, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0x20, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0x20, 0x31, 0x36, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb2, 0x20, 0x28, 0x34, 0x31, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0x32, 0x29, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0x2c, 0x20, 0x22, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0x91, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0x20, 0xe0, 0xa4, 0xa6, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f, 0x20, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xae, 0x22, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xaa, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x5b, 0x31, 0x5d, 0x0a, 0x0a, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xaa, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0x2d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x81, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0x20, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x82, 0x2c, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb8, 0x2c, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0x2d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0x20, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xad, 0x20, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0x20, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x88, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0x2c, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x2c, 0x20, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x9b, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xaa, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa1, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x88, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa3, 0x2d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa1, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa5, 0xa4, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xae, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x20, 0x31, 0x39, 0x36, 0x34, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x9b, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0x20, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x20, 0x31, 0x39, 0x33, 0x36, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0x36, 0x34, 0x20, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0x20, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0xa5, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0x20, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa1, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88, 0xe0, 0xa5, 0xa4, 0x5b, 0x32, 0x5d, 0x5b, 0x33, 0x5d, 0x20, 0x32, 0x30, 0x30, 0x33, 0x20, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80, 0x20, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb9, 0x20, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97, 0x20, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0x97, 0x20, 0x31, 0x33, 0x36, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0x20, 0x28, 0x35, 0x35, 0x30, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0x32, 0x29, 0x2c, 0x20, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0x20, 0x31, 0x33, 0x25, 0x20, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0x20, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0x20, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0x20, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0x20, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa5, 0xa4, 0x5b, 0x34, 0x5d, 0x20, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHiUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('hi'));
    });

    test('detect hr ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kHrIbm852 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x9f, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0x86, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xa7, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr iso-8859-13', () {
      final detector = UCharDet();
      // dart format off
      final kHrIso885913 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0xe8, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0xe3, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xfe, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrIso885913);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-13'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr iso-8859-16', () {
      final detector = UCharDet();
      // dart format off
      final kHrIso885916 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0xb9, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0xe5, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xb8, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrIso885916);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-16'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kHrIso88592 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0xe8, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0xe6, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xbe, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr mac-centraleurope', () {
      final detector = UCharDet();
      // dart format off
      final kHrMaccentraleurope = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x8b, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0x8d, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xec, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrMaccentraleurope);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-centraleurope'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kHrUtf8 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0xc4, 0x8d, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0xc4, 0x87, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0xc5, 0xbe, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hr windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kHrWindows1250 = Uint8List.fromList([0x42, 0x72, 0x65, 0x6b, 0x69, 0x6e, 0x6a, 0x61, 0x20, 0x28, 0x6c, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x72, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x29, 0x20, 0x6a, 0x65, 0x20, 0x62, 0x6a, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0xe8, 0x6e, 0x61, 0x20, 0x76, 0x72, 0x73, 0x74, 0x61, 0x20, 0x64, 0x72, 0x76, 0x65, 0xe6, 0x61, 0x20, 0x69, 0x7a, 0x20, 0x70, 0x6f, 0x72, 0x6f, 0x64, 0x69, 0x63, 0x65, 0x0a, 0x52, 0x6f, 0x73, 0x61, 0x63, 0x65, 0x61, 0x65, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x72, 0x6f, 0x64, 0x6e, 0x6f, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x6e, 0x61, 0x20, 0x75, 0x20, 0x7a, 0x61, 0x70, 0x61, 0x64, 0x6e, 0x6f, 0x6a, 0x2c, 0x20, 0x73, 0x72, 0x65, 0x64, 0x6e, 0x6a, 0x6f, 0x6a, 0x20, 0x69, 0x20, 0x6a, 0x75, 0x9e, 0x6e, 0x6f, 0x6a, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x69, 0x2c, 0x20, 0x73, 0x6a, 0x65, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x6a, 0x0a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x69, 0x2c, 0x20, 0x4b, 0x72, 0x69, 0x6d, 0x75, 0x2c, 0x20, 0x4d, 0x61, 0x6c, 0x6f, 0x6a, 0x20, 0x41, 0x7a, 0x69, 0x6a, 0x69, 0x2c, 0x20, 0x4b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x75, 0x20, 0x69, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6b, 0x61, 0x76, 0x6b, 0x61, 0x7a, 0x69, 0x6a, 0x69, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHrWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hr'));
    });

    test('detect hu iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kHuIso88592 = Uint8List.fromList([0x41, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x32, 0x20, 0x28, 0x68, 0x69, 0x76, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x61, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x32, 0x2c, 0x20, 0x72, 0xf6, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x20, 0xe9, 0x73, 0x20, 0x6e, 0x65, 0x6d, 0x20, 0x68, 0x69, 0x76, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x73, 0x61, 0x6e, 0x20, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x2d, 0x32, 0x29, 0x20, 0x61, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x65, 0x73, 0x20, 0x6b, 0x61, 0x72, 0x61, 0x6b, 0x74, 0x65, 0x72, 0x6b, 0xf3, 0x64, 0x6f, 0x6c, 0xe1, 0x73, 0x69, 0x20, 0x73, 0x7a, 0x61, 0x62, 0x76, 0xe1, 0x6e, 0x79, 0x20, 0x6d, 0xe1, 0x73, 0x6f, 0x64, 0x69, 0x6b, 0x20, 0x72, 0xe9, 0x73, 0x7a, 0x65, 0x2e, 0x20, 0x41, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x20, 0xe1, 0x6c, 0x74, 0x61, 0x6c, 0x20, 0x6b, 0x65, 0x74, 0x74, 0x65, 0x73, 0x20, 0x73, 0x7a, 0xe1, 0x6d, 0xfa, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x20, 0xe1, 0x62, 0xe9, 0x63, 0xe9, 0x6e, 0x65, 0x6b, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x7a, 0x65, 0x74, 0x74, 0x20, 0x31, 0x39, 0x31, 0x20, 0x6b, 0x61, 0x72, 0x61, 0x6b, 0x74, 0x65, 0x72, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x67, 0x79, 0x69, 0x6b, 0xe9, 0x6e, 0x65, 0x6b, 0x20, 0x65, 0x67, 0x79, 0x62, 0xe1, 0x6a, 0x74, 0x6f, 0x73, 0x20, 0x28, 0x6e, 0x79, 0x6f, 0x6c, 0x63, 0x62, 0x69, 0x74, 0x65, 0x73, 0x29, 0x20, 0x6b, 0xf3, 0x64, 0x6a, 0xe1, 0x74, 0x20, 0x61, 0x64, 0x6a, 0x61, 0x20, 0x6d, 0x65, 0x67, 0x2e, 0x20, 0x41, 0x20, 0x31, 0x39, 0x31, 0x20, 0x6b, 0x61, 0x72, 0x61, 0x6b, 0x74, 0x65, 0x72, 0x20, 0x6b, 0xf6, 0x7a, 0xf6, 0x74, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x67, 0x79, 0x61, 0x72, 0x20, 0xe9, 0x6b, 0x65, 0x7a, 0x65, 0x74, 0x65, 0x73, 0x20, 0x62, 0x65, 0x74, 0xfb, 0x20, 0x6d, 0x65, 0x67, 0x74, 0x61, 0x6c, 0xe1, 0x6c, 0x68, 0x61, 0x74, 0xf3, 0x20, 0x28, 0x61, 0x20, 0x73, 0x6f, 0x6b, 0x20, 0x6d, 0xe1, 0x73, 0x20, 0x6b, 0xe9, 0x73, 0x7a, 0x6c, 0x65, 0x74, 0x62, 0xf5, 0x6c, 0x20, 0x68, 0x69, 0xe1, 0x6e, 0x79, 0x7a, 0xf3, 0x20, 0xf5, 0x20, 0xe9, 0x73, 0x20, 0xfb, 0x20, 0x69, 0x73, 0x29, 0x2e, 0x0a, 0x0a, 0x41, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x5f, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x32, 0x3a, 0x31, 0x39, 0x38, 0x37, 0x20, 0x28, 0x6d, 0x69, 0x6d, 0x65, 0x20, 0x72, 0xf6, 0x76, 0x69, 0x64, 0xed, 0x74, 0xe9, 0x73, 0xe9, 0x62, 0xf5, 0x6c, 0x20, 0x69, 0x73, 0x6d, 0x65, 0x72, 0x74, 0x65, 0x62, 0x62, 0x20, 0x6e, 0x65, 0x76, 0xe9, 0x6e, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x32, 0x20, 0x28, 0x61, 0x7a, 0x20, 0x22, 0x49, 0x53, 0x4f, 0x22, 0x20, 0x75, 0x74, 0xe1, 0x6e, 0x20, 0x6b, 0xf6, 0x74, 0xf5, 0x6a, 0x65, 0x6c, 0x6c, 0x65, 0x6c, 0x29, 0x29, 0x20, 0x61, 0x7a, 0x20, 0x49, 0x41, 0x4e, 0x41, 0x2d, 0x6e, 0x61, 0x6b, 0x20, 0x65, 0x72, 0x72, 0x65, 0x20, 0x61, 0x20, 0x73, 0x7a, 0x61, 0x62, 0x76, 0xe1, 0x6e, 0x79, 0x72, 0x61, 0x20, 0xe9, 0x70, 0xfc, 0x6c, 0xf5, 0x20, 0x6b, 0x61, 0x72, 0x61, 0x6b, 0x74, 0x65, 0x72, 0x6b, 0xe9, 0x73, 0x7a, 0x6c, 0x65, 0x74, 0xe9, 0x6e, 0x65, 0x6b, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x6c, 0x79, 0x62, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x43, 0x30, 0x20, 0x28, 0x30, 0x78, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x31, 0x46, 0x29, 0x20, 0xe9, 0x73, 0x20, 0x61, 0x20, 0x43, 0x31, 0x20, 0x28, 0x30, 0x78, 0x38, 0x30, 0x2d, 0x30, 0x78, 0x39, 0x46, 0x29, 0x20, 0x72, 0xe9, 0x73, 0x7a, 0x20, 0x61, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x36, 0x34, 0x32, 0x39, 0x2d, 0x62, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x67, 0x68, 0x61, 0x74, 0xe1, 0x72, 0x6f, 0x7a, 0x6f, 0x74, 0x74, 0x20, 0x76, 0x65, 0x7a, 0xe9, 0x72, 0x6c, 0xf5, 0x6b, 0xf3, 0x64, 0x6f, 0x6b, 0x61, 0x74, 0x20, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6c, 0x6d, 0x61, 0x7a, 0x7a, 0x61, 0x2e, 0x20, 0x41, 0x7a, 0x20, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x36, 0x34, 0x32, 0x39, 0x2d, 0x62, 0x65, 0x6e, 0x20, 0xe9, 0x73, 0x20, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x62, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x67, 0x61, 0x64, 0x6f, 0x74, 0x74, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20, 0x73, 0x7a, 0x65, 0x6b, 0x76, 0x65, 0x6e, 0x63, 0x69, 0xe1, 0x6b, 0x61, 0x74, 0x20, 0x6e, 0x65, 0x6d, 0x20, 0x68, 0x61, 0x73, 0x7a, 0x6e, 0xe1, 0x6c, 0x6a, 0x61, 0x2e, 0x20, 0x54, 0x6f, 0x76, 0xe1, 0x62, 0x62, 0x69, 0x20, 0x69, 0x73, 0x6d, 0x65, 0x72, 0x74, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x69, 0x3a, 0x20, 0x49, 0x53, 0x4f, 0x5f, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x32, 0x2c, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x32, 0x2c, 0x20, 0x6c, 0x32, 0x20, 0xe9, 0x73, 0x20, 0x63, 0x73, 0x49, 0x53, 0x4f, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x32, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHuIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hu'));
    });

    test('detect hu utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kHuUtf8 = Uint8List.fromList([0x47, 0x69, 0x61, 0x63, 0x6f, 0x6d, 0x6f, 0x20, 0x50, 0x75, 0x63, 0x63, 0x69, 0x6e, 0x69, 0x20, 0x28, 0x4c, 0x75, 0x63, 0x63, 0x61, 0x2c, 0x20, 0x31, 0x38, 0x35, 0x38, 0x2e, 0x20, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x32, 0x32, 0x2e, 0x20, 0xe2, 0x80, 0x93, 0x20, 0x42, 0x72, 0xc3, 0xbc, 0x73, 0x73, 0x7a, 0x65, 0x6c, 0x2c, 0x20, 0x31, 0x39, 0x32, 0x34, 0x2e, 0x20, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x32, 0x39, 0x2e, 0x29, 0x20, 0x61, 0x20, 0x32, 0x30, 0x2e, 0x20, 0x73, 0x7a, 0xc3, 0xa1, 0x7a, 0x61, 0x64, 0x20, 0x65, 0x67, 0x79, 0x69, 0x6b, 0x20, 0x6c, 0x65, 0x67, 0x6e, 0xc3, 0xa9, 0x70, 0x73, 0x7a, 0x65, 0x72, 0xc5, 0xb1, 0x62, 0x62, 0x20, 0x6f, 0x6c, 0x61, 0x73, 0x7a, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x73, 0x7a, 0x65, 0x72, 0x7a, 0xc5, 0x91, 0x6a, 0x65, 0x2e, 0x20, 0x4d, 0xc5, 0xb1, 0x76, 0x65, 0x69, 0x62, 0x65, 0x6e, 0x20, 0x66, 0xc5, 0x91, 0x6b, 0xc3, 0xa9, 0x6e, 0x74, 0x20, 0x61, 0x7a, 0x20, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x20, 0xc3, 0xa9, 0x72, 0x7a, 0xc3, 0xa9, 0x73, 0x65, 0x6b, 0x72, 0x65, 0x20, 0xc3, 0xb6, 0x73, 0x73, 0x7a, 0x70, 0x6f, 0x6e, 0x74, 0x6f, 0x73, 0xc3, 0xad, 0x74, 0x6f, 0x74, 0x74, 0x3a, 0x20, 0x6b, 0x69, 0x73, 0x20, 0xc3, 0xb6, 0x72, 0xc3, 0xb6, 0x6d, 0xc3, 0xb6, 0x6b, 0x2c, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x20, 0x6b, 0x69, 0x73, 0x20, 0x65, 0x73, 0x65, 0x6d, 0xc3, 0xa9, 0x6e, 0x79, 0x65, 0x6b, 0x2c, 0x20, 0x6e, 0x61, 0x67, 0x79, 0x20, 0x73, 0x7a, 0x65, 0x6e, 0x76, 0x65, 0x64, 0xc3, 0xa9, 0x6c, 0x79, 0x65, 0x6b, 0x20, 0xc3, 0xa9, 0x73, 0x20, 0xc3, 0xa9, 0x72, 0x7a, 0x65, 0x6c, 0x6d, 0x65, 0x6b, 0x20, 0x6a, 0x65, 0x6c, 0x65, 0x6e, 0x6e, 0x65, 0x6b, 0x20, 0x6d, 0x65, 0x67, 0x2c, 0x20, 0x74, 0xc3, 0xb6, 0x62, 0x62, 0x6e, 0x79, 0x69, 0x72, 0x65, 0x20, 0x65, 0x67, 0x7a, 0x6f, 0x74, 0x69, 0x6b, 0x75, 0x73, 0x20, 0x6b, 0xc3, 0xb6, 0x72, 0x6e, 0x79, 0x65, 0x7a, 0x65, 0x74, 0x62, 0x65, 0x6e, 0x2e, 0x20, 0x48, 0xc5, 0x91, 0x73, 0x65, 0x69, 0x20, 0x68, 0xc3, 0xa9, 0x74, 0x6b, 0xc3, 0xb6, 0x7a, 0x6e, 0x61, 0x70, 0x69, 0x20, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x6b, 0x2e, 0x20, 0x41, 0x20, 0x42, 0x6f, 0x68, 0xc3, 0xa9, 0x6d, 0xc3, 0xa9, 0x6c, 0x65, 0x74, 0x20, 0x74, 0xc3, 0xbc, 0x64, 0xc5, 0x91, 0x62, 0x61, 0x6a, 0x6f, 0x73, 0x20, 0x4d, 0x69, 0x6d, 0x69, 0x6a, 0x65, 0x2c, 0x20, 0x61, 0x7a, 0x20, 0x65, 0x6c, 0x68, 0x61, 0x67, 0x79, 0x6f, 0x74, 0x74, 0x20, 0x50, 0x69, 0x6c, 0x6c, 0x61, 0x6e, 0x67, 0xc3, 0xb3, 0x6b, 0x69, 0x73, 0x61, 0x73, 0x73, 0x7a, 0x6f, 0x6e, 0x79, 0x2c, 0x20, 0x61, 0x7a, 0x20, 0xc3, 0xb6, 0x6e, 0x67, 0x79, 0x69, 0x6c, 0x6b, 0x6f, 0x73, 0x20, 0x54, 0x6f, 0x73, 0x63, 0x61, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x7a, 0x65, 0x72, 0x65, 0x6c, 0x65, 0x6d, 0x20, 0xc3, 0xa1, 0x6c, 0x64, 0x6f, 0x7a, 0x61, 0x74, 0x61, 0x69, 0x2c, 0x20, 0x61, 0x6b, 0x69, 0x6b, 0x20, 0x76, 0xc3, 0xa9, 0x67, 0xc3, 0xbc, 0x6c, 0x20, 0x61, 0x7a, 0x20, 0xc3, 0xa9, 0x6c, 0x65, 0x74, 0xc3, 0xbc, 0x6b, 0x6b, 0x65, 0x6c, 0x20, 0x66, 0x69, 0x7a, 0x65, 0x74, 0x6e, 0x65, 0x6b, 0x2e, 0x0a, 0x0a, 0x50, 0x75, 0x63, 0x63, 0x69, 0x6e, 0x69, 0x20, 0x6f, 0x70, 0x65, 0x72, 0xc3, 0xa1, 0x69, 0x20, 0x74, 0xc3, 0xb6, 0x62, 0x62, 0x6e, 0x79, 0x69, 0x72, 0x65, 0x20, 0x74, 0x72, 0x61, 0x67, 0x69, 0x6b, 0x75, 0x73, 0x20, 0x62, 0x65, 0x66, 0x65, 0x6a, 0x65, 0x7a, 0xc3, 0xa9, 0x73, 0xc5, 0xb1, 0x20, 0x64, 0x61, 0x72, 0x61, 0x62, 0x6f, 0x6b, 0x2e, 0x20, 0x41, 0x20, 0x4e, 0x79, 0x75, 0x67, 0x61, 0x74, 0x20, 0x6c, 0xc3, 0xa1, 0x6e, 0x79, 0x61, 0x20, 0xc3, 0xa9, 0x73, 0x20, 0x61, 0x20, 0x47, 0x69, 0x61, 0x6e, 0x6e, 0x69, 0x20, 0x53, 0x63, 0x68, 0x69, 0x63, 0x63, 0x68, 0x69, 0x20, 0x63, 0xc3, 0xad, 0x6d, 0xc5, 0xb1, 0x20, 0x76, 0xc3, 0xad, 0x67, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x20, 0x63, 0x73, 0x65, 0x6c, 0x65, 0x6b, 0x6d, 0xc3, 0xa9, 0x6e, 0x79, 0x65, 0x20, 0x61, 0x7a, 0x6f, 0x6e, 0x62, 0x61, 0x6e, 0x20, 0x62, 0x6f, 0x6c, 0x64, 0x6f, 0x67, 0x20, 0x76, 0xc3, 0xa9, 0x67, 0x65, 0x74, 0x20, 0xc3, 0xa9, 0x72, 0x3b, 0x20, 0x74, 0x72, 0x61, 0x67, 0x69, 0x6b, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x61, 0x20, 0x75, 0x74, 0xc3, 0xa1, 0x6e, 0x20, 0x61, 0x7a, 0x20, 0x75, 0x74, 0x6f, 0x6c, 0x73, 0xc3, 0xb3, 0x20, 0x6d, 0xc5, 0xb1, 0x2c, 0x20, 0x61, 0x20, 0x54, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x74, 0x20, 0x69, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHuUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('hu'));
    });

    test('detect hu windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kHuWindows1250 = Uint8List.fromList([0x4a, 0x65, 0x6c, 0x6c, 0x65, 0x6d, 0x7a, 0xf5, 0x20, 0x72, 0xe1, 0x20, 0x61, 0x7a, 0x20, 0x65, 0x6c, 0x73, 0xf5, 0x20, 0x73, 0x7a, 0xf3, 0x74, 0x61, 0x67, 0x72, 0x61, 0x20, 0x65, 0x73, 0xf5, 0x20, 0x68, 0x61, 0x6e, 0x67, 0x73, 0xfa, 0x6c, 0x79, 0x20, 0x28, 0x65, 0x62, 0x62, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6e, 0x6e, 0x75, 0x67, 0x6f, 0x72, 0x20, 0x6e, 0x79, 0x65, 0x6c, 0x76, 0x65, 0x6b, 0x20, 0xe9, 0x73, 0x20, 0x61, 0x20, 0x73, 0x7a, 0x6c, 0x6f, 0x76, 0xe1, 0x6b, 0x20, 0x6e, 0x79, 0x65, 0x6c, 0x76, 0x20, 0x68, 0x61, 0x73, 0x6f, 0x6e, 0x6c, 0xed, 0x74, 0x61, 0x6e, 0x61, 0x6b, 0x20, 0x68, 0x6f, 0x7a, 0x7a, 0xe1, 0x29, 0x2c, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x67, 0xe1, 0x6e, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x2d, 0x68, 0x61, 0x72, 0x6d, 0xf3, 0x6e, 0x69, 0x61, 0x20, 0x28, 0x62, 0x61, 0x72, 0x6e, 0x75, 0x6c, 0xe1, 0x73, 0x6f, 0x74, 0x6f, 0x6b, 0x72, 0xf3, 0x6c, 0x20, 0x96, 0x20, 0x7a, 0xf6, 0x6c, 0x64, 0xfc, 0x6c, 0xe9, 0x73, 0x65, 0x74, 0x65, 0x6b, 0x72, 0xf5, 0x6c, 0x29, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x61, 0x6d, 0x69, 0x6e, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x67, 0xe1, 0x6e, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x2d, 0x68, 0x6f, 0x73, 0x73, 0x7a, 0xfa, 0x73, 0xe1, 0x67, 0x20, 0xe9, 0x73, 0x20, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x67, 0x73, 0xfa, 0x6c, 0x79, 0x20, 0x65, 0x67, 0x79, 0x6d, 0xe1, 0x73, 0x74, 0xf3, 0x6c, 0x20, 0x66, 0xfc, 0x67, 0x67, 0x65, 0x74, 0x6c, 0x65, 0x6e, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x20, 0x28, 0x61, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x73, 0x7a, 0x69, 0x6e, 0x74, 0x65, 0x20, 0x65, 0x67, 0x79, 0x65, 0x64, 0xfc, 0x6c, 0x69, 0x6b, 0xe9, 0x6e, 0x74, 0x20, 0x6c, 0x65, 0x68, 0x65, 0x74, 0xf5, 0x76, 0xe9, 0x20, 0x74, 0x65, 0x73, 0x7a, 0x69, 0x20, 0x61, 0x7a, 0x20, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x49, 0x64, 0xf5, 0x6d, 0xe9, 0x72, 0x74, 0xe9, 0x6b, 0x65, 0x73, 0x20, 0x76, 0x65, 0x72, 0x73, 0x65, 0x6c, 0xe9, 0x73, 0x20, 0x61, 0x6c, 0x6b, 0x61, 0x6c, 0x6d, 0x61, 0x7a, 0xe1, 0x73, 0xe1, 0x74, 0x29, 0x2e, 0x20, 0x48, 0x61, 0x6e, 0x67, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x7a, 0x65, 0x72, 0xe9, 0x72, 0x65, 0x20, 0x65, 0x7a, 0x65, 0x6e, 0x6b, 0xed, 0x76, 0xfc, 0x6c, 0x20, 0x61, 0x20, 0x6c, 0xe1, 0x67, 0x79, 0x20, 0x6d, 0xe1, 0x73, 0x73, 0x61, 0x6c, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x6b, 0x20, 0x28, 0x6e, 0x79, 0x2c, 0x20, 0x74, 0x79, 0x2c, 0x20, 0x67, 0x79, 0x29, 0x2c, 0x20, 0x61, 0x7a, 0x20, 0x61, 0x73, 0x70, 0x69, 0x72, 0xe1, 0x6c, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x20, 0x7a, 0xe1, 0x72, 0x68, 0x61, 0x6e, 0x67, 0x6f, 0x6b, 0x20, 0x28, 0x68, 0x20, 0x6e, 0xe9, 0x6c, 0x6b, 0xfc, 0x6c, 0x20, 0x65, 0x6a, 0x74, 0x65, 0x74, 0x74, 0x20, 0x70, 0x2c, 0x20, 0x74, 0x2c, 0x20, 0x6b, 0x2c, 0x20, 0x73, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x6e, 0x20, 0x70, 0xe9, 0x6c, 0x64, 0xe1, 0x75, 0x6c, 0x20, 0x61, 0x20, 0x67, 0x65, 0x72, 0x6d, 0xe1, 0x6e, 0x20, 0x6e, 0x79, 0x65, 0x6c, 0x76, 0x65, 0x6b, 0x6b, 0x65, 0x6c, 0x29, 0x20, 0xe9, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61, 0x6c, 0x61, 0x74, 0xe1, 0x6c, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x67, 0xe1, 0x6e, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x6b, 0x20, 0x65, 0x6c, 0xf5, 0x74, 0x74, 0x69, 0x20, 0x6b, 0x65, 0x6d, 0xe9, 0x6e, 0x79, 0x20, 0x6d, 0xe1, 0x73, 0x73, 0x61, 0x6c, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x6b, 0x20, 0x6a, 0x65, 0x6c, 0x65, 0x6e, 0x6c, 0xe9, 0x74, 0x65, 0x20, 0x6a, 0x65, 0x6c, 0x6c, 0x65, 0x6d, 0x7a, 0xf5, 0x20, 0x28, 0x61, 0x7a, 0x61, 0x7a, 0x20, 0x6c, 0x65, 0x68, 0x65, 0x74, 0x73, 0xe9, 0x67, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x2c, 0x20, 0x74, 0x69, 0x20, 0x73, 0x74, 0x62, 0x2e, 0x20, 0x68, 0x61, 0x6e, 0x67, 0x6b, 0x61, 0x70, 0x63, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x2c, 0x20, 0x6e, 0x79, 0x65, 0x2c, 0x20, 0x74, 0x79, 0x69, 0x20, 0x68, 0x65, 0x6c, 0x79, 0x65, 0x74, 0x74, 0x3b, 0x20, 0x73, 0x7a, 0x65, 0x6d, 0x62, 0x65, 0x6e, 0x20, 0x70, 0xe9, 0x6c, 0x64, 0xe1, 0x75, 0x6c, 0x20, 0x61, 0x7a, 0x20, 0x6f, 0x72, 0x6f, 0x73, 0x73, 0x7a, 0x61, 0x6c, 0x29, 0x2e, 0x20, 0x4e, 0x69, 0x6e, 0x63, 0x73, 0x65, 0x6e, 0x65, 0x6b, 0x20, 0x62, 0x65, 0x6e, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0xf3, 0x64, 0x69, 0x20, 0x64, 0x69, 0x66, 0x74, 0x6f, 0x6e, 0x67, 0x75, 0x73, 0x6f, 0x6b, 0x20, 0x28, 0x6d, 0x69, 0x6e, 0x74, 0x20, 0x70, 0xe9, 0x6c, 0x64, 0xe1, 0x75, 0x6c, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6e, 0x6e, 0x62, 0x65, 0x6e, 0x20, 0x76, 0x61, 0x67, 0x79, 0x20, 0x6e, 0xe9, 0x6d, 0x65, 0x74, 0x62, 0x65, 0x6e, 0x29, 0x20, 0xe9, 0x73, 0x20, 0x72, 0x65, 0x64, 0x75, 0x6b, 0xe1, 0x6c, 0x74, 0x2c, 0x20, 0x76, 0x61, 0x67, 0x79, 0x69, 0x73, 0x20, 0x84, 0x65, 0x6c, 0x6e, 0x79, 0x65, 0x6c, 0x74, 0x94, 0x20, 0x6d, 0x61, 0x67, 0xe1, 0x6e, 0x68, 0x61, 0x6e, 0x67, 0x7a, 0xf3, 0x6b, 0x20, 0x28, 0x6d, 0x69, 0x6e, 0x74, 0x20, 0x70, 0xe9, 0x6c, 0x64, 0xe1, 0x75, 0x6c, 0x20, 0x61, 0x7a, 0x20, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x62, 0x61, 0x6e, 0x2c, 0x20, 0x6e, 0xe9, 0x6d, 0x65, 0x74, 0x62, 0x65, 0x6e, 0x29, 0x2e, 0x20, 0x41, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0xe1, 0x6c, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x67, 0x79, 0x61, 0x72, 0x20, 0x61, 0x20, 0x68, 0x61, 0x6e, 0x67, 0x20, 0x28, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x20, 0x73, 0x76, 0xe9, 0x64, 0x62, 0x65, 0x6e, 0x20, 0xe9, 0x73, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x7a, 0x73, 0xe1, 0x62, 0x61, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x67, 0x76, 0x61, 0x6e, 0x29, 0x20, 0x6e, 0x65, 0x68, 0xe9, 0x7a, 0x73, 0xe9, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x6b, 0x6f, 0x7a, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x6e, 0x79, 0x65, 0x6c, 0x76, 0xfc, 0x6e, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x61, 0x6e, 0x75, 0x6c, 0xf3, 0x6b, 0x6e, 0x61, 0x6b, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kHuWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('hu'));
    });

    test('detect it iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kItIso88591 = Uint8List.fromList([0x4c, 0x27, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x61, 0x20, 0xe8, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x69, 0x74, 0x75, 0x69, 0x74, 0x61, 0x20, 0x64, 0x61, 0x6c, 0x6c, 0x27, 0x69, 0x6e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x65, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x20, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x20, 0x69, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x6e, 0x6f, 0x20, 0x64, 0x65, 0x69, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x20, 0x28, 0x35, 0x36, 0x38, 0x2d, 0x37, 0x37, 0x34, 0x29, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x65, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x7a, 0x61, 0x20, 0x6e, 0x65, 0x6c, 0x6c, 0x27, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x20, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x6f, 0x20, 0x61, 0x6c, 0x20, 0x58, 0x2d, 0x58, 0x49, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x20, 0x28, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x65, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x69, 0x20, 0x72, 0x65, 0x20, 0x65, 0x20, 0x64, 0x61, 0x69, 0x20, 0x64, 0x75, 0x63, 0x68, 0x69, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x2e, 0x0a, 0x4c, 0x27, 0x61, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0xe0, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x20, 0x73, 0x76, 0x69, 0x6c, 0x75, 0x70, 0x70, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x61, 0x69, 0x6f, 0x72, 0x20, 0xe8, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x70, 0x65, 0x72, 0x64, 0x75, 0x74, 0x61, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x20, 0x70, 0x69, 0xf9, 0x20, 0x61, 0x20, 0x63, 0x61, 0x75, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x20, 0x72, 0x69, 0x63, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x20, 0x64, 0x65, 0x67, 0x6c, 0x69, 0x20, 0x65, 0x64, 0x69, 0x66, 0x69, 0x63, 0x69, 0x20, 0x73, 0x61, 0x63, 0x72, 0x69, 0x20, 0x65, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x20, 0x65, 0x72, 0x65, 0x74, 0x74, 0x69, 0x20, 0x74, 0x72, 0x61, 0x20, 0x56, 0x49, 0x49, 0x20, 0x65, 0x20, 0x56, 0x49, 0x49, 0x49, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x2e, 0x20, 0x41, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0x69, 0x6c, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x69, 0x65, 0x74, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x6f, 0x20, 0x64, 0x69, 0x0a, 0x43, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x46, 0x72, 0x69, 0x75, 0x6c, 0x69, 0x2c, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x6f, 0x2c, 0x20, 0x67, 0x6c, 0x69, 0x20, 0x65, 0x64, 0x69, 0x66, 0x69, 0x63, 0x69, 0x20, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x20, 0x65, 0x0a, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x73, 0x69, 0x20, 0x64, 0x69, 0x20, 0x50, 0x61, 0x76, 0x69, 0x61, 0x2c, 0x20, 0x4d, 0x6f, 0x6e, 0x7a, 0x61, 0x20, 0x6f, 0x20, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0xe0, 0x20, 0x73, 0x6f, 0x6e, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x20, 0x61, 0x6d, 0x70, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x6e, 0x65, 0x67, 0x67, 0x69, 0x61, 0x74, 0x69, 0x0a, 0x6e, 0x65, 0x69, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x69, 0x20, 0x73, 0x65, 0x67, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x2e, 0x20, 0x41, 0x6e, 0x63, 0x6f, 0x72, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x65, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x6e, 0x6f, 0x20, 0x63, 0x6f, 0x73, 0xec, 0x20, 0x73, 0x6f, 0x6c, 0x74, 0x61, 0x6e, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x63, 0x68, 0x65, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x0a, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x63, 0x68, 0xe9, 0x20, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x67, 0x6c, 0x69, 0x20, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x69, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x0a, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x20, 0x42, 0x72, 0x65, 0x73, 0x63, 0x69, 0x61, 0x29, 0x20, 0x2d, 0x2c, 0x20, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x63, 0x68, 0xe9, 0x20, 0x70, 0x65, 0x72, 0x69, 0x66, 0x65, 0x72, 0x69, 0x63, 0x68, 0x65, 0x20, 0x65, 0x20, 0x64, 0x69, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x74, 0x65, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x20, 0x4d, 0x61, 0x72, 0x69, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x73, 0x20, 0x61, 0x20, 0x43, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x73, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x2e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x7a, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x67, 0x69, 0x6f, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x20, 0x61, 0x6c, 0x6c, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x20, 0x72, 0x69, 0x74, 0x72, 0x6f, 0x76, 0x61, 0x6e, 0x6f, 0x2c, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x63, 0x65, 0x2c, 0x20, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x3a, 0x20, 0x61, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x6f, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x20, 0x53, 0x6f, 0x66, 0x69, 0x61, 0x2c, 0x20, 0x75, 0x6e, 0x20, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x4d, 0x75, 0x72, 0x61, 0x20, 0x65, 0x0a, 0x6c, 0x61, 0x20, 0x52, 0x6f, 0x63, 0x63, 0x61, 0x20, 0x64, 0x65, 0x69, 0x20, 0x52, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x2c, 0x20, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x20, 0x65, 0x73, 0x65, 0x6d, 0x70, 0x69, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x20, 0x64, 0x69, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x61, 0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x65, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x61, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x7a, 0x65, 0x20, 0x73, 0x69, 0x20, 0x73, 0x6f, 0x6e, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x20, 0x64, 0x65, 0x6c, 0x0a, 0x64, 0x75, 0x63, 0x61, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x6e, 0x6f, 0x20, 0x65, 0x20, 0x61, 0x20, 0x53, 0x70, 0x6f, 0x6c, 0x65, 0x74, 0x6f, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kItIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('it'));
    });

    test('detect it utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kItUtf8 = Uint8List.fromList([0x4c, 0x27, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x61, 0x20, 0xc3, 0xa8, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x69, 0x74, 0x75, 0x69, 0x74, 0x61, 0x20, 0x64, 0x61, 0x6c, 0x6c, 0x27, 0x69, 0x6e, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x65, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x20, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x20, 0x69, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x6e, 0x6f, 0x20, 0x64, 0x65, 0x69, 0x20, 0x4c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x20, 0x28, 0x35, 0x36, 0x38, 0x2d, 0x37, 0x37, 0x34, 0x29, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x65, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x7a, 0x61, 0x20, 0x6e, 0x65, 0x6c, 0x6c, 0x27, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x20, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x6f, 0x20, 0x61, 0x6c, 0x20, 0x58, 0x2d, 0x58, 0x49, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x20, 0x28, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x65, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x69, 0x20, 0x72, 0x65, 0x20, 0x65, 0x20, 0x64, 0x61, 0x69, 0x20, 0x64, 0x75, 0x63, 0x68, 0x69, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x2e, 0x0a, 0x4c, 0x27, 0x61, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0xc3, 0xa0, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x20, 0x73, 0x76, 0x69, 0x6c, 0x75, 0x70, 0x70, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x61, 0x69, 0x6f, 0x72, 0x20, 0xc3, 0xa8, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x70, 0x65, 0x72, 0x64, 0x75, 0x74, 0x61, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x20, 0x70, 0x69, 0xc3, 0xb9, 0x20, 0x61, 0x20, 0x63, 0x61, 0x75, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x20, 0x72, 0x69, 0x63, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x7a, 0x69, 0x6f, 0x6e, 0x69, 0x20, 0x64, 0x65, 0x67, 0x6c, 0x69, 0x20, 0x65, 0x64, 0x69, 0x66, 0x69, 0x63, 0x69, 0x20, 0x73, 0x61, 0x63, 0x72, 0x69, 0x20, 0x65, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x61, 0x6e, 0x69, 0x20, 0x65, 0x72, 0x65, 0x74, 0x74, 0x69, 0x20, 0x74, 0x72, 0x61, 0x20, 0x56, 0x49, 0x49, 0x20, 0x65, 0x20, 0x56, 0x49, 0x49, 0x49, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x2e, 0x20, 0x41, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0x69, 0x6c, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x69, 0x65, 0x74, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x6f, 0x20, 0x64, 0x69, 0x0a, 0x43, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x46, 0x72, 0x69, 0x75, 0x6c, 0x69, 0x2c, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x6f, 0x2c, 0x20, 0x67, 0x6c, 0x69, 0x20, 0x65, 0x64, 0x69, 0x66, 0x69, 0x63, 0x69, 0x20, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x20, 0x65, 0x0a, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x73, 0x69, 0x20, 0x64, 0x69, 0x20, 0x50, 0x61, 0x76, 0x69, 0x61, 0x2c, 0x20, 0x4d, 0x6f, 0x6e, 0x7a, 0x61, 0x20, 0x6f, 0x20, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0xc3, 0xa0, 0x20, 0x73, 0x6f, 0x6e, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x20, 0x61, 0x6d, 0x70, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x6e, 0x65, 0x67, 0x67, 0x69, 0x61, 0x74, 0x69, 0x0a, 0x6e, 0x65, 0x69, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x69, 0x20, 0x73, 0x65, 0x67, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x2e, 0x20, 0x41, 0x6e, 0x63, 0x6f, 0x72, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x65, 0x20, 0x72, 0x69, 0x6d, 0x61, 0x6e, 0x67, 0x6f, 0x6e, 0x6f, 0x20, 0x63, 0x6f, 0x73, 0xc3, 0xac, 0x20, 0x73, 0x6f, 0x6c, 0x74, 0x61, 0x6e, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x63, 0x68, 0x65, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x0a, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x63, 0x68, 0xc3, 0xa9, 0x20, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x67, 0x6c, 0x69, 0x20, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x69, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x0a, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x20, 0x42, 0x72, 0x65, 0x73, 0x63, 0x69, 0x61, 0x29, 0x20, 0x2d, 0x2c, 0x20, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x63, 0x68, 0xc3, 0xa9, 0x20, 0x70, 0x65, 0x72, 0x69, 0x66, 0x65, 0x72, 0x69, 0x63, 0x68, 0x65, 0x20, 0x65, 0x20, 0x64, 0x69, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x74, 0x65, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x20, 0x2d, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x20, 0x4d, 0x61, 0x72, 0x69, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x73, 0x20, 0x61, 0x20, 0x43, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x73, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x2e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x7a, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x67, 0x69, 0x6f, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x20, 0x61, 0x6c, 0x6c, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x20, 0x72, 0x69, 0x74, 0x72, 0x6f, 0x76, 0x61, 0x6e, 0x6f, 0x2c, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x63, 0x65, 0x2c, 0x20, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x69, 0x61, 0x20, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x3a, 0x20, 0x61, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x6f, 0x20, 0x6c, 0x61, 0x20, 0x63, 0x68, 0x69, 0x65, 0x73, 0x61, 0x20, 0x64, 0x69, 0x20, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x20, 0x53, 0x6f, 0x66, 0x69, 0x61, 0x2c, 0x20, 0x75, 0x6e, 0x20, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x6c, 0x65, 0x20, 0x4d, 0x75, 0x72, 0x61, 0x20, 0x65, 0x0a, 0x6c, 0x61, 0x20, 0x52, 0x6f, 0x63, 0x63, 0x61, 0x20, 0x64, 0x65, 0x69, 0x20, 0x52, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x69, 0x2c, 0x20, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x20, 0x65, 0x73, 0x65, 0x6d, 0x70, 0x69, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x20, 0x64, 0x69, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x74, 0x74, 0x75, 0x72, 0x61, 0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x65, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x61, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x72, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x7a, 0x65, 0x20, 0x73, 0x69, 0x20, 0x73, 0x6f, 0x6e, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x20, 0x64, 0x65, 0x6c, 0x0a, 0x64, 0x75, 0x63, 0x61, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x6e, 0x6f, 0x20, 0x65, 0x20, 0x61, 0x20, 0x53, 0x70, 0x6f, 0x6c, 0x65, 0x74, 0x6f, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kItUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('it'));
    });

    test('detect ja euc-jp', () {
      final detector = UCharDet();
      // dart format off
      final kJaEucjp = Uint8List.fromList([0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x45, 0x55, 0x43, 0x29, 0xa4, 0xcf, 0xa1, 0xa2, 0x55, 0x4e, 0x49, 0x58, 0xbe, 0xe5, 0xa4, 0xc7, 0xa4, 0xe8, 0xa4, 0xaf, 0xbb, 0xc8, 0xa4, 0xef, 0xa4, 0xec, 0xa4, 0xeb, 0xca, 0xb8, 0xbb, 0xfa, 0xa5, 0xb3, 0xa1, 0xbc, 0xa5, 0xc9, 0xa4, 0xce, 0xc9, 0xe4, 0xb9, 0xe6, 0xb2, 0xbd, 0xca, 0xfd, 0xbc, 0xb0, 0xa4, 0xc7, 0xa4, 0xa2, 0xa4, 0xeb, 0xa1, 0xa3, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0xc6, 0xfc, 0xcb, 0xdc, 0xb8, 0xec, 0x45, 0x55, 0x43, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x49, 0x53, 0x20, 0x58, 0x20, 0x30, 0x32, 0x30, 0x38, 0xa5, 0xd9, 0xa1, 0xbc, 0xa5, 0xb9, 0x20, 0x28, 0x45, 0x55, 0x43, 0x2d, 0x4a, 0x50, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4a, 0x49, 0x53, 0x20, 0x58, 0x20, 0x30, 0x32, 0x31, 0x33, 0xa5, 0xd9, 0xa1, 0xbc, 0xa5, 0xb9, 0x20, 0x28, 0x45, 0x55, 0x43, 0x2d, 0x4a, 0x49, 0x53, 0x2d, 0x32, 0x30, 0x30, 0x34, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0xb4, 0xda, 0xb9, 0xf1, 0xb8, 0xec, 0x45, 0x55, 0x43, 0x20, 0x28, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0xb4, 0xca, 0xc2, 0xce, 0xbb, 0xfa, 0xc3, 0xe6, 0xb9, 0xf1, 0xb8, 0xec, 0x45, 0x55, 0x43, 0x20, 0x28, 0x45, 0x55, 0x43, 0x2d, 0x43, 0x4e, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0xc8, 0xcb, 0xc2, 0xce, 0xbb, 0xfa, 0xc3, 0xe6, 0xb9, 0xf1, 0xb8, 0xec, 0x45, 0x55, 0x43, 0x20, 0x28, 0x45, 0x55, 0x43, 0x2d, 0x54, 0x57, 0x29, 0x0a, 0x0a, 0xa4, 0xca, 0xa4, 0xc9, 0xa4, 0xac, 0xa4, 0xa2, 0xa4, 0xeb, 0xa1, 0xa3, 0x0a]);
      // dart format on
      final candidates = detector.detect(kJaEucjp);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('euc-jp'));
      expect(candidates.first.language?.iso6391Code, equals('ja'));
    });

    test('detect ja iso-2022-jp', () {
      final detector = UCharDet();
      // dart format off
      final kJaIso2022jp = Uint8List.fromList([0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x32, 0x30, 0x32, 0x32, 0x1b, 0x24, 0x42, 0x21, 0x4a, 0x35, 0x6c, 0x3e, 0x4e, 0x1b, 0x28, 0x42, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x32, 0x30, 0x32, 0x32, 0x1b, 0x24, 0x42, 0x21, 0x4b, 0x24, 0x4f, 0x21, 0x22, 0x1b, 0x28, 0x42, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x24, 0x42, 0x4a, 0x38, 0x3b, 0x7a, 0x3d, 0x38, 0x39, 0x67, 0x24, 0x72, 0x1b, 0x28, 0x42, 0x37, 0x1b, 0x24, 0x42, 0x25, 0x53, 0x25, 0x43, 0x25, 0x48, 0x49, 0x64, 0x39, 0x66, 0x24, 0x5e, 0x24, 0x3f, 0x24, 0x4f, 0x1b, 0x28, 0x42, 0x38, 0x1b, 0x24, 0x42, 0x25, 0x53, 0x25, 0x43, 0x25, 0x48, 0x49, 0x64, 0x39, 0x66, 0x24, 0x47, 0x49, 0x3d, 0x38, 0x3d, 0x24, 0x39, 0x24, 0x6b, 0x24, 0x3f, 0x24, 0x61, 0x24, 0x4e, 0x35, 0x3b, 0x3d, 0x51, 0x21, 0x22, 0x24, 0x2a, 0x24, 0x68, 0x24, 0x53, 0x1b, 0x28, 0x42, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x24, 0x42, 0x4a, 0x23, 0x3f, 0x74, 0x24, 0x4e, 0x4a, 0x38, 0x3b, 0x7a, 0x3d, 0x38, 0x39, 0x67, 0x24, 0x72, 0x43, 0x31, 0x30, 0x6c, 0x24, 0x4e, 0x4a, 0x38, 0x3b, 0x7a, 0x49, 0x64, 0x39, 0x66, 0x32, 0x3d, 0x4a, 0x7d, 0x3c, 0x30, 0x24, 0x4b, 0x34, 0x5e, 0x24, 0x61, 0x24, 0x6b, 0x35, 0x3b, 0x3d, 0x51, 0x1b, 0x28, 0x42, 0x0a, 0x0a, 0x1b, 0x24, 0x42, 0x24, 0x72, 0x35, 0x2c, 0x44, 0x6a, 0x24, 0x39, 0x24, 0x6b, 0x1b, 0x28, 0x42, 0x49, 0x53, 0x4f, 0x1b, 0x24, 0x42, 0x35, 0x2c, 0x33, 0x4a, 0x24, 0x47, 0x24, 0x22, 0x24, 0x6b, 0x21, 0x23, 0x1b, 0x28, 0x42, 0x4a, 0x49, 0x53, 0x1b, 0x24, 0x42, 0x24, 0x4e, 0x42, 0x50, 0x31, 0x7e, 0x35, 0x2c, 0x33, 0x4a, 0x24, 0x4f, 0x1b, 0x28, 0x42, 0x4a, 0x49, 0x53, 0x20, 0x58, 0x20, 0x30, 0x32, 0x30, 0x32, 0x20, 0x1b, 0x24, 0x42, 0x21, 0x56, 0x3e, 0x70, 0x4a, 0x73, 0x35, 0x3b, 0x3d, 0x51, 0x1b, 0x28, 0x42, 0x2d, 0x1b, 0x24, 0x42, 0x4a, 0x38, 0x3b, 0x7a, 0x49, 0x64, 0x39, 0x66, 0x24, 0x4e, 0x39, 0x3d, 0x42, 0x24, 0x35, 0x5a, 0x24, 0x53, 0x33, 0x48, 0x44, 0x25, 0x4b, 0x21, 0x21, 0x57, 0x1b, 0x28, 0x42, 0x5b, 0x31, 0x5d, 0x1b, 0x24, 0x42, 0x21, 0x23, 0x1b, 0x28, 0x42, 0x45, 0x63, 0x6d, 0x61, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1b, 0x24, 0x42, 0x24, 0x4e, 0x42, 0x50, 0x31, 0x7e, 0x35, 0x2c, 0x33, 0x4a, 0x24, 0x4f, 0x1b, 0x28, 0x42, 0x45, 0x43, 0x4d, 0x41, 0x2d, 0x33, 0x35, 0x1b, 0x24, 0x42, 0x21, 0x23, 0x1b, 0x28, 0x42, 0x0a, 0x0a, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x32, 0x30, 0x32, 0x32, 0x20, 0x1b, 0x24, 0x42, 0x24, 0x4e, 0x49, 0x64, 0x39, 0x66, 0x32, 0x3d, 0x4a, 0x7d, 0x3c, 0x30, 0x24, 0x4f, 0x21, 0x22, 0x30, 0x6c, 0x48, 0x4c, 0x24, 0x4b, 0x21, 0x22, 0x1b, 0x28, 0x42, 0x31, 0x1b, 0x24, 0x42, 0x4a, 0x38, 0x3b, 0x7a, 0x24, 0x4b, 0x1b, 0x28, 0x42, 0x31, 0x1b, 0x24, 0x42, 0x25, 0x50, 0x25, 0x24, 0x25, 0x48, 0x24, 0x2b, 0x1b, 0x28, 0x42, 0x32, 0x1b, 0x24, 0x42, 0x25, 0x50, 0x25, 0x24, 0x25, 0x48, 0x30, 0x4a, 0x3e, 0x65, 0x24, 0x72, 0x3b, 0x48, 0x24, 0x26, 0x32, 0x44, 0x4a, 0x51, 0x44, 0x39, 0x24, 0x4e, 0x4a, 0x38, 0x3b, 0x7a, 0x49, 0x64, 0x39, 0x66, 0x32, 0x3d, 0x4a, 0x7d, 0x3c, 0x30, 0x24, 0x47, 0x24, 0x22, 0x24, 0x6b, 0x21, 0x23, 0x24, 0x24, 0x24, 0x2f, 0x24, 0x44, 0x24, 0x2b, 0x24, 0x4e, 0x49, 0x64, 0x39, 0x66, 0x32, 0x3d, 0x49, 0x3d, 0x38, 0x3d, 0x24, 0x2c, 0x1b, 0x28, 0x42, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x32, 0x30, 0x32, 0x32, 0x1b, 0x24, 0x42, 0x24, 0x4e, 0x35, 0x21, 0x39, 0x3d, 0x24, 0x72, 0x3b, 0x48, 0x24, 0x43, 0x24, 0x46, 0x24, 0x24, 0x24, 0x6b, 0x21, 0x23, 0x24, 0x3f, 0x24, 0x48, 0x24, 0x28, 0x24, 0x50, 0x21, 0x22, 0x1b, 0x28, 0x42, 0x49, 0x53, 0x4f, 0x2d, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x4a, 0x50, 0x1b, 0x24, 0x42, 0x24, 0x4f, 0x46, 0x7c, 0x4b, 0x5c, 0x38, 0x6c, 0x24, 0x47, 0x39, 0x2d, 0x24, 0x2f, 0x3b, 0x48, 0x24, 0x6f, 0x24, 0x6c, 0x24, 0x46, 0x24, 0x24, 0x24, 0x6b, 0x49, 0x64, 0x39, 0x66, 0x32, 0x3d, 0x49, 0x3d, 0x38, 0x3d, 0x24, 0x47, 0x24, 0x22, 0x24, 0x6a, 0x21, 0x22, 0x24, 0x24, 0x24, 0x6f, 0x24, 0x66, 0x24, 0x6b, 0x21, 0x56, 0x1b, 0x28, 0x42, 0x4a, 0x49, 0x53, 0x1b, 0x24, 0x42, 0x25, 0x33, 0x21, 0x3c, 0x25, 0x49, 0x21, 0x57, 0x24, 0x48, 0x24, 0x24, 0x24, 0x26, 0x24, 0x4e, 0x24, 0x62, 0x24, 0x33, 0x24, 0x6c, 0x24, 0x72, 0x3b, 0x58, 0x24, 0x39, 0x24, 0x33, 0x24, 0x48, 0x24, 0x2c, 0x30, 0x6c, 0x48, 0x4c, 0x45, 0x2a, 0x24, 0x47, 0x24, 0x22, 0x24, 0x6b, 0x21, 0x23, 0x1b, 0x28, 0x42, 0x0a]);
      // dart format on
      final candidates = detector.detect(kJaIso2022jp);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-2022-jp'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ja'));
    });

    test('detect ja shift_jis', () {
      final detector = UCharDet();
      // dart format off
      final kJaShiftjis = Uint8List.fromList([0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x93, 0xfa, 0x96, 0x7b, 0x8c, 0xea, 0x0a]);
      // dart format on
      final candidates = detector.detect(kJaShiftjis);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('shift_jis'));
      expect(candidates.first.language?.iso6391Code, equals('ja'));
    });

    test('detect ja utf-16be', () {
      final detector = UCharDet();
      // dart format off
      final kJaUtf16be = Uint8List.fromList([0xfe, 0xff, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x28, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x2f, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x29, 0x00, 0x20, 0x30, 0x68, 0x30, 0x6f, 0x30, 0x01, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x30, 0x4a, 0x30, 0x88, 0x30, 0x73, 0x00, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x0a, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x30, 0x6e, 0x30, 0x01, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x5f, 0x62, 0x5f, 0x0f, 0x30, 0x4a, 0x30, 0x88, 0x30, 0x73, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x30, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0xff, 0x08, 0x65, 0x87, 0x5b, 0x57, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x65, 0xb9, 0x5f, 0x0f, 0x30, 0x92, 0x53, 0xc2, 0x71, 0x67, 0xff, 0x09, 0x30, 0x6e, 0x30, 0x72, 0x30, 0x68, 0x30, 0x64, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x30, 0x6f, 0x30, 0x01, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x30, 0x67, 0x30, 0x6f, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0a, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x30, 0x6e, 0x75, 0x65, 0x30, 0x01, 0x00, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x30, 0x67, 0x30, 0x6f, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x0a, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x30, 0x6e, 0x75, 0x65, 0x30, 0x68, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x30, 0x67, 0x30, 0x6e, 0x6b, 0x63, 0x5f, 0x0f, 0x54, 0x0d, 0x79, 0xf0, 0x30, 0x6f, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x0a, 0x00, 0x50, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x70, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x30, 0x67, 0x30, 0x6f, 0x30, 0x01, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x30, 0x4c, 0x6b, 0x63, 0x5f, 0x0f, 0x54, 0x0d, 0x79, 0xf0, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x30, 0x67, 0x30, 0x6f, 0x30, 0x01, 0x00, 0x31, 0x65, 0x87, 0x5b, 0x57, 0x30, 0x4c, 0x30, 0x01, 0x00, 0x31, 0x00, 0x36, 0x30, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x6e, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x58, 0x4f, 0x4d, 0x30, 0x4c, 0x00, 0x31, 0x30, 0x64, 0x30, 0x7e, 0x30, 0x5f, 0x30, 0x6f, 0x00, 0x32, 0x30, 0x64, 0x30, 0x67, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x53, 0x30, 0x8c, 0x30, 0x4c, 0x30, 0x0c, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x30, 0x0d, 0x30, 0x6e, 0x54, 0x0d, 0x30, 0x6e, 0x75, 0x31, 0x67, 0x65, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x57, 0xfa, 0x67, 0x2c, 0x59, 0x1a, 0x8a, 0x00, 0x8a, 0x9e, 0x97, 0x62, 0xff, 0x08, 0x00, 0x42, 0x00, 0x4d, 0x00, 0x50, 0xff, 0x09, 0x51, 0x85, 0x30, 0x6e, 0x65, 0x87, 0x5b, 0x57, 0x30, 0x6f, 0x30, 0x01, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x58, 0x4f, 0x4d, 0x00, 0x31, 0x30, 0x64, 0x30, 0x6e, 0x00, 0x31, 0x00, 0x36, 0x30, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x67, 0x88, 0x68, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0xff, 0x08, 0x30, 0xd3, 0x30, 0xc3, 0x30, 0xb0, 0x30, 0xa8, 0x30, 0xf3, 0x30, 0xc7, 0x30, 0xa3, 0x30, 0xa2, 0x30, 0xf3, 0x30, 0x6a, 0x30, 0x89, 0x00, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x0a, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x30, 0x6e, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x32, 0x30, 0x68, 0x4e, 0x92, 0x63, 0xdb, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0xff, 0x09, 0x30, 0x02, 0x00, 0x42, 0x00, 0x4d, 0x00, 0x50, 0x4e, 0xe5, 0x59, 0x16, 0x30, 0x6e, 0x65, 0x87, 0x5b, 0x57, 0x30, 0x6f, 0x30, 0x01, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x58, 0x4f, 0x4d, 0x00, 0x32, 0x30, 0x64, 0x30, 0x6e, 0x00, 0x33, 0x00, 0x32, 0x30, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x67, 0x88, 0x68, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x6a, 0x30, 0x4a, 0x30, 0x01, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x30, 0x6f, 0x00, 0x32, 0x30, 0xd0, 0x30, 0xa4, 0x30, 0xc8, 0x30, 0xb3, 0x30, 0xfc, 0x30, 0xc9, 0x30, 0x60, 0x30, 0x68, 0x8a, 0xa4, 0x89, 0xe3, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x53, 0x30, 0x68, 0x30, 0x4c, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x4c, 0x30, 0x01, 0x30, 0x53, 0x30, 0x6e, 0x30, 0x88, 0x30, 0x46, 0x30, 0x6b, 0x00, 0x34, 0x30, 0xd0, 0x30, 0xa4, 0x30, 0xc8, 0x30, 0x6e, 0x30, 0x53, 0x30, 0x68, 0x30, 0x82, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x5f, 0x30, 0x81, 0x95, 0x93, 0x90, 0x55, 0x30, 0x44, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x30, 0x6b, 0x30, 0x4a, 0x30, 0x44, 0x30, 0x66, 0x30, 0x6f, 0x30, 0x01, 0x53, 0xb3, 0x5b, 0xc6, 0x30, 0x6b, 0x30, 0x6f, 0x30, 0x01, 0x65, 0x87, 0x5b, 0x57, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x5f, 0x62, 0x5f, 0x0f, 0xff, 0x08, 0x82, 0xf1, 0x00, 0x3a, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x0a, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0xff, 0x09, 0x30, 0x6e, 0x00, 0x31, 0x30, 0x64, 0x30, 0x6e, 0x54, 0x0d, 0x79, 0xf0, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8a, 0x30, 0x01, 0x30, 0x4b, 0x30, 0x64, 0x30, 0x01, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x5f, 0x62, 0x5f, 0x0f, 0x30, 0x6e, 0x30, 0x5f, 0x30, 0x81, 0x30, 0x6e, 0x65, 0x87, 0x5b, 0x57, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x30, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0xff, 0x08, 0x82, 0xf1, 0x00, 0x3a, 0x00, 0x0a, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x0a, 0x00, 0x53, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x65, 0xff, 0x09, 0x30, 0x6e, 0x00, 0x31, 0x30, 0x64, 0x30, 0x6e, 0x54, 0x0d, 0x79, 0xf0, 0x30, 0x67, 0x30, 0x82, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x5f, 0x62, 0x5f, 0x0f, 0x30, 0x6e, 0x30, 0x5f, 0x30, 0x81, 0x30, 0x6e, 0x65, 0x87, 0x5b, 0x57, 0x7b, 0x26, 0x53, 0xf7, 0x53, 0x16, 0x30, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0x30, 0x6b, 0x30, 0x6f, 0x30, 0x01, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x30, 0x6e, 0x4e, 0xd6, 0x30, 0x6b, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x42, 0x00, 0x45, 0x30, 0x01, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x4c, 0x00, 0x45, 0x30, 0x4c, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x00, 0x0a]);
      // dart format on
      final candidates = detector.detect(kJaUtf16be);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-16be'));
    });

    test('detect ja utf-16le', () {
      final detector = UCharDet();
      // dart format off
      final kJaUtf16le = Uint8List.fromList([0xff, 0xfe, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x28, 0x00, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x2f, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x29, 0x00, 0x20, 0x00, 0x68, 0x30, 0x6f, 0x30, 0x01, 0x30, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x4a, 0x30, 0x88, 0x30, 0x73, 0x30, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x0a, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x00, 0x6e, 0x30, 0x01, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0x62, 0x5f, 0x0f, 0x5f, 0x4a, 0x30, 0x88, 0x30, 0x73, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0x30, 0x08, 0xff, 0x87, 0x65, 0x57, 0x5b, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0xb9, 0x65, 0x0f, 0x5f, 0x92, 0x30, 0xc2, 0x53, 0x67, 0x71, 0x09, 0xff, 0x6e, 0x30, 0x72, 0x30, 0x68, 0x30, 0x64, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x6f, 0x30, 0x01, 0x30, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x67, 0x30, 0x6f, 0x30, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0a, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6e, 0x30, 0x65, 0x75, 0x01, 0x30, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x00, 0x67, 0x30, 0x6f, 0x30, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x0a, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6e, 0x30, 0x65, 0x75, 0x68, 0x30, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x00, 0x67, 0x30, 0x6e, 0x30, 0x63, 0x6b, 0x0f, 0x5f, 0x0d, 0x54, 0xf0, 0x79, 0x6f, 0x30, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x0a, 0x00, 0x50, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x70, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x67, 0x30, 0x6f, 0x30, 0x01, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x4c, 0x30, 0x63, 0x6b, 0x0f, 0x5f, 0x0d, 0x54, 0xf0, 0x79, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x0a, 0x00, 0x0a, 0x00, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x67, 0x30, 0x6f, 0x30, 0x01, 0x30, 0x31, 0x00, 0x87, 0x65, 0x57, 0x5b, 0x4c, 0x30, 0x01, 0x30, 0x31, 0x00, 0x36, 0x00, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x6e, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x58, 0x53, 0x4d, 0x4f, 0x4c, 0x30, 0x31, 0x00, 0x64, 0x30, 0x7e, 0x30, 0x5f, 0x30, 0x6f, 0x30, 0x32, 0x00, 0x64, 0x30, 0x67, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x53, 0x30, 0x8c, 0x30, 0x4c, 0x30, 0x0c, 0x30, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x0d, 0x30, 0x6e, 0x30, 0x0d, 0x54, 0x6e, 0x30, 0x31, 0x75, 0x65, 0x67, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0xfa, 0x57, 0x2c, 0x67, 0x1a, 0x59, 0x00, 0x8a, 0x9e, 0x8a, 0x62, 0x97, 0x08, 0xff, 0x42, 0x00, 0x4d, 0x00, 0x50, 0x00, 0x09, 0xff, 0x85, 0x51, 0x6e, 0x30, 0x87, 0x65, 0x57, 0x5b, 0x6f, 0x30, 0x01, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x58, 0x53, 0x4d, 0x4f, 0x31, 0x00, 0x64, 0x30, 0x6e, 0x30, 0x31, 0x00, 0x36, 0x00, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x67, 0x30, 0x68, 0x88, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x08, 0xff, 0xd3, 0x30, 0xc3, 0x30, 0xb0, 0x30, 0xa8, 0x30, 0xf3, 0x30, 0xc7, 0x30, 0xa3, 0x30, 0xa2, 0x30, 0xf3, 0x30, 0x6a, 0x30, 0x89, 0x30, 0x49, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2f, 0x00, 0x49, 0x00, 0x45, 0x00, 0x43, 0x00, 0x0a, 0x00, 0x31, 0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x36, 0x00, 0x6e, 0x30, 0x55, 0x00, 0x43, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x68, 0x30, 0x92, 0x4e, 0xdb, 0x63, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x09, 0xff, 0x02, 0x30, 0x42, 0x00, 0x4d, 0x00, 0x50, 0x00, 0xe5, 0x4e, 0x16, 0x59, 0x6e, 0x30, 0x87, 0x65, 0x57, 0x5b, 0x6f, 0x30, 0x01, 0x30, 0x26, 0x7b, 0xf7, 0x53, 0x58, 0x53, 0x4d, 0x4f, 0x32, 0x00, 0x64, 0x30, 0x6e, 0x30, 0x33, 0x00, 0x32, 0x00, 0xd3, 0x30, 0xc3, 0x30, 0xc8, 0x30, 0x67, 0x30, 0x68, 0x88, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x6a, 0x30, 0x4a, 0x30, 0x01, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x6f, 0x30, 0x32, 0x00, 0xd0, 0x30, 0xa4, 0x30, 0xc8, 0x30, 0xb3, 0x30, 0xfc, 0x30, 0xc9, 0x30, 0x60, 0x30, 0x68, 0x30, 0xa4, 0x8a, 0xe3, 0x89, 0x55, 0x30, 0x8c, 0x30, 0x8b, 0x30, 0x53, 0x30, 0x68, 0x30, 0x4c, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x4c, 0x30, 0x01, 0x30, 0x53, 0x30, 0x6e, 0x30, 0x88, 0x30, 0x46, 0x30, 0x6b, 0x30, 0x34, 0x00, 0xd0, 0x30, 0xa4, 0x30, 0xc8, 0x30, 0x6e, 0x30, 0x53, 0x30, 0x68, 0x30, 0x82, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x5f, 0x30, 0x81, 0x30, 0x93, 0x95, 0x55, 0x90, 0x44, 0x30, 0x67, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x0a, 0x00, 0x0a, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6b, 0x30, 0x4a, 0x30, 0x44, 0x30, 0x66, 0x30, 0x6f, 0x30, 0x01, 0x30, 0xb3, 0x53, 0xc6, 0x5b, 0x6b, 0x30, 0x6f, 0x30, 0x01, 0x30, 0x87, 0x65, 0x57, 0x5b, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0x62, 0x5f, 0x0f, 0x5f, 0x08, 0xff, 0xf1, 0x82, 0x3a, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x0a, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x09, 0xff, 0x6e, 0x30, 0x31, 0x00, 0x64, 0x30, 0x6e, 0x30, 0x0d, 0x54, 0xf0, 0x79, 0x67, 0x30, 0x42, 0x30, 0x8a, 0x30, 0x01, 0x30, 0x4b, 0x30, 0x64, 0x30, 0x01, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0x62, 0x5f, 0x0f, 0x5f, 0x6e, 0x30, 0x5f, 0x30, 0x81, 0x30, 0x6e, 0x30, 0x87, 0x65, 0x57, 0x5b, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0x30, 0x08, 0xff, 0xf1, 0x82, 0x3a, 0x00, 0x0a, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x0a, 0x00, 0x53, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x09, 0xff, 0x6e, 0x30, 0x31, 0x00, 0x64, 0x30, 0x6e, 0x30, 0x0d, 0x54, 0xf0, 0x79, 0x67, 0x30, 0x82, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0x62, 0x5f, 0x0f, 0x5f, 0x6e, 0x30, 0x5f, 0x30, 0x81, 0x30, 0x6e, 0x30, 0x87, 0x65, 0x57, 0x5b, 0x26, 0x7b, 0xf7, 0x53, 0x16, 0x53, 0xb9, 0x30, 0xad, 0x30, 0xfc, 0x30, 0xe0, 0x30, 0x6b, 0x30, 0x6f, 0x30, 0x01, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x6e, 0x30, 0xd6, 0x4e, 0x6b, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x42, 0x00, 0x45, 0x00, 0x01, 0x30, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x4c, 0x00, 0x45, 0x00, 0x4c, 0x30, 0x42, 0x30, 0x8b, 0x30, 0x02, 0x30, 0x0a, 0x00]);
      // dart format on
      final candidates = detector.detect(kJaUtf16le);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-16le'));
    });

    test('detect ja utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kJaUtf8 = Uint8List.fromList([0x55, 0x54, 0x46, 0x2d, 0x38, 0xef, 0xbc, 0x88, 0xe3, 0x83, 0xa6, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x86, 0xe3, 0x82, 0xa3, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0xa8, 0xe3, 0x83, 0x95, 0xe3, 0x81, 0xaf, 0xe3, 0x81, 0xa1, 0xe3, 0x80, 0x81, 0xe3, 0x83, 0xa6, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x86, 0xe3, 0x82, 0xa3, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0xa8, 0xe3, 0x83, 0x95, 0xe3, 0x82, 0xa8, 0xe3, 0x82, 0xa4, 0xe3, 0x83, 0x88, 0xef, 0xbc, 0x89, 0xe3, 0x81, 0xaf, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x31, 0x30, 0x36, 0x34, 0x36, 0x20, 0x28, 0x55, 0x43, 0x53, 0x29, 0x20, 0xe3, 0x81, 0xa8, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0xe3, 0x81, 0xa7, 0xe4, 0xbd, 0xbf, 0xe3, 0x81, 0x88, 0xe3, 0x82, 0x8b, 0x38, 0xe3, 0x83, 0x93, 0xe3, 0x83, 0x83, 0xe3, 0x83, 0x88, 0xe7, 0xac, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x8d, 0x98, 0xe4, 0xbd, 0x8d, 0xe3, 0x81, 0xae, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x8c, 0x96, 0xe5, 0xbd, 0xa2, 0xe5, 0xbc, 0x8f, 0xe5, 0x8f, 0x8a, 0xe3, 0x81, 0xb3, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe5, 0x8f, 0xb7, 0xe5, 0x8c, 0x96, 0xe3, 0x82, 0xb9, 0xe3, 0x82, 0xad, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0xa0, 0xe3, 0x80, 0x82, 0x0a, 0x0a, 0xe6, 0xad, 0xa3, 0xe5, 0xbc, 0x8f, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3, 0x81, 0xaf, 0xe3, 0x80, 0x81, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x31, 0x30, 0x36, 0x34, 0x36, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0xaf, 0x20, 0xe2, 0x80, 0x9c, 0x55, 0x43, 0x53, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x38, 0xe2, 0x80, 0x9d, 0xe3, 0x80, 0x81, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0xaf, 0x20, 0xe2, 0x80, 0x9c, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x38, 0xe2, 0x80, 0x9d, 0x20, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0x86, 0xe3, 0x80, 0x82, 0xe4, 0xb8, 0xa1, 0xe8, 0x80, 0x85, 0xe3, 0x81, 0xaf, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x31, 0x30, 0x36, 0x34, 0x36, 0xe3, 0x81, 0xa8, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0xe3, 0x81, 0xae, 0xe3, 0x82, 0xb3, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x89, 0xe9, 0x87, 0x8d, 0xe8, 0xa4, 0x87, 0xe7, 0xaf, 0x84, 0xe5, 0x9b, 0xb2, 0xe3, 0x81, 0xa7, 0xe4, 0xba, 0x92, 0xe6, 0x8f, 0x9b, 0xe6, 0x80, 0xa7, 0xe3, 0x81, 0x8c, 0xe3, 0x81, 0x82, 0xe3, 0x82, 0x8b, 0xe3, 0x80, 0x82, 0x52, 0x46, 0x43, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x82, 0xe4, 0xbb, 0x95, 0xe6, 0xa7, 0x98, 0xe3, 0x81, 0x8c, 0xe3, 0x81, 0x82, 0xe3, 0x82, 0x8b, 0x5b, 0x31, 0x5d, 0xe3, 0x80, 0x82, 0x0a, 0x0a, 0x32, 0xe3, 0x83, 0x90, 0xe3, 0x82, 0xa4, 0xe3, 0x83, 0x88, 0xe7, 0x9b, 0xae, 0xe4, 0xbb, 0xa5, 0xe9, 0x99, 0x8d, 0xe3, 0x81, 0xab, 0xe3, 0x80, 0x8c, 0x2f, 0xe3, 0x80, 0x8d, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0xa9, 0xe3, 0x81, 0xae, 0x41, 0x53, 0x43, 0x49, 0x49, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97, 0xe3, 0x81, 0x8c, 0xe7, 0x8f, 0xbe, 0xe3, 0x82, 0x8c, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0x84, 0xe3, 0x82, 0x88, 0xe3, 0x81, 0x86, 0xe3, 0x81, 0xab, 0xe5, 0xb7, 0xa5, 0xe5, 0xa4, 0xab, 0xe3, 0x81, 0x95, 0xe3, 0x82, 0x8c, 0xe3, 0x81, 0xa6, 0xe3, 0x81, 0x84, 0xe3, 0x82, 0x8b, 0xe3, 0x81, 0x93, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x8b, 0xe3, 0x82, 0x89, 0xe3, 0x80, 0x81, 0x55, 0x54, 0x46, 0x2d, 0x46, 0x53, 0x53, 0x20, 0x28, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x53, 0x61, 0x66, 0x65, 0x29, 0x20, 0xe3, 0x81, 0xa8, 0xe3, 0x82, 0x82, 0xe3, 0x81, 0x84, 0xe3, 0x82, 0x8f, 0xe3, 0x82, 0x8c, 0xe3, 0x82, 0x8b, 0xe3, 0x80, 0x82, 0xe6, 0x97, 0xa7, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe3, 0x81, 0xaf, 0x55, 0x54, 0x46, 0x2d, 0x32, 0xe3, 0x80, 0x82, 0x0a, 0x0a, 0xe3, 0x83, 0x87, 0xe3, 0x83, 0xbc, 0xe3, 0x82, 0xbf, 0xe4, 0xba, 0xa4, 0xe6, 0x8f, 0x9b, 0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe3, 0x80, 0x81, 0xe3, 0x83, 0x95, 0xe3, 0x82, 0xa1, 0xe3, 0x82, 0xa4, 0xe3, 0x83, 0xab, 0xe5, 0xbd, 0xa2, 0xe5, 0xbc, 0x8f, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0xa6, 0xe3, 0x80, 0x81, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe7, 0x9a, 0x84, 0xe3, 0x81, 0xab, 0x55, 0x54, 0x46, 0x2d, 0x38, 0xe3, 0x81, 0xaf, 0xe4, 0xbd, 0xbf, 0xe3, 0x82, 0x8f, 0xe3, 0x82, 0x8c, 0xe3, 0x82, 0x8b, 0xe5, 0x82, 0xbe, 0xe5, 0x90, 0x91, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0x82, 0xe3, 0x82, 0x8b, 0xe3, 0x80, 0x82, 0x0a, 0x0a, 0xe5, 0xbd, 0x93, 0xe5, 0x88, 0x9d, 0xe3, 0x81, 0xaf, 0xe3, 0x80, 0x81, 0xe3, 0x83, 0x99, 0xe3, 0x83, 0xab, 0xe7, 0xa0, 0x94, 0xe7, 0xa9, 0xb6, 0xe6, 0x89, 0x80, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0x8a, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0xa6, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x39, 0xe3, 0x81, 0xa7, 0xe7, 0x94, 0xa8, 0xe3, 0x81, 0x84, 0xe3, 0x82, 0x8b, 0xe3, 0x82, 0xa8, 0xe3, 0x83, 0xb3, 0xe3, 0x82, 0xb3, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x89, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0xa6, 0xe3, 0x80, 0x81, 0xe3, 0x83, 0xad, 0xe3, 0x83, 0x96, 0xe3, 0x83, 0xbb, 0xe3, 0x83, 0x91, 0xe3, 0x82, 0xa4, 0xe3, 0x82, 0xaf, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x88, 0xe3, 0x82, 0x8b, 0xe8, 0xa8, 0xad, 0xe8, 0xa8, 0x88, 0xe6, 0x8c, 0x87, 0xe9, 0x87, 0x9d, 0xe3, 0x81, 0xae, 0xe3, 0x82, 0x82, 0xe3, 0x81, 0xa8, 0xe3, 0x80, 0x81, 0xe3, 0x82, 0xb1, 0xe3, 0x83, 0xb3, 0xe3, 0x83, 0xbb, 0xe3, 0x83, 0x88, 0xe3, 0x83, 0xb3, 0xe3, 0x83, 0x97, 0xe3, 0x82, 0xbd, 0xe3, 0x83, 0xb3, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x88, 0xe3, 0x81, 0xa3, 0xe3, 0x81, 0xa6, 0xe8, 0x80, 0x83, 0xe6, 0xa1, 0x88, 0xe3, 0x81, 0x95, 0xe3, 0x82, 0x8c, 0xe3, 0x81, 0x9f, 0x0a]);
      // dart format on
      final candidates = detector.detect(kJaUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ja'));
    });

    test('detect ka georgian-academy', () {
      final detector = UCharDet();
      // dart format off
      final kKaGeorgianacademy = Uint8List.fromList([0xc5, 0xc8, 0xd0, 0xc6, 0xc0, 0xc6, 0xd3, 0xcc, 0xc0, 0x20, 0x28, 0xca, 0xc0, 0xc7, 0x2e, 0x20, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0x97, 0x20, 0xdb, 0xd3, 0xdb, 0xd3, 0xcb, 0xdc, 0xcd, 0xc5, 0xd0, 0xc4, 0xc1, 0xc8, 0xd1, 0x20, 0xc2, 0xc5, 0xc0, 0xd0, 0xc8, 0x20, 0xcb, 0xd6, 0xd0, 0xd6, 0xcc, 0xc4, 0xca, 0xc4, 0xc1, 0xc8, 0xd1, 0x20, 0xd0, 0xc8, 0xc2, 0xc8, 0xd1, 0xc0, 0x2e, 0x20, 0xcb, 0xd1, 0xcd, 0xd4, 0xca, 0xc8, 0xcd, 0xd8, 0xc8, 0x20, 0xc5, 0xc8, 0xd0, 0xc6, 0xc0, 0xc6, 0xd3, 0xcc, 0xc0, 0xc7, 0xc0, 0x20, 0x31, 0x35, 0x20, 0xd1, 0xc0, 0xde, 0xc4, 0xcd, 0xc1, 0xc0, 0xc0, 0x20, 0xda, 0xcc, 0xcd, 0xc1, 0xc8, 0xca, 0xc8, 0x2e, 0x20, 0xcb, 0xc0, 0xc7, 0x20, 0xd1, 0xc0, 0xcb, 0xd8, 0xcd, 0xc1, 0xca, 0xcd, 0xc3, 0x20, 0xc0, 0xcb, 0xc4, 0xd0, 0xc8, 0xc9, 0xc0, 0x20, 0xc8, 0xc7, 0xc5, 0xca, 0xc4, 0xc1, 0xc0, 0x2e, 0x20, 0xc5, 0xc8, 0xd0, 0xc6, 0xc0, 0xc6, 0xd3, 0xcc, 0xc4, 0xc1, 0xc8, 0x20, 0xdb, 0xc0, 0xca, 0xc8, 0xc0, 0xcc, 0x20, 0xc2, 0xc0, 0xcc, 0xd1, 0xde, 0xc5, 0xc0, 0xc5, 0xc3, 0xc4, 0xc1, 0xc8, 0xc0, 0xcc, 0x20, 0xd1, 0xde, 0xc5, 0xc0, 0x20, 0xdb, 0xd3, 0xdb, 0xd3, 0xcb, 0xdc, 0xcd, 0xc5, 0xd0, 0xc4, 0xc1, 0xc8, 0xd1, 0xc0, 0xc2, 0xc0, 0xcc, 0x2e, 0x20, 0xc8, 0xcb, 0x20, 0xc3, 0xd0, 0xcd, 0xd1, 0x20, 0xd0, 0xcd, 0xc3, 0xc4, 0xd1, 0xc0, 0xda, 0x20, 0xda, 0xde, 0xcd, 0xc5, 0xc4, 0xca, 0xc4, 0xc1, 0xc8, 0x20, 0xc0, 0xc6, 0xc8, 0xc8, 0xc3, 0xc0, 0xcc, 0x20, 0xc3, 0xc0, 0x20, 0xc4, 0xc5, 0xd0, 0xcd, 0xce, 0xc8, 0xc3, 0xc0, 0xcc, 0x20, 0xc0, 0xcb, 0xc4, 0xd0, 0xc8, 0xc9, 0xc8, 0xd1, 0xc0, 0xc9, 0xc4, 0xcc, 0x20, 0xcb, 0xc8, 0xc4, 0xcb, 0xc0, 0xd0, 0xc7, 0xc4, 0xc1, 0xcd, 0xc3, 0xcc, 0xc4, 0xcc, 0x2c, 0x20, 0xc5, 0xc8, 0xd0, 0xc6, 0xc0, 0xc6, 0xd3, 0xcc, 0xc4, 0xc1, 0xc8, 0x20, 0xce, 0xc8, 0xd0, 0xc8, 0xd5, 0xc8, 0xc7, 0x2c, 0x20, 0xc0, 0xcb, 0xc4, 0xd0, 0xc8, 0xc9, 0xc8, 0xc3, 0xc0, 0xcc, 0x20, 0xc2, 0xc0, 0xc5, 0xd0, 0xda, 0xc4, 0xca, 0xc3, 0xcc, 0xc4, 0xcc, 0x20, 0xcb, 0xc7, 0xc4, 0xca, 0x20, 0xcb, 0xd1, 0xcd, 0xd4, 0xca, 0xc8, 0xcd, 0xd8, 0xc8, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKaGeorgianacademy);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('georgian-academy'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ka'));
    });

    test('detect ka georgian-ps', () {
      final detector = UCharDet();
      // dart format off
      final kKaGeorgianps = Uint8List.fromList([0xc5, 0xc9, 0xd2, 0xc6, 0xc0, 0xc6, 0xd6, 0xcd, 0xc0, 0x20, 0x28, 0xcb, 0xc0, 0xc8, 0x2e, 0x20, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0x97, 0x20, 0xde, 0xd6, 0xde, 0xd6, 0xcc, 0xdf, 0xcf, 0xc5, 0xd2, 0xc4, 0xc1, 0xc9, 0xd3, 0x20, 0xc2, 0xc5, 0xc0, 0xd2, 0xc9, 0x20, 0xcc, 0xd9, 0xd2, 0xd9, 0xcd, 0xc4, 0xcb, 0xc4, 0xc1, 0xc9, 0xd3, 0x20, 0xd2, 0xc9, 0xc2, 0xc9, 0xd3, 0xc0, 0x2e, 0x20, 0xcc, 0xd3, 0xcf, 0xd7, 0xcb, 0xc9, 0xcf, 0xdb, 0xc9, 0x20, 0xc5, 0xc9, 0xd2, 0xc6, 0xc0, 0xc6, 0xd6, 0xcd, 0xc0, 0xc8, 0xc0, 0x20, 0x31, 0x35, 0x20, 0xd3, 0xc0, 0xe1, 0xc4, 0xcf, 0xc1, 0xc0, 0xc0, 0x20, 0xdd, 0xcd, 0xcf, 0xc1, 0xc9, 0xcb, 0xc9, 0x2e, 0x20, 0xcc, 0xc0, 0xc8, 0x20, 0xd3, 0xc0, 0xcc, 0xdb, 0xcf, 0xc1, 0xcb, 0xcf, 0xc3, 0x20, 0xc0, 0xcc, 0xc4, 0xd2, 0xc9, 0xca, 0xc0, 0x20, 0xc9, 0xc8, 0xc5, 0xcb, 0xc4, 0xc1, 0xc0, 0x2e, 0x20, 0xc5, 0xc9, 0xd2, 0xc6, 0xc0, 0xc6, 0xd6, 0xcd, 0xc4, 0xc1, 0xc9, 0x20, 0xde, 0xc0, 0xcb, 0xc9, 0xc0, 0xcd, 0x20, 0xc2, 0xc0, 0xcd, 0xd3, 0xe1, 0xc5, 0xc0, 0xc5, 0xc3, 0xc4, 0xc1, 0xc9, 0xc0, 0xcd, 0x20, 0xd3, 0xe1, 0xc5, 0xc0, 0x20, 0xde, 0xd6, 0xde, 0xd6, 0xcc, 0xdf, 0xcf, 0xc5, 0xd2, 0xc4, 0xc1, 0xc9, 0xd3, 0xc0, 0xc2, 0xc0, 0xcd, 0x2e, 0x20, 0xc9, 0xcc, 0x20, 0xc3, 0xd2, 0xcf, 0xd3, 0x20, 0xd2, 0xcf, 0xc3, 0xc4, 0xd3, 0xc0, 0xdd, 0x20, 0xdd, 0xe1, 0xcf, 0xc5, 0xc4, 0xcb, 0xc4, 0xc1, 0xc9, 0x20, 0xc0, 0xc6, 0xc9, 0xc9, 0xc3, 0xc0, 0xcd, 0x20, 0xc3, 0xc0, 0x20, 0xc4, 0xc5, 0xd2, 0xcf, 0xd0, 0xc9, 0xc3, 0xc0, 0xcd, 0x20, 0xc0, 0xcc, 0xc4, 0xd2, 0xc9, 0xca, 0xc9, 0xd3, 0xc0, 0xca, 0xc4, 0xcd, 0x20, 0xcc, 0xc9, 0xc4, 0xcc, 0xc0, 0xd2, 0xc8, 0xc4, 0xc1, 0xcf, 0xc3, 0xcd, 0xc4, 0xcd, 0x2c, 0x20, 0xc5, 0xc9, 0xd2, 0xc6, 0xc0, 0xc6, 0xd6, 0xcd, 0xc4, 0xc1, 0xc9, 0x20, 0xd0, 0xc9, 0xd2, 0xc9, 0xd8, 0xc9, 0xc8, 0x2c, 0x20, 0xc0, 0xcc, 0xc4, 0xd2, 0xc9, 0xca, 0xc9, 0xc3, 0xc0, 0xcd, 0x20, 0xc2, 0xc0, 0xc5, 0xd2, 0xdd, 0xc4, 0xcb, 0xc3, 0xcd, 0xc4, 0xcd, 0x20, 0xcc, 0xc8, 0xc4, 0xcb, 0x20, 0xcc, 0xd3, 0xcf, 0xd7, 0xcb, 0xc9, 0xcf, 0xdb, 0xc9, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKaGeorgianps);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('georgian-ps'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ka'));
    });

    test('detect ka utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kKaUtf8 = Uint8List.fromList([0xe1, 0x83, 0x95, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x90, 0x20, 0x28, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x97, 0x2e, 0x20, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x29, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xe1, 0x83, 0xab, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0xab, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xac, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa1, 0x20, 0xe1, 0x83, 0x92, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xa6, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0xa6, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa1, 0x20, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x92, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0x2e, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0xa4, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0xa8, 0xe1, 0x83, 0x98, 0x20, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0x90, 0x20, 0x31, 0x35, 0x20, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0xae, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x90, 0x20, 0xe1, 0x83, 0xaa, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x98, 0x2e, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x97, 0x20, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xa8, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x93, 0x20, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x99, 0xe1, 0x83, 0x90, 0x20, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x90, 0x2e, 0x20, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0x20, 0xe1, 0x83, 0xab, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x92, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0xae, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0xae, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x90, 0x20, 0xe1, 0x83, 0xab, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0xab, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xac, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x92, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x2e, 0x20, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x9b, 0x20, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0xa1, 0x20, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0xaa, 0x20, 0xe1, 0x83, 0xaa, 0xe1, 0x83, 0xae, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0x20, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x90, 0x20, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x9e, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x99, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x99, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9c, 0x2c, 0x20, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x96, 0xe1, 0x83, 0xa3, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x91, 0xe1, 0x83, 0x98, 0x20, 0xe1, 0x83, 0x9e, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0xa5, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x97, 0x2c, 0x20, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x99, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x92, 0xe1, 0x83, 0x90, 0xe1, 0x83, 0x95, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0xaa, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x93, 0xe1, 0x83, 0x9c, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9c, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0x94, 0xe1, 0x83, 0x9a, 0x20, 0xe1, 0x83, 0x9b, 0xe1, 0x83, 0xa1, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0xa4, 0xe1, 0x83, 0x9a, 0xe1, 0x83, 0x98, 0xe1, 0x83, 0x9d, 0xe1, 0x83, 0xa8, 0xe1, 0x83, 0x98, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKaUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ka'));
    });

    test('detect ko iso-2022-kr', () {
      final detector = UCharDet();
      // dart format off
      final kKoIso2022kr = Uint8List.fromList([0x1b, 0x24, 0x29, 0x43, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x32, 0x30, 0x32, 0x32, 0x0e, 0x34, 0x42, 0x0f, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x39, 0x2e, 0x40, 0x5a, 0x0f, 0x20, 0x0e, 0x41, 0x7d, 0x47, 0x55, 0x40, 0x3b, 0x0f, 0x20, 0x37, 0x0e, 0x3a, 0x71, 0x46, 0x2e, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x0f, 0x20, 0x0e, 0x36, 0x47, 0x34, 0x42, 0x0f, 0x20, 0x38, 0x0e, 0x3a, 0x71, 0x46, 0x2e, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x37, 0x4e, 0x0f, 0x20, 0x0e, 0x47, 0x25, 0x47, 0x76, 0x47, 0x4f, 0x31, 0x62, 0x0f, 0x20, 0x0e, 0x40, 0x27, 0x47, 0x51, 0x0f, 0x20, 0x0e, 0x31, 0x62, 0x3c, 0x7a, 0x0f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x35, 0x51, 0x0f, 0x20, 0x0e, 0x40, 0x4c, 0x3b, 0x73, 0x40, 0x47, 0x0f, 0x20, 0x0e, 0x39, 0x2e, 0x40, 0x5a, 0x0f, 0x20, 0x0e, 0x41, 0x7d, 0x47, 0x55, 0x40, 0x3b, 0x0f, 0x20, 0x0e, 0x47, 0x4f, 0x33, 0x2a, 0x40, 0x47, 0x0f, 0x20, 0x0e, 0x39, 0x2e, 0x40, 0x5a, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x48, 0x2d, 0x0f, 0x20, 0x0e, 0x39, 0x66, 0x3d, 0x44, 0x40, 0x38, 0x37, 0x4e, 0x0f, 0x20, 0x0e, 0x38, 0x70, 0x35, 0x4e, 0x0f, 0x20, 0x0e, 0x47, 0x25, 0x47, 0x76, 0x47, 0x4f, 0x34, 0x42, 0x0f, 0x20, 0x0e, 0x31, 0x62, 0x3c, 0x7a, 0x0f, 0x0a, 0x0a, 0x0e, 0x40, 0x3b, 0x0f, 0x20, 0x0e, 0x31, 0x54, 0x41, 0x24, 0x47, 0x4f, 0x34, 0x42, 0x0f, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x0e, 0x47, 0x25, 0x41, 0x58, 0x40, 0x4c, 0x34, 0x59, 0x0f, 0x2e, 0x0a, 0x0a, 0x49, 0x53, 0x4f, 0x2f, 0x49, 0x45, 0x43, 0x20, 0x32, 0x30, 0x32, 0x32, 0x0e, 0x40, 0x47, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x48, 0x2d, 0x0f, 0x20, 0x0e, 0x39, 0x66, 0x3d, 0x44, 0x40, 0x3a, 0x0f, 0x20, 0x0e, 0x45, 0x6b, 0x3b, 0x73, 0x0f, 0x20, 0x0e, 0x39, 0x2e, 0x40, 0x5a, 0x0f, 0x20, 0x0e, 0x47, 0x4f, 0x33, 0x2a, 0x3f, 0x21, 0x0f, 0x20, 0x31, 0x0e, 0x39, 0x59, 0x40, 0x4c, 0x46, 0x2e, 0x33, 0x2a, 0x0f, 0x20, 0x32, 0x0e, 0x39, 0x59, 0x40, 0x4c, 0x46, 0x2e, 0x0f, 0x20, 0x0e, 0x40, 0x4c, 0x3b, 0x73, 0x40, 0x3b, 0x0f, 0x20, 0x0e, 0x3e, 0x32, 0x34, 0x42, 0x0f, 0x20, 0x0e, 0x30, 0x21, 0x3a, 0x2f, 0x0f, 0x20, 0x0e, 0x39, 0x2e, 0x40, 0x5a, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x48, 0x2d, 0x0f, 0x20, 0x0e, 0x39, 0x66, 0x3d, 0x44, 0x40, 0x4c, 0x38, 0x67, 0x0f, 0x20, 0x0e, 0x47, 0x51, 0x31, 0x39, 0x3e, 0x6e, 0x40, 0x47, 0x0f, 0x20, 0x0e, 0x30, 0x66, 0x3f, 0x6c, 0x0f, 0x20, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0x0e, 0x40, 0x4c, 0x0f, 0x20, 0x0e, 0x40, 0x4c, 0x0f, 0x20, 0x0e, 0x3a, 0x4e, 0x48, 0x23, 0x48, 0x2d, 0x0f, 0x20, 0x0e, 0x39, 0x66, 0x3d, 0x44, 0x40, 0x3b, 0x0f, 0x20, 0x0e, 0x3b, 0x67, 0x3f, 0x6b, 0x47, 0x51, 0x34, 0x59, 0x0f, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKoIso2022kr);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-2022-kr'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ko'));
    });

    test('detect ko johab', () {
      final detector = UCharDet();
      // dart format off
      final kKoJohab = Uint8List.fromList([0xd0, 0x65, 0x8b, 0x69, 0xb7, 0x65, 0x20, 0xd1, 0xa9, 0xad, 0xa1, 0x9f, 0xa1, 0xb5, 0xc1, 0x20, 0x94, 0x7d, 0xad, 0xa1, 0x9f, 0xa1, 0x20, 0xa1, 0xa1, 0x96, 0x81, 0x20, 0xad, 0xa1, 0x9f, 0xa1, 0xcb, 0x69, 0xb7, 0x69, 0x20, 0xa5, 0xa5, 0x98, 0xe1, 0x20, 0xa0, 0x65, 0x97, 0x65, 0x20, 0xb7, 0x71, 0xad, 0xa1, 0xa2, 0x85, 0xb8, 0x61, 0x9d, 0xa1, 0x5b, 0x31, 0x5d, 0x20, 0xd0, 0x65, 0x8b, 0x69, 0x20, 0xa0, 0x78, 0xc2, 0x91, 0xa4, 0xf3, 0xb5, 0x41, 0xac, 0xe1, 0x93, 0x65, 0x20, 0x94, 0x7d, 0xad, 0xa1, 0x9f, 0xa1, 0x20, 0x31, 0x34, 0x89, 0xc1, 0x20, 0xd1, 0xa9, 0xad, 0xa1, 0x9f, 0xa1, 0x20, 0x31, 0x30, 0x20, 0xa1, 0xa1, 0x96, 0x81, 0x20, 0x32, 0x34, 0xb7, 0x69, 0x20, 0xce, 0x61, 0xba, 0x85, 0xb7, 0x61, 0x9d, 0xa1, 0x20, 0xac, 0x71, 0x93, 0x65, 0x94, 0x61, 0x2e, 0x20, 0x22, 0x90, 0x61, 0x9c, 0x75, 0xa0, 0x69, 0xb7, 0xa1, 0x20, 0xba, 0x97, 0x8a, 0x82, 0x89, 0xc1, 0x20, 0x94, 0x69, 0x9c, 0x61, 0x22, 0x20, 0xa2, 0x85, 0xb9, 0x41, 0x9f, 0x69, 0x20, 0x93, 0x61, 0x8f, 0xa5, 0x20, 0xad, 0x41, 0xb9, 0xb7, 0x94, 0x81, 0xb5, 0xd7, 0xb7, 0xa1, 0x20, 0xd0, 0x65, 0x8a, 0x82, 0xb4, 0xe1, 0x93, 0x65, 0x20, 0xa2, 0x89, 0x9d, 0xa5, 0x20, 0xb7, 0xa1, 0xb6, 0x95, 0x90, 0x61, 0x9c, 0x61, 0x20, 0xa0, 0x69, 0x8c, 0x61, 0xbb, 0xa1, 0x20, 0x90, 0x61, 0xc8, 0x61, 0x90, 0x81, 0x95, 0xa1, 0x9d, 0xa2, 0x20, 0x31, 0x34, 0x34, 0x33, 0x91, 0x65, 0x20, 0xc0, 0x77, 0xb9, 0x41, 0xd0, 0x61, 0xb5, 0x61, 0x20, 0x31, 0x34, 0x34, 0x36, 0x91, 0x65, 0x20, 0xa4, 0x65, 0xcd, 0xa1, 0xd0, 0x61, 0xb5, 0x76, 0x94, 0x61, 0x2e, 0x20, 0x90, 0x7b, 0x8b, 0x69, 0xb8, 0x61, 0x88, 0x61, 0x20, 0x90, 0x7b, 0xad, 0xa1, 0x9f, 0xa1, 0xa0, 0x65, 0x20, 0x90, 0x61, 0xc8, 0x61, 0x90, 0x81, 0xa3, 0x61, 0x9d, 0xa1, 0x20, 0xb7, 0x71, 0xad, 0xa1, 0xa2, 0x85, 0xb8, 0x61, 0xb7, 0xa1, 0xa1, 0x61, 0x20, 0x90, 0x7b, 0x90, 0x81, 0x9d, 0xa1, 0x20, 0xc1, 0xa1, 0xac, 0xf7, 0x2c, 0x20, 0xba, 0x97, 0xac, 0xf7, 0x2c, 0x20, 0xb9, 0xb7, 0xac, 0xf7, 0xb7, 0x69, 0x20, 0xa2, 0x83, 0xb4, 0xe1, 0x20, 0x91, 0x41, 0xa1, 0xa1, 0x20, 0xc4, 0x65, 0xb5, 0x41, 0x20, 0xa1, 0xa1, 0xb4, 0x61, 0xb3, 0x61, 0x8b, 0xa1, 0x20, 0x98, 0x81, 0xa2, 0x85, 0xb5, 0x41, 0x20, 0xb7, 0x71, 0xb8, 0xe9, 0xa2, 0x85, 0xb8, 0x61, 0xb7, 0x81, 0x20, 0xcb, 0x62, 0xac, 0xf7, 0x95, 0xa1, 0x20, 0x88, 0x78, 0x93, 0x65, 0x94, 0x61, 0x2e, 0x20, 0xc0, 0xe1, 0xb7, 0x71, 0xb5, 0x41, 0x93, 0x65, 0x20, 0x94, 0x7d, 0xad, 0xa1, 0x9f, 0xa1, 0x20, 0x31, 0x37, 0xb5, 0x41, 0x20, 0xd1, 0xa9, 0xad, 0xa1, 0x9f, 0xa1, 0x20, 0x31, 0x31, 0x20, 0xa1, 0xa1, 0x96, 0x81, 0x20, 0x32, 0x38, 0xb7, 0xa1, 0xb4, 0xf6, 0xb7, 0x61, 0x90, 0x61, 0x20, 0x96, 0xe1, 0xb5, 0x41, 0x20, 0x34, 0xb7, 0x69, 0x20, 0xb7, 0xb0, 0x89, 0xa1, 0x20, 0xb7, 0xa1, 0xb9, 0x41, 0x93, 0x65, 0x20, 0x32, 0x34, 0xa0, 0x65, 0x20, 0xb3, 0x65, 0x94, 0x61, 0x2e, 0x20, 0x94, 0x81, 0xd0, 0x65, 0xa3, 0xa5, 0x8a, 0x82, 0x89, 0xc1, 0x20, 0xb9, 0xa1, 0xac, 0xe5, 0xa3, 0xa5, 0xba, 0x81, 0xba, 0x81, 0xb7, 0x81, 0xb7, 0xa5, 0xa3, 0xa5, 0x89, 0xb7, 0xd1, 0xc1, 0x8a, 0x82, 0x89, 0xc1, 0x20, 0xb5, 0x85, 0xa5, 0x85, 0x20, 0xb9, 0xa1, 0xac, 0xe5, 0xb9, 0xa2, 0x20, 0xb8, 0x61, 0xc3, 0xa1, 0xba, 0x81, 0xb5, 0x41, 0xac, 0xe1, 0x93, 0x65, 0x20, 0x89, 0xb7, 0xb6, 0x77, 0x20, 0xa2, 0x85, 0xb8, 0x61, 0x9d, 0xa1, 0x2c, 0x20, 0xb7, 0xa5, 0x95, 0xa1, 0x91, 0x41, 0xaf, 0xa1, 0xb4, 0x61, 0x20, 0xa6, 0x81, 0xc9, 0xa5, 0x20, 0xac, 0xf1, 0xb5, 0x41, 0xac, 0xe1, 0x93, 0x65, 0x20, 0xbf, 0xa1, 0xb4, 0x61, 0xbf, 0xa1, 0xb4, 0x61, 0xb4, 0xe1, 0xb7, 0x81, 0x20, 0xa5, 0xa1, 0xb9, 0xa1, 0x20, 0xa2, 0x85, 0xb8, 0x61, 0x9d, 0xa1, 0x20, 0xc0, 0x81, 0xc8, 0x82, 0xd0, 0x61, 0xb5, 0x76, 0x94, 0x61, 0x2e, 0x20, 0xb9, 0xa1, 0xac, 0xe5, 0xa3, 0xa5, 0xba, 0x81, 0xba, 0x81, 0xb7, 0x81, 0xb7, 0xa5, 0xa3, 0xa5, 0x89, 0xb7, 0xd1, 0xc1, 0x8a, 0x82, 0xb5, 0x41, 0xac, 0xe1, 0x93, 0x65, 0x20, 0xb9, 0xa1, 0xac, 0xe5, 0x8b, 0x69, 0x28, 0xf3, 0x58, 0xeb, 0x68, 0x8b, 0x69, 0x29, 0xb7, 0xa1, 0x9c, 0x61, 0x20, 0xa6, 0x81, 0x9f, 0x65, 0x94, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKoJohab);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('johab'));
      expect(candidates.first.language?.iso6391Code, equals('ko'));
    });

    test('detect ko uhc', () {
      final detector = UCharDet();
      // dart format off
      final kKoUhc = Uint8List.fromList([0x3c, 0x53, 0x41, 0x4d, 0x49, 0x3e, 0x0d, 0x0a, 0x3c, 0x48, 0x45, 0x41, 0x44, 0x3e, 0x0d, 0x0a, 0x3c, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x3e, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0x2e, 0x73, 0x6d, 0x69, 0x3c, 0x2f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x3e, 0x0d, 0x0a, 0x3c, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x20, 0x54, 0x59, 0x50, 0x45, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x48, 0x45, 0x41, 0x44, 0x3e, 0x0d, 0x0a, 0x3c, 0x42, 0x4f, 0x44, 0x59, 0x3e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0xc0, 0xba, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x31, 0xbf, 0xcd, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x33, 0xc0, 0xbb, 0x20, 0xbb, 0xe7, 0xbf, 0xeb, 0xc7, 0xcf, 0xb4, 0xc2, 0x20, 0x38, 0xba, 0xf1, 0xc6, 0xae, 0x20, 0xb9, 0xae, 0xc0, 0xda, 0x20, 0xc0, 0xce, 0xc4, 0xda, 0xb5, 0xf9, 0xc0, 0xb8, 0xb7, 0xce, 0x2c, 0x20, 0x45, 0x55, 0x43, 0xc0, 0xc7, 0x20, 0xc0, 0xcf, 0xc1, 0xbe, 0xc0, 0xcc, 0xb8, 0xe7, 0x20, 0xb4, 0xeb, 0xc7, 0xa5, 0xc0, 0xfb, 0xc0, 0xce, 0x20, 0xc7, 0xd1, 0xb1, 0xdb, 0x20, 0xbf, 0xcf, 0xbc, 0xba, 0xc7, 0xfc, 0x20, 0xc0, 0xce, 0xc4, 0xda, 0xb5, 0xf9, 0xc0, 0xcc, 0xb1, 0xe2, 0x20, 0xb6, 0xa7, 0xb9, 0xae, 0xbf, 0xa1, 0x20, 0xba, 0xb8, 0xc5, 0xeb, 0x20, 0xbf, 0xcf, 0xbc, 0xba, 0xc7, 0xfc, 0xc0, 0xcc, 0xb6, 0xf3, 0xb0, 0xed, 0x20, 0xba, 0xd2, 0xb8, 0xb0, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x32, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0x20, 0xc0, 0xce, 0xc4, 0xda, 0xb5, 0xf9, 0xc0, 0xba, 0x20, 0xb4, 0xd9, 0xc0, 0xbd, 0xb0, 0xfa, 0x20, 0xb0, 0xb0, 0xc0, 0xcc, 0x20, 0xb1, 0xb8, 0xbc, 0xba, 0xb5, 0xc8, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x33, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x31, 0x32, 0x38, 0xba, 0xb8, 0xb4, 0xd9, 0x20, 0xc0, 0xdb, 0xc0, 0xba, 0x20, 0xb9, 0xd9, 0xc0, 0xcc, 0xc6, 0xae, 0xbf, 0xa1, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x33, 0xc0, 0xbb, 0x20, 0xb9, 0xe8, 0xb4, 0xe7, 0xc7, 0xd1, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x34, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x31, 0x32, 0x38, 0xba, 0xb8, 0xb4, 0xd9, 0x20, 0xc5, 0xa9, 0xb0, 0xc5, 0xb3, 0xaa, 0x20, 0xb0, 0xb0, 0xc0, 0xba, 0x20, 0xb9, 0xd9, 0xc0, 0xcc, 0xc6, 0xae, 0xbf, 0xa1, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x31, 0xc0, 0xbb, 0x20, 0xb9, 0xe8, 0xb4, 0xe7, 0xc7, 0xd1, 0xb4, 0xd9, 0x2e, 0x20, 0xb0, 0xa2, 0x20, 0xb1, 0xdb, 0xc0, 0xda, 0xb4, 0xc2, 0x20, 0xc7, 0xe0, 0xb0, 0xfa, 0x20, 0xbf, 0xad, 0xbf, 0xa1, 0x20, 0x31, 0x32, 0x38, 0xc0, 0xbb, 0x20, 0xb4, 0xf5, 0xc7, 0xd1, 0x20, 0xc4, 0xda, 0xb5, 0xe5, 0xb0, 0xaa, 0xc0, 0xbb, 0x20, 0xbb, 0xe7, 0xbf, 0xeb, 0xc7, 0xcf, 0xbf, 0xa9, 0x20, 0x32, 0xb9, 0xd9, 0xc0, 0xcc, 0xc6, 0xae, 0xb7, 0xce, 0x20, 0xc7, 0xa5, 0xc7, 0xf6, 0xb5, 0xc8, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x35, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0xb5, 0xfb, 0xb6, 0xf3, 0xbc, 0xad, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x31, 0xc0, 0xc7, 0x20, 0x34, 0x30, 0x2d, 0x32, 0x37, 0xbf, 0xa1, 0x20, 0xb9, 0xe8, 0xb4, 0xe7, 0xb5, 0xc8, 0x20, 0x22, 0xc0, 0xa7, 0x22, 0xb6, 0xf3, 0xb4, 0xc2, 0x20, 0xb1, 0xdb, 0xc0, 0xda, 0xb4, 0xc2, 0x20, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0xbf, 0xa1, 0xbc, 0xad, 0x20, 0x43, 0x30, 0x20, 0x41, 0x37, 0xb6, 0xf3, 0xb4, 0xc2, 0x20, 0xb9, 0xd9, 0xc0, 0xcc, 0xc6, 0xae, 0x20, 0xbf, 0xad, 0xb7, 0xce, 0x20, 0xc7, 0xa5, 0xc7, 0xf6, 0xb5, 0xc8, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x53, 0x59, 0x4e, 0x43, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3d, 0x36, 0x30, 0x30, 0x30, 0x3e, 0x3c, 0x50, 0x3e, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x31, 0xbf, 0xa1, 0xb4, 0xc2, 0x20, 0xc7, 0xd1, 0xb1, 0xdb, 0x20, 0xc3, 0xa4, 0xbf, 0xf2, 0x20, 0xb9, 0xae, 0xc0, 0xda, 0xb8, 0xa6, 0x20, 0xbb, 0xe7, 0xbf, 0xeb, 0xc7, 0xcf, 0xbf, 0xa9, 0x20, 0xb1, 0xd4, 0xb0, 0xdd, 0xc0, 0xc7, 0x20, 0xb9, 0xae, 0xc0, 0xda, 0x20, 0xc1, 0xfd, 0xc7, 0xd5, 0xbf, 0xa1, 0x20, 0xc6, 0xf7, 0xc7, 0xd4, 0xb5, 0xc7, 0xc1, 0xf6, 0x20, 0xbe, 0xca, 0xc0, 0xba, 0x20, 0xc7, 0xd1, 0xb1, 0xdb, 0xc0, 0xbb, 0x20, 0xc7, 0xa5, 0xc7, 0xf6, 0xc7, 0xcf, 0xb4, 0xc2, 0x20, 0xc8, 0xae, 0xc0, 0xe5, 0x20, 0xb9, 0xe6, 0xb9, 0xfd, 0xc0, 0xcc, 0x20, 0xc0, 0xd6, 0xc1, 0xf6, 0xb8, 0xb8, 0x2c, 0x20, 0xb4, 0xeb, 0xba, 0xce, 0xba, 0xd0, 0xc0, 0xc7, 0x20, 0xb0, 0xe6, 0xbf, 0xec, 0x20, 0xc0, 0xcc, 0x20, 0xb9, 0xe6, 0xb9, 0xfd, 0xc0, 0xba, 0x20, 0x45, 0x55, 0x43, 0x2d, 0x4b, 0x52, 0xbf, 0xa1, 0xbc, 0xad, 0x20, 0xbb, 0xe7, 0xbf, 0xeb, 0xb5, 0xc7, 0xc1, 0xf6, 0x20, 0xbe, 0xca, 0xb0, 0xed, 0x20, 0xb4, 0xeb, 0xbd, 0xc5, 0x20, 0x43, 0x50, 0x39, 0x34, 0x39, 0xbf, 0xcd, 0x20, 0xb0, 0xb0, 0xc0, 0xba, 0x20, 0xb4, 0xd9, 0xb8, 0xa5, 0x20, 0xb9, 0xe6, 0xb9, 0xfd, 0xc0, 0xbb, 0x20, 0xbb, 0xe7, 0xbf, 0xeb, 0xc7, 0xcf, 0xbf, 0xa9, 0x20, 0x4b, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x30, 0x31, 0x20, 0xb9, 0xd9, 0xb1, 0xf9, 0xc0, 0xc7, 0x20, 0xc7, 0xf6, 0xb4, 0xeb, 0x20, 0xc7, 0xd1, 0xb1, 0xdb, 0xc0, 0xbb, 0x20, 0xc7, 0xa5, 0xc7, 0xf6, 0xc7, 0xd1, 0xb4, 0xd9, 0x2e, 0x0d, 0x0a, 0x3c, 0x2f, 0x42, 0x4f, 0x44, 0x59, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x53, 0x41, 0x4d, 0x49, 0x3e, 0x0d, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKoUhc);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('uhc'));
      expect(candidates.first.language?.iso6391Code, equals('ko'));
    });

    test('detect ko utf-16le', () {
      final detector = UCharDet();
      // dart format off
      final kKoUtf16le = Uint8List.fromList([0xff, 0xfe, 0x55, 0x00, 0x54, 0x00, 0x46, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x28, 0x00, 0x31, 0x00, 0x36, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x29, 0x00, 0x40, 0xc7, 0x20, 0x00, 0x20, 0xc7, 0xc8, 0xb2, 0x54, 0xcf, 0xdc, 0xb4, 0x20, 0x00, 0x38, 0xbb, 0x90, 0xc7, 0x20, 0x00, 0x78, 0xc7, 0x54, 0xcf, 0x29, 0xb5, 0x20, 0x00, 0x29, 0xbc, 0xdd, 0xc2, 0x58, 0xc7, 0x0a, 0x00, 0x58, 0xd5, 0x98, 0xb0, 0x74, 0xc7, 0xe4, 0xb2, 0x2e, 0x00, 0x20, 0x00, 0xfc, 0xc8, 0x5c, 0xb8, 0x20, 0x00, 0xac, 0xc0, 0xa9, 0xc6, 0x18, 0xb4, 0x94, 0xb2, 0x20, 0x00, 0x30, 0xae, 0xf8, 0xbc, 0x20, 0x00, 0xe4, 0xb2, 0x6d, 0xad, 0xb4, 0xc5, 0x20, 0x00, 0xc9, 0xd3, 0x74, 0xba, 0x20, 0x00, 0x28, 0x00, 0x42, 0x00, 0x4d, 0x00, 0x50, 0x00, 0x2c, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x73, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x6d, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x65, 0x00, 0x29, 0x00, 0xd0, 0xc5, 0x0a, 0x00, 0x8d, 0xc1, 0x58, 0xd5, 0x94, 0xb2, 0x20, 0x00, 0x38, 0xbb, 0x90, 0xc7, 0xe4, 0xb4, 0x40, 0xc7, 0x20, 0x00, 0xf8, 0xad, 0x00, 0xb3, 0x5c, 0xb8, 0x20, 0x00, 0x31, 0x00, 0x36, 0x00, 0x44, 0xbe, 0xb8, 0xd2, 0x20, 0x00, 0x12, 0xac, 0x3c, 0xc7, 0x5c, 0xb8, 0x20, 0x00, 0x78, 0xc7, 0x54, 0xcf, 0x29, 0xb5, 0x74, 0xc7, 0x20, 0x00, 0x18, 0xb4, 0xe0, 0xac, 0x20, 0x00, 0xf8, 0xad, 0x20, 0x00, 0x74, 0xc7, 0xc1, 0xc0, 0x58, 0xc7, 0x20, 0x00, 0x38, 0xbb, 0x90, 0xc7, 0x94, 0xb2, 0x20, 0x00, 0xb9, 0xd2, 0xc4, 0xbc, 0x88, 0xd7, 0x0a, 0x00, 0x15, 0xc8, 0x74, 0xd5, 0xc4, 0xc9, 0x20, 0x00, 0x29, 0xbc, 0xdd, 0xc2, 0x3c, 0xc7, 0x5c, 0xb8, 0x20, 0x00, 0x33, 0x00, 0x32, 0x00, 0x44, 0xbe, 0xb8, 0xd2, 0x5c, 0xb8, 0x20, 0x00, 0x78, 0xc7, 0x54, 0xcf, 0x29, 0xb5, 0x74, 0xc7, 0x20, 0x00, 0x1c, 0xb4, 0xe4, 0xb2, 0x2e, 0x00, 0x0a, 0x00]);
      // dart format on
      final candidates = detector.detect(kKoUtf16le);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-16le'));
    });

    test('detect ko utf-32be', () {
      final detector = UCharDet();
      // dart format off
      final kKoUtf32be = Uint8List.fromList([0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0xc7, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc7, 0x20, 0x00, 0x00, 0xb2, 0xc8, 0x00, 0x00, 0xcf, 0x54, 0x00, 0x00, 0xb4, 0xdc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xbb, 0x38, 0x00, 0x00, 0xc7, 0x90, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc7, 0x78, 0x00, 0x00, 0xcf, 0x54, 0x00, 0x00, 0xb5, 0x29, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xbc, 0x29, 0x00, 0x00, 0xc2, 0xdd, 0x00, 0x00, 0xc7, 0x58, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0xd5, 0x58, 0x00, 0x00, 0xb0, 0x98, 0x00, 0x00, 0xc7, 0x74, 0x00, 0x00, 0xb2, 0xe4, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc8, 0xfc, 0x00, 0x00, 0xb8, 0x5c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc0, 0xac, 0x00, 0x00, 0xc6, 0xa9, 0x00, 0x00, 0xb4, 0x18, 0x00, 0x00, 0xb2, 0x94, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xae, 0x30, 0x00, 0x00, 0xbc, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xb2, 0xe4, 0x00, 0x00, 0xad, 0x6d, 0x00, 0x00, 0xc5, 0xb4, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xd3, 0xc9, 0x00, 0x00, 0xba, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0xc5, 0xd0, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0xc1, 0x8d, 0x00, 0x00, 0xd5, 0x58, 0x00, 0x00, 0xb2, 0x94, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xbb, 0x38, 0x00, 0x00, 0xc7, 0x90, 0x00, 0x00, 0xb4, 0xe4, 0x00, 0x00, 0xc7, 0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xad, 0xf8, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0xb8, 0x5c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0xbe, 0x44, 0x00, 0x00, 0xd2, 0xb8, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xac, 0x12, 0x00, 0x00, 0xc7, 0x3c, 0x00, 0x00, 0xb8, 0x5c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc7, 0x78, 0x00, 0x00, 0xcf, 0x54, 0x00, 0x00, 0xb5, 0x29, 0x00, 0x00, 0xc7, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xb4, 0x18, 0x00, 0x00, 0xac, 0xe0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xad, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc7, 0x74, 0x00, 0x00, 0xc0, 0xc1, 0x00, 0x00, 0xc7, 0x58, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xbb, 0x38, 0x00, 0x00, 0xc7, 0x90, 0x00, 0x00, 0xb2, 0x94, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xd2, 0xb9, 0x00, 0x00, 0xbc, 0xc4, 0x00, 0x00, 0xd7, 0x88, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0xc8, 0x15, 0x00, 0x00, 0xd5, 0x74, 0x00, 0x00, 0xc9, 0xc4, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xbc, 0x29, 0x00, 0x00, 0xc2, 0xdd, 0x00, 0x00, 0xc7, 0x3c, 0x00, 0x00, 0xb8, 0x5c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xbe, 0x44, 0x00, 0x00, 0xd2, 0xb8, 0x00, 0x00, 0xb8, 0x5c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xc7, 0x78, 0x00, 0x00, 0xcf, 0x54, 0x00, 0x00, 0xb5, 0x29, 0x00, 0x00, 0xc7, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xb4, 0x1c, 0x00, 0x00, 0xb2, 0xe4, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKoUtf32be);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-32be'));
    });

    test('detect ko utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kKoUtf8 = Uint8List.fromList([0x55, 0x54, 0x46, 0x2d, 0x38, 0xec, 0x9d, 0x80, 0x20, 0xec, 0x9c, 0xa0, 0xeb, 0x8b, 0x88, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0xeb, 0xa5, 0xbc, 0x20, 0xec, 0x9c, 0x84, 0xed, 0x95, 0x9c, 0x20, 0xea, 0xb0, 0x80, 0xeb, 0xb3, 0x80, 0x20, 0xea, 0xb8, 0xb8, 0xec, 0x9d, 0xb4, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xbd, 0x94, 0xeb, 0x94, 0xa9, 0x20, 0xeb, 0xb0, 0xa9, 0xec, 0x8b, 0x9d, 0x20, 0xec, 0xa4, 0x91, 0x20, 0xed, 0x95, 0x98, 0xeb, 0x82, 0x98, 0xeb, 0xa1, 0x9c, 0x2c, 0x20, 0xec, 0xbc, 0x84, 0x20, 0xed, 0x86, 0xb0, 0xed, 0x94, 0x84, 0xec, 0x8a, 0xa8, 0xea, 0xb3, 0xbc, 0x20, 0xeb, 0xa1, 0xad, 0x20, 0xed, 0x8c, 0x8c, 0xec, 0x9d, 0xb4, 0xed, 0x81, 0xac, 0xea, 0xb0, 0x80, 0x20, 0xeb, 0xa7, 0x8c, 0xeb, 0x93, 0xa4, 0xec, 0x97, 0x88, 0xeb, 0x8b, 0xa4, 0x2e, 0x20, 0xeb, 0xb3, 0xb8, 0xeb, 0x9e, 0x98, 0xeb, 0x8a, 0x94, 0x20, 0x46, 0x53, 0x53, 0x2d, 0x55, 0x54, 0x46, 0x28, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x53, 0x61, 0x66, 0x65, 0x20, 0x55, 0x43, 0x53, 0x2f, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29, 0xeb, 0x9d, 0xbc, 0xeb, 0x8a, 0x94, 0x20, 0xec, 0x9d, 0xb4, 0xeb, 0xa6, 0x84, 0xec, 0x9c, 0xbc, 0xeb, 0xa1, 0x9c, 0x20, 0xec, 0xa0, 0x9c, 0xec, 0x95, 0x88, 0xeb, 0x90, 0x98, 0xec, 0x97, 0x88, 0xeb, 0x8b, 0xa4, 0x2e, 0x0a, 0x0a, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xbd, 0x94, 0xeb, 0x94, 0xa9, 0xec, 0x9d, 0x80, 0x20, 0xec, 0x9c, 0xa0, 0xeb, 0x8b, 0x88, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x20, 0xed, 0x95, 0x9c, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0xeb, 0xa5, 0xbc, 0x20, 0xeb, 0x82, 0x98, 0xed, 0x83, 0x80, 0xeb, 0x82, 0xb4, 0xea, 0xb8, 0xb0, 0x20, 0xec, 0x9c, 0x84, 0xed, 0x95, 0xb4, 0x20, 0x31, 0xeb, 0xb0, 0x94, 0xec, 0x9d, 0xb4, 0xed, 0x8a, 0xb8, 0xec, 0x97, 0x90, 0xec, 0x84, 0x9c, 0x20, 0x34, 0xeb, 0xb0, 0x94, 0xec, 0x9d, 0xb4, 0xed, 0x8a, 0xb8, 0xea, 0xb9, 0x8c, 0xec, 0xa7, 0x80, 0xeb, 0xa5, 0xbc, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xed, 0x95, 0x9c, 0xeb, 0x8b, 0xa4, 0x2e, 0x20, 0xec, 0x98, 0x88, 0xeb, 0xa5, 0xbc, 0x20, 0xeb, 0x93, 0xa4, 0xec, 0x96, 0xb4, 0xec, 0x84, 0x9c, 0x2c, 0x20, 0x55, 0x2b, 0x30, 0x30, 0x30, 0x30, 0xeb, 0xb6, 0x80, 0xed, 0x84, 0xb0, 0x20, 0x55, 0x2b, 0x30, 0x30, 0x37, 0x46, 0x20, 0xeb, 0xb2, 0x94, 0xec, 0x9c, 0x84, 0xec, 0x97, 0x90, 0x20, 0xec, 0x9e, 0x88, 0xeb, 0x8a, 0x94, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0xeb, 0x93, 0xa4, 0xec, 0x9d, 0x80, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0xec, 0x97, 0x90, 0xec, 0x84, 0x9c, 0x20, 0x31, 0xeb, 0xb0, 0x94, 0xec, 0x9d, 0xb4, 0xed, 0x8a, 0xb8, 0xeb, 0xa7, 0x8c, 0xec, 0x9c, 0xbc, 0xeb, 0xa1, 0x9c, 0x20, 0xed, 0x91, 0x9c, 0xec, 0x8b, 0x9c, 0xeb, 0x90, 0x9c, 0xeb, 0x8b, 0xa4, 0x2e, 0x20, 0x34, 0xeb, 0xb0, 0x94, 0xec, 0x9d, 0xb4, 0xed, 0x8a, 0xb8, 0xeb, 0xa1, 0x9c, 0x20, 0xed, 0x91, 0x9c, 0xed, 0x98, 0x84, 0xeb, 0x90, 0x98, 0xeb, 0x8a, 0x94, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0xeb, 0x8a, 0x94, 0x20, 0xeb, 0xaa, 0xa8, 0xeb, 0x91, 0x90, 0x20, 0xea, 0xb8, 0xb0, 0xeb, 0xb3, 0xb8, 0x20, 0xeb, 0x8b, 0xa4, 0xea, 0xb5, 0xad, 0xec, 0x96, 0xb4, 0x20, 0xed, 0x8f, 0x89, 0xeb, 0xa9, 0xb4, 0x28, 0x42, 0x4d, 0x50, 0x29, 0x20, 0xeb, 0xb0, 0x94, 0xea, 0xb9, 0xa5, 0xec, 0x9d, 0x98, 0x20, 0xec, 0x9c, 0xa0, 0xeb, 0x8b, 0x88, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0xec, 0x9d, 0xb4, 0xeb, 0xa9, 0xb0, 0x2c, 0x20, 0xea, 0xb1, 0xb0, 0xec, 0x9d, 0x98, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xeb, 0x90, 0x98, 0xec, 0xa7, 0x80, 0x20, 0xec, 0x95, 0x8a, 0xeb, 0x8a, 0x94, 0xeb, 0x8b, 0xa4, 0x2e, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x31, 0x36, 0xea, 0xb3, 0xbc, 0x20, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x20, 0xec, 0xa4, 0x91, 0x20, 0xec, 0x96, 0xb4, 0xeb, 0x8a, 0x90, 0x20, 0xec, 0x9d, 0xb8, 0xec, 0xbd, 0x94, 0xeb, 0x94, 0xa9, 0xec, 0x9d, 0xb4, 0x20, 0xeb, 0x8d, 0x94, 0x20, 0xec, 0xa0, 0x81, 0xec, 0x9d, 0x80, 0x20, 0xeb, 0xb0, 0x94, 0xec, 0x9d, 0xb4, 0xed, 0x8a, 0xb8, 0xeb, 0xa5, 0xbc, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xed, 0x95, 0x98, 0xeb, 0x8a, 0x94, 0xec, 0xa7, 0x80, 0xeb, 0x8a, 0x94, 0x20, 0xeb, 0xac, 0xb8, 0xec, 0x9e, 0x90, 0xec, 0x97, 0xb4, 0xec, 0x97, 0x90, 0xec, 0x84, 0x9c, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xeb, 0x90, 0x9c, 0x20, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x20, 0xed, 0x8f, 0xac, 0xec, 0x9d, 0xb8, 0xed, 0x8a, 0xb8, 0xec, 0x97, 0x90, 0x20, 0xeb, 0x94, 0xb0, 0xeb, 0x9d, 0xbc, 0x20, 0xeb, 0x8b, 0xac, 0xeb, 0x9d, 0xbc, 0xec, 0xa7, 0x80, 0xeb, 0xa9, 0xb0, 0x2c, 0x20, 0xec, 0x8b, 0xa4, 0xec, 0xa0, 0x9c, 0xeb, 0xa1, 0x9c, 0x20, 0x44, 0x45, 0x46, 0x4c, 0x41, 0x54, 0x45, 0xec, 0x99, 0x80, 0x20, 0xea, 0xb0, 0x99, 0xec, 0x9d, 0x80, 0x20, 0xec, 0x9d, 0xbc, 0xeb, 0xb0, 0x98, 0xec, 0xa0, 0x81, 0xec, 0x9d, 0xb8, 0x20, 0xec, 0x95, 0x95, 0xec, 0xb6, 0x95, 0x20, 0xec, 0x95, 0x8c, 0xea, 0xb3, 0xa0, 0xeb, 0xa6, 0xac, 0xec, 0xa6, 0x98, 0xec, 0x9d, 0x84, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xed, 0x95, 0xa0, 0x20, 0xea, 0xb2, 0xbd, 0xec, 0x9a, 0xb0, 0x20, 0xec, 0x9d, 0xb4, 0x20, 0xec, 0xb0, 0xa8, 0xec, 0x9d, 0xb4, 0xeb, 0x8a, 0x94, 0x20, 0xeb, 0xac, 0xb4, 0xec, 0x8b, 0x9c, 0xed, 0x95, 0xa0, 0x20, 0xec, 0x88, 0x98, 0x20, 0xec, 0x9e, 0x88, 0xec, 0x9d, 0x84, 0x20, 0xec, 0xa0, 0x95, 0xeb, 0x8f, 0x84, 0xec, 0x9d, 0xb4, 0xeb, 0x8b, 0xa4, 0x2e, 0x20, 0xec, 0x9d, 0xb4, 0xeb, 0x9f, 0xac, 0xed, 0x95, 0x9c, 0x20, 0xec, 0x95, 0x95, 0xec, 0xb6, 0x95, 0x20, 0xec, 0x95, 0x8c, 0xea, 0xb3, 0xa0, 0xeb, 0xa6, 0xac, 0xec, 0xa6, 0x98, 0xec, 0x9d, 0x84, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xed, 0x95, 0x98, 0xea, 0xb8, 0xb0, 0x20, 0xed, 0x9e, 0x98, 0xeb, 0x93, 0xa4, 0xea, 0xb3, 0xa0, 0x20, 0xed, 0x81, 0xac, 0xea, 0xb8, 0xb0, 0xea, 0xb0, 0x80, 0x20, 0xec, 0xa4, 0x91, 0xec, 0x9a, 0x94, 0xed, 0x95, 0xa0, 0x20, 0xea, 0xb2, 0xbd, 0xec, 0x9a, 0xb0, 0x20, 0xec, 0x9c, 0xa0, 0xeb, 0x8b, 0x88, 0xec, 0xbd, 0x94, 0xeb, 0x93, 0x9c, 0x20, 0xed, 0x91, 0x9c, 0xec, 0xa4, 0x80, 0x20, 0xec, 0x95, 0x95, 0xec, 0xb6, 0x95, 0x20, 0xeb, 0xb0, 0xa9, 0xec, 0x8b, 0x9d, 0xec, 0x9d, 0x84, 0x20, 0xeb, 0x8c, 0x80, 0xec, 0x8b, 0xa0, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9a, 0xa9, 0xed, 0x95, 0xa0, 0x20, 0xec, 0x88, 0x98, 0x20, 0xec, 0x9e, 0x88, 0xeb, 0x8b, 0xa4, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kKoUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ko'));
    });

    test('detect lt iso-8859-10', () {
      final detector = UCharDet();
      // dart format off
      final kLtIso885910 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x61, 0x73, 0x20, 0x28, 0x6f, 0x6c, 0x2e, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x31, 0x38, 0x35, 0x33, 0x20, 0x6d, 0x2e, 0x20, 0x6b, 0x6f, 0x76, 0x6f, 0x20, 0x33, 0x30, 0x20, 0x64, 0x2e, 0x20, 0x47, 0x72, 0x6f, 0x74, 0x20, 0x5a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x65, 0x2c, 0x0a, 0x4e, 0x79, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x20, 0x2d, 0x20, 0x31, 0x38, 0x39, 0x30, 0x20, 0x6d, 0x2e, 0x20, 0x6c, 0x69, 0x65, 0x70, 0x6f, 0x73, 0x20, 0x32, 0x39, 0x20, 0x64, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x65, 0x20, 0x55, 0x61, 0x7a, 0x6f, 0x73, 0x2c, 0x20, 0x50, 0x72, 0x61, 0x6e, 0x63, 0xbe, 0x7a, 0x69, 0x6a, 0x61, 0x29, 0x20, 0x2d, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0xf9, 0x0a, 0x74, 0x61, 0x70, 0x79, 0x74, 0x6f, 0x6a, 0x61, 0x73, 0x20, 0x69, 0x72, 0x20, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x61, 0x73, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLtIso885910);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-10'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lt'));
    });

    test('detect lt iso-8859-13', () {
      final detector = UCharDet();
      // dart format off
      final kLtIso885913 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x61, 0x73, 0x20, 0x28, 0x6f, 0x6c, 0x2e, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x31, 0x38, 0x35, 0x33, 0x20, 0x6d, 0x2e, 0x20, 0x6b, 0x6f, 0x76, 0x6f, 0x20, 0x33, 0x30, 0x20, 0x64, 0x2e, 0x20, 0x47, 0x72, 0x6f, 0x74, 0x20, 0x5a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x65, 0x2c, 0x0a, 0x4e, 0x79, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x20, 0x2d, 0x20, 0x31, 0x38, 0x39, 0x30, 0x20, 0x6d, 0x2e, 0x20, 0x6c, 0x69, 0x65, 0x70, 0x6f, 0x73, 0x20, 0x32, 0x39, 0x20, 0x64, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x65, 0x20, 0x55, 0x61, 0x7a, 0x6f, 0x73, 0x2c, 0x20, 0x50, 0x72, 0x61, 0x6e, 0x63, 0xfb, 0x7a, 0x69, 0x6a, 0x61, 0x29, 0x20, 0x2d, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0xf8, 0x0a, 0x74, 0x61, 0x70, 0x79, 0x74, 0x6f, 0x6a, 0x61, 0x73, 0x20, 0x69, 0x72, 0x20, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x61, 0x73, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLtIso885913);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-13'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lt'));
    });

    test('detect lt iso-8859-4', () {
      final detector = UCharDet();
      // dart format off
      final kLtIso88594 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x61, 0x73, 0x20, 0x28, 0x6f, 0x6c, 0x2e, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x31, 0x38, 0x35, 0x33, 0x20, 0x6d, 0x2e, 0x20, 0x6b, 0x6f, 0x76, 0x6f, 0x20, 0x33, 0x30, 0x20, 0x64, 0x2e, 0x20, 0x47, 0x72, 0x6f, 0x74, 0x20, 0x5a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x65, 0x2c, 0x0a, 0x4e, 0x79, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x20, 0x2d, 0x20, 0x31, 0x38, 0x39, 0x30, 0x20, 0x6d, 0x2e, 0x20, 0x6c, 0x69, 0x65, 0x70, 0x6f, 0x73, 0x20, 0x32, 0x39, 0x20, 0x64, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x65, 0x20, 0x55, 0x61, 0x7a, 0x6f, 0x73, 0x2c, 0x20, 0x50, 0x72, 0x61, 0x6e, 0x63, 0xfe, 0x7a, 0x69, 0x6a, 0x61, 0x29, 0x20, 0x2d, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0xf9, 0x0a, 0x74, 0x61, 0x70, 0x79, 0x74, 0x6f, 0x6a, 0x61, 0x73, 0x20, 0x69, 0x72, 0x20, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x61, 0x73, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLtIso88594);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-4'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lt'));
    });

    test('detect lt utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kLtUtf8 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x61, 0x73, 0x20, 0x28, 0x6f, 0x6c, 0x2e, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x31, 0x38, 0x35, 0x33, 0x20, 0x6d, 0x2e, 0x20, 0x6b, 0x6f, 0x76, 0x6f, 0x20, 0x33, 0x30, 0x20, 0x64, 0x2e, 0x20, 0x47, 0x72, 0x6f, 0x74, 0x20, 0x5a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x65, 0x2c, 0x0a, 0x4e, 0x79, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x20, 0xe2, 0x80, 0x93, 0x20, 0x31, 0x38, 0x39, 0x30, 0x20, 0x6d, 0x2e, 0x20, 0x6c, 0x69, 0x65, 0x70, 0x6f, 0x73, 0x20, 0x32, 0x39, 0x20, 0x64, 0x2e, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x65, 0x20, 0x70, 0x72, 0x69, 0x65, 0x20, 0x55, 0x61, 0x7a, 0x6f, 0x73, 0x2c, 0x20, 0x50, 0x72, 0x61, 0x6e, 0x63, 0xc5, 0xab, 0x7a, 0x69, 0x6a, 0x61, 0x29, 0x20, 0xe2, 0x80, 0x93, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0xc5, 0xb3, 0x0a, 0x74, 0x61, 0x70, 0x79, 0x74, 0x6f, 0x6a, 0x61, 0x73, 0x20, 0x69, 0x72, 0x20, 0x67, 0x72, 0x61, 0x66, 0x69, 0x6b, 0x61, 0x73, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLtUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('lt'));
    });

    test('detect lv iso-8859-10', () {
      final detector = UCharDet();
      // dart format off
      final kLvIso885910 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x56, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x28, 0x6e, 0xb4, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xba, 0x75, 0x3a, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x64, 0x7a, 0x69, 0x6d, 0x69, 0x73, 0x20, 0x31, 0x38, 0x35, 0x33, 0x2e, 0x0a, 0x67, 0x61, 0x64, 0x61, 0x20, 0x33, 0x30, 0x2e, 0x20, 0x6d, 0x61, 0x72, 0x74, 0xe0, 0x2c, 0x20, 0x6d, 0x69, 0x72, 0x69, 0x73, 0x20, 0x31, 0x38, 0x39, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x61, 0x20, 0x32, 0x39, 0x2e, 0x20, 0x6a, 0xbe, 0x6c, 0x69, 0x6a, 0xe0, 0x29, 0x20, 0x62, 0x69, 0x6a, 0x61, 0x20, 0x6e, 0xb4, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xba, 0x75, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x6f, 0x74, 0xe0, 0x6a, 0x73, 0x2c, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x61, 0x20, 0x70, 0xe0, 0x72, 0x73, 0x74, 0xe0, 0x76, 0x69, 0x73, 0x2e, 0x20, 0x4b, 0x6f, 0x70, 0x75, 0x6d, 0xe0, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x72, 0x61, 0x64, 0xb4, 0x6a, 0x61, 0x20, 0x76, 0x61, 0x69, 0x72, 0xe0, 0x6b, 0x20, 0x6e, 0x65, 0x6b, 0xe0, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x0a, 0x73, 0x6b, 0x61, 0x69, 0x74, 0xe0, 0x20, 0x39, 0x30, 0x30, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x31, 0x31, 0x30, 0x30, 0x20, 0x7a, 0xb4, 0x6d, 0xb2, 0x6a, 0x75, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x6b, 0x69, 0xe8, 0x75, 0x2e, 0x20, 0x53, 0x61, 0x76, 0x75, 0x73, 0x20, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x6e, 0xe0, 0x6b, 0x6f, 0x73, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x73, 0x20, 0x76, 0x69, 0xf1, 0xba, 0x20, 0x72, 0x61, 0x64, 0xb4, 0x6a, 0x61, 0x0a, 0x70, 0xb2, 0x64, 0xb2, 0x6a, 0x6f, 0x20, 0x64, 0x69, 0x76, 0x75, 0x20, 0x64, 0x7a, 0xb4, 0x76, 0x65, 0x73, 0x20, 0x67, 0x61, 0x64, 0x75, 0x20, 0x6c, 0x61, 0x69, 0x6b, 0xe0, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x6b, 0x20, 0x75, 0x7a, 0x73, 0x6b, 0x61, 0x74, 0xb4, 0x74, 0x73, 0x2c, 0x20, 0x6b, 0x61, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x62, 0xbe, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x20, 0x69, 0x72, 0x20, 0x69, 0x65, 0x74, 0x65, 0x6b, 0x6d, 0xb2, 0x6a, 0x69, 0x73, 0x0a, 0x32, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x73, 0x69, 0x6d, 0x74, 0x61, 0x20, 0x6d, 0xe0, 0x6b, 0x73, 0x6c, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x70, 0x20, 0x65, 0x6b, 0x73, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x66, 0x6f, 0x76, 0x69, 0x73, 0x6d, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLvIso885910);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-10'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lv'));
    });

    test('detect lv iso-8859-13', () {
      final detector = UCharDet();
      // dart format off
      final kLvIso885913 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x56, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x28, 0x6e, 0xee, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xf0, 0x75, 0x3a, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x64, 0x7a, 0x69, 0x6d, 0x69, 0x73, 0x20, 0x31, 0x38, 0x35, 0x33, 0x2e, 0x0a, 0x67, 0x61, 0x64, 0x61, 0x20, 0x33, 0x30, 0x2e, 0x20, 0x6d, 0x61, 0x72, 0x74, 0xe2, 0x2c, 0x20, 0x6d, 0x69, 0x72, 0x69, 0x73, 0x20, 0x31, 0x38, 0x39, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x61, 0x20, 0x32, 0x39, 0x2e, 0x20, 0x6a, 0xfb, 0x6c, 0x69, 0x6a, 0xe2, 0x29, 0x20, 0x62, 0x69, 0x6a, 0x61, 0x20, 0x6e, 0xee, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xf0, 0x75, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x6f, 0x74, 0xe2, 0x6a, 0x73, 0x2c, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x61, 0x20, 0x70, 0xe2, 0x72, 0x73, 0x74, 0xe2, 0x76, 0x69, 0x73, 0x2e, 0x20, 0x4b, 0x6f, 0x70, 0x75, 0x6d, 0xe2, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x72, 0x61, 0x64, 0xee, 0x6a, 0x61, 0x20, 0x76, 0x61, 0x69, 0x72, 0xe2, 0x6b, 0x20, 0x6e, 0x65, 0x6b, 0xe2, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x0a, 0x73, 0x6b, 0x61, 0x69, 0x74, 0xe2, 0x20, 0x39, 0x30, 0x30, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x31, 0x31, 0x30, 0x30, 0x20, 0x7a, 0xee, 0x6d, 0xe7, 0x6a, 0x75, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x6b, 0x69, 0xe8, 0x75, 0x2e, 0x20, 0x53, 0x61, 0x76, 0x75, 0x73, 0x20, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x6e, 0xe2, 0x6b, 0x6f, 0x73, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x73, 0x20, 0x76, 0x69, 0xf2, 0xf0, 0x20, 0x72, 0x61, 0x64, 0xee, 0x6a, 0x61, 0x0a, 0x70, 0xe7, 0x64, 0xe7, 0x6a, 0x6f, 0x20, 0x64, 0x69, 0x76, 0x75, 0x20, 0x64, 0x7a, 0xee, 0x76, 0x65, 0x73, 0x20, 0x67, 0x61, 0x64, 0x75, 0x20, 0x6c, 0x61, 0x69, 0x6b, 0xe2, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x6b, 0x20, 0x75, 0x7a, 0x73, 0x6b, 0x61, 0x74, 0xee, 0x74, 0x73, 0x2c, 0x20, 0x6b, 0x61, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x62, 0xfb, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x20, 0x69, 0x72, 0x20, 0x69, 0x65, 0x74, 0x65, 0x6b, 0x6d, 0xe7, 0x6a, 0x69, 0x73, 0x0a, 0x32, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x73, 0x69, 0x6d, 0x74, 0x61, 0x20, 0x6d, 0xe2, 0x6b, 0x73, 0x6c, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x70, 0x20, 0x65, 0x6b, 0x73, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x66, 0x6f, 0x76, 0x69, 0x73, 0x6d, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLvIso885913);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-13'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lv'));
    });

    test('detect lv iso-8859-4', () {
      final detector = UCharDet();
      // dart format off
      final kLvIso88594 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x56, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x28, 0x6e, 0xef, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xb9, 0x75, 0x3a, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x64, 0x7a, 0x69, 0x6d, 0x69, 0x73, 0x20, 0x31, 0x38, 0x35, 0x33, 0x2e, 0x0a, 0x67, 0x61, 0x64, 0x61, 0x20, 0x33, 0x30, 0x2e, 0x20, 0x6d, 0x61, 0x72, 0x74, 0xe0, 0x2c, 0x20, 0x6d, 0x69, 0x72, 0x69, 0x73, 0x20, 0x31, 0x38, 0x39, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x61, 0x20, 0x32, 0x39, 0x2e, 0x20, 0x6a, 0xfe, 0x6c, 0x69, 0x6a, 0xe0, 0x29, 0x20, 0x62, 0x69, 0x6a, 0x61, 0x20, 0x6e, 0xef, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xb9, 0x75, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x6f, 0x74, 0xe0, 0x6a, 0x73, 0x2c, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x61, 0x20, 0x70, 0xe0, 0x72, 0x73, 0x74, 0xe0, 0x76, 0x69, 0x73, 0x2e, 0x20, 0x4b, 0x6f, 0x70, 0x75, 0x6d, 0xe0, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x72, 0x61, 0x64, 0xef, 0x6a, 0x61, 0x20, 0x76, 0x61, 0x69, 0x72, 0xe0, 0x6b, 0x20, 0x6e, 0x65, 0x6b, 0xe0, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x0a, 0x73, 0x6b, 0x61, 0x69, 0x74, 0xe0, 0x20, 0x39, 0x30, 0x30, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x31, 0x31, 0x30, 0x30, 0x20, 0x7a, 0xef, 0x6d, 0xba, 0x6a, 0x75, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x6b, 0x69, 0xe8, 0x75, 0x2e, 0x20, 0x53, 0x61, 0x76, 0x75, 0x73, 0x20, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x6e, 0xe0, 0x6b, 0x6f, 0x73, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x73, 0x20, 0x76, 0x69, 0xf1, 0xb9, 0x20, 0x72, 0x61, 0x64, 0xef, 0x6a, 0x61, 0x0a, 0x70, 0xba, 0x64, 0xba, 0x6a, 0x6f, 0x20, 0x64, 0x69, 0x76, 0x75, 0x20, 0x64, 0x7a, 0xef, 0x76, 0x65, 0x73, 0x20, 0x67, 0x61, 0x64, 0x75, 0x20, 0x6c, 0x61, 0x69, 0x6b, 0xe0, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x6b, 0x20, 0x75, 0x7a, 0x73, 0x6b, 0x61, 0x74, 0xef, 0x74, 0x73, 0x2c, 0x20, 0x6b, 0x61, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x62, 0xfe, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x20, 0x69, 0x72, 0x20, 0x69, 0x65, 0x74, 0x65, 0x6b, 0x6d, 0xba, 0x6a, 0x69, 0x73, 0x0a, 0x32, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x73, 0x69, 0x6d, 0x74, 0x61, 0x20, 0x6d, 0xe0, 0x6b, 0x73, 0x6c, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x70, 0x20, 0x65, 0x6b, 0x73, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x66, 0x6f, 0x76, 0x69, 0x73, 0x6d, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLvIso88594);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-4'),
      );
      expect(candidates.first.language?.iso6391Code, equals('lv'));
    });

    test('detect lv utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kLvUtf8 = Uint8List.fromList([0x56, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x56, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x28, 0x6e, 0xc4, 0xab, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xc5, 0xa1, 0x75, 0x3a, 0x20, 0x56, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x65, 0x6d, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x68, 0x2c, 0x20, 0x64, 0x7a, 0x69, 0x6d, 0x69, 0x73, 0x20, 0x31, 0x38, 0x35, 0x33, 0x2e, 0x0a, 0x67, 0x61, 0x64, 0x61, 0x20, 0x33, 0x30, 0x2e, 0x20, 0x6d, 0x61, 0x72, 0x74, 0xc4, 0x81, 0x2c, 0x20, 0x6d, 0x69, 0x72, 0x69, 0x73, 0x20, 0x31, 0x38, 0x39, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x61, 0x20, 0x32, 0x39, 0x2e, 0x20, 0x6a, 0xc5, 0xab, 0x6c, 0x69, 0x6a, 0xc4, 0x81, 0x29, 0x20, 0x62, 0x69, 0x6a, 0x61, 0x20, 0x6e, 0xc4, 0xab, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x65, 0xc5, 0xa1, 0x75, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x6f, 0x74, 0xc4, 0x81, 0x6a, 0x73, 0x2c, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x61, 0x20, 0x70, 0xc4, 0x81, 0x72, 0x73, 0x74, 0xc4, 0x81, 0x76, 0x69, 0x73, 0x2e, 0x20, 0x4b, 0x6f, 0x70, 0x75, 0x6d, 0xc4, 0x81, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x72, 0x61, 0x64, 0xc4, 0xab, 0x6a, 0x61, 0x20, 0x76, 0x61, 0x69, 0x72, 0xc4, 0x81, 0x6b, 0x20, 0x6e, 0x65, 0x6b, 0xc4, 0x81, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x0a, 0x73, 0x6b, 0x61, 0x69, 0x74, 0xc4, 0x81, 0x20, 0x39, 0x30, 0x30, 0x20, 0x67, 0x6c, 0x65, 0x7a, 0x6e, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x31, 0x31, 0x30, 0x30, 0x20, 0x7a, 0xc4, 0xab, 0x6d, 0xc4, 0x93, 0x6a, 0x75, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x6b, 0x69, 0xc4, 0x8d, 0x75, 0x2e, 0x20, 0x53, 0x61, 0x76, 0x75, 0x73, 0x20, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x6e, 0xc4, 0x81, 0x6b, 0x6f, 0x73, 0x20, 0x64, 0x61, 0x72, 0x62, 0x75, 0x73, 0x20, 0x76, 0x69, 0xc5, 0x86, 0xc5, 0xa1, 0x20, 0x72, 0x61, 0x64, 0xc4, 0xab, 0x6a, 0x61, 0x0a, 0x70, 0xc4, 0x93, 0x64, 0xc4, 0x93, 0x6a, 0x6f, 0x20, 0x64, 0x69, 0x76, 0x75, 0x20, 0x64, 0x7a, 0xc4, 0xab, 0x76, 0x65, 0x73, 0x20, 0x67, 0x61, 0x64, 0x75, 0x20, 0x6c, 0x61, 0x69, 0x6b, 0xc4, 0x81, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x6b, 0x20, 0x75, 0x7a, 0x73, 0x6b, 0x61, 0x74, 0xc4, 0xab, 0x74, 0x73, 0x2c, 0x20, 0x6b, 0x61, 0x20, 0x76, 0x61, 0x6e, 0x20, 0x47, 0x6f, 0x67, 0x73, 0x20, 0x62, 0xc5, 0xab, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x20, 0x69, 0x72, 0x20, 0x69, 0x65, 0x74, 0x65, 0x6b, 0x6d, 0xc4, 0x93, 0x6a, 0x69, 0x73, 0x0a, 0x32, 0x30, 0x2e, 0x20, 0x67, 0x61, 0x64, 0x73, 0x69, 0x6d, 0x74, 0x61, 0x20, 0x6d, 0xc4, 0x81, 0x6b, 0x73, 0x6c, 0x75, 0x2c, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x70, 0x20, 0x65, 0x6b, 0x73, 0x70, 0x72, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x73, 0x6d, 0x75, 0x20, 0x75, 0x6e, 0x20, 0x66, 0x6f, 0x76, 0x69, 0x73, 0x6d, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kLvUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('lv'));
    });

    test('detect mk ibm855', () {
      final detector = UCharDet();
      // dart format off
      final kMkIbm855 = Uint8List.fromList([0xb6, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xa0, 0xa4, 0xb7, 0x8e, 0xa0, 0x20, 0xb7, 0xd0, 0xb7, 0x20, 0xf3, 0xb7, 0xd2, 0xe3, 0xc6, 0xb7, 0x20, 0xe3, 0xd6, 0xd4, 0x20, 0xa8, 0x20, 0xe3, 0xd6, 0xe3, 0xe5, 0xd6, 0x8e, 0xa2, 0xa0, 0x20, 0xd4, 0xa0, 0x20, 0xe7, 0xe3, 0xd8, 0xd6, 0xe1, 0xe7, 0xeb, 0xa0, 0x92, 0xa8, 0x20, 0xd4, 0xa0, 0x20, 0xd2, 0xa8, 0xe5, 0xa0, 0xa2, 0xd6, 0xd0, 0xb7, 0xf3, 0xd2, 0xd6, 0xe5, 0x20, 0xb7, 0x20, 0xd4, 0xb7, 0xe3, 0xc6, 0xa0, 0x20, 0xe5, 0xa8, 0xd0, 0xa8, 0xe3, 0xd4, 0xa0, 0x20, 0xe5, 0xa8, 0xd2, 0xd8, 0xa8, 0xe1, 0xa0, 0xe5, 0xe7, 0xe1, 0xa0, 0x20, 0xc6, 0xa0, 0x8e, 0x20, 0xd6, 0xa6, 0xe1, 0xa8, 0xa6, 0xa8, 0xd4, 0xb7, 0x20, 0xe9, 0xb7, 0xeb, 0xd6, 0xe5, 0xd4, 0xb7, 0x20, 0xf3, 0xa0, 0x20, 0xeb, 0xe1, 0xa8, 0xd2, 0xa8, 0x20, 0xd4, 0xa0, 0x20, 0xf3, 0xb7, 0xd2, 0xa0, 0xe5, 0xa0, 0x2e, 0x20, 0xec, 0xd6, 0x20, 0xb5, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xa0, 0xe5, 0xd6, 0xe1, 0xb7, 0x20, 0xe3, 0xd8, 0xa0, 0x82, 0xa0, 0xa0, 0xe5, 0x20, 0xd8, 0xd6, 0xac, 0xd6, 0xd0, 0xa8, 0xd2, 0x20, 0xa2, 0xe1, 0xd6, 0x8e, 0x20, 0xc6, 0xe1, 0xf3, 0xd4, 0xa8, 0xd4, 0xb7, 0x20, 0xe9, 0xb7, 0xeb, 0xd6, 0xe5, 0xd4, 0xb7, 0x20, 0xb7, 0x20, 0xd2, 0xa0, 0xd0, 0x20, 0xa2, 0xe1, 0xd6, 0x8e, 0x20, 0xa4, 0xb7, 0xa4, 0xa0, 0xfb, 0xb7, 0x2e, 0x20, 0xd5, 0xa0, 0x20, 0xa4, 0xb7, 0xa4, 0xa0, 0xfb, 0xb7, 0xe5, 0xa8, 0x20, 0xc6, 0xa0, 0xc6, 0xd6, 0x20, 0xd2, 0xa8, 0xfb, 0xc6, 0xa0, 0xe5, 0xa0, 0x20, 0xe3, 0xa0, 0xd2, 0xd6, 0x20, 0xd2, 0xa0, 0xd0, 0xc6, 0xe7, 0x20, 0xb7, 0xd2, 0x20, 0xa8, 0x20, 0xe3, 0xd4, 0xb7, 0xe9, 0xa8, 0xd4, 0xa0, 0x20, 0xe5, 0xa8, 0xd0, 0xa8, 0xe3, 0xd4, 0xa0, 0xe5, 0xa0, 0x20, 0xe5, 0xa8, 0xd2, 0xd8, 0xa8, 0xe1, 0xa0, 0xe5, 0xe7, 0xe1, 0xa0, 0x20, 0xe3, 0xa8, 0x20, 0xa2, 0xe7, 0xa6, 0xa0, 0xe5, 0x20, 0xd0, 0xa8, 0xe3, 0xd4, 0xd6, 0x20, 0xb7, 0x20, 0xd4, 0xa8, 0x20, 0xe3, 0xa8, 0x20, 0xe3, 0xd2, 0xa8, 0xe5, 0xa0, 0xa0, 0xe5, 0x20, 0xf3, 0xa0, 0x20, 0xeb, 0xb7, 0xe3, 0xe5, 0xb7, 0xd4, 0xe3, 0xc6, 0xb7, 0x20, 0xb5, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xa0, 0xe5, 0xd6, 0xe1, 0xb7, 0x2e, 0x20, 0xdd, 0xd6, 0xeb, 0xa8, 0x96, 0xa8, 0xe5, 0xd6, 0x20, 0xb5, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xa0, 0xe5, 0xd6, 0xe1, 0xb7, 0x20, 0xa6, 0xd6, 0xa8, 0xc6, 0xa0, 0x20, 0xe3, 0xa8, 0x20, 0xa0, 0xc6, 0xe5, 0xb7, 0xeb, 0xd4, 0xb7, 0x20, 0xe3, 0xc6, 0xd0, 0xa0, 0xa6, 0xb7, 0xe1, 0xa0, 0xa0, 0xe5, 0x20, 0xb5, 0xe1, 0xa0, 0xd4, 0xa0, 0x20, 0xeb, 0xd6, 0x20, 0xf3, 0xa0, 0xe3, 0xd6, 0xd0, 0xd4, 0xb7, 0xf5, 0xe5, 0xa0, 0xe5, 0xa0, 0x20, 0x28, 0xd8, 0xe1, 0x2e, 0x20, 0xeb, 0xa8, 0xe1, 0xeb, 0xa8, 0xe1, 0xb7, 0xfb, 0xc6, 0xa0, 0x29, 0x20, 0xb7, 0xd0, 0xb7, 0x20, 0xe1, 0xa8, 0xf3, 0xa8, 0xe1, 0xeb, 0xd4, 0xb7, 0x20, 0xd2, 0xa0, 0xe3, 0xe5, 0xb7, 0x20, 0xeb, 0xd6, 0x20, 0xe5, 0xa8, 0xd0, 0xd6, 0xe5, 0xd6, 0x20, 0x28, 0xeb, 0xd6, 0x20, 0xd2, 0xa0, 0xe3, 0xd4, 0xd6, 0xe5, 0xd6, 0x20, 0xe5, 0xc6, 0xb7, 0xeb, 0xd6, 0x29, 0x2e, 0x20, 0xe6, 0xb7, 0xa8, 0x20, 0xd2, 0xd6, 0xe9, 0xa0, 0xe5, 0x20, 0xa6, 0xa0, 0x20, 0xe3, 0xa8, 0x20, 0xe1, 0xa0, 0xf3, 0xa2, 0xe7, 0xa6, 0xa0, 0xe5, 0x20, 0xd8, 0xd6, 0xeb, 0xa8, 0x96, 0xa8, 0xd8, 0xa0, 0xe5, 0xb7, 0x20, 0xf3, 0xa0, 0x20, 0xeb, 0xe1, 0xa8, 0xd2, 0xa8, 0x20, 0xd4, 0xa0, 0x20, 0xf3, 0xb7, 0xd2, 0xa0, 0xe5, 0xa0, 0x2e, 0x20, 0xd1, 0xa0, 0xa6, 0xd4, 0xd6, 0xc6, 0xe1, 0xeb, 0xd4, 0xb7, 0xe5, 0xa8, 0x20, 0xe9, 0xb7, 0xeb, 0xd6, 0xe5, 0xd4, 0xb7, 0x20, 0xd2, 0xd6, 0xe1, 0xa0, 0xa0, 0xe5, 0x20, 0xa6, 0xa0, 0x20, 0xb5, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xb7, 0xe1, 0xa0, 0xa0, 0xe5, 0x20, 0xe5, 0xa0, 0xd2, 0xe7, 0x20, 0xc6, 0xa0, 0xa6, 0xa8, 0x20, 0xf5, 0xe5, 0xd6, 0x20, 0xd4, 0xa0, 0xa6, 0xeb, 0xd6, 0xe1, 0xa8, 0xf5, 0xd4, 0xa0, 0xe5, 0xa0, 0x20, 0xe5, 0xa8, 0xd2, 0xd8, 0xa8, 0xe1, 0xa0, 0xe5, 0xe7, 0xe1, 0xa0, 0x20, 0xe3, 0xa8, 0x20, 0xe3, 0xd8, 0xe7, 0xf5, 0xe5, 0xa0, 0x20, 0xd8, 0xd6, 0xa6, 0x20, 0xe5, 0xd6, 0xfb, 0xc6, 0xa0, 0x20, 0xd4, 0xa0, 0x20, 0xe3, 0xd2, 0xe1, 0xf3, 0xd4, 0xe7, 0xeb, 0xa0, 0x92, 0xa8, 0x2e, 0x20, 0xa9, 0xa6, 0xd4, 0xa0, 0xc6, 0xeb, 0xd6, 0x20, 0xd4, 0xa0, 0x20, 0xb5, 0xb7, 0xa2, 0xa8, 0xe1, 0xd4, 0xa0, 0xa4, 0xb7, 0x8e, 0xa0, 0x20, 0xf3, 0xa0, 0x20, 0xeb, 0xe1, 0xa8, 0xd2, 0xa8, 0x20, 0xd4, 0xa0, 0x20, 0xd0, 0xa8, 0xe5, 0xd6, 0x20, 0xa8, 0x20, 0xa8, 0xe3, 0xe5, 0xb7, 0xeb, 0xa0, 0xa4, 0xb7, 0x8e, 0xa0, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMkIbm855);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm855'));
      expect(candidates.first.language?.iso6391Code, equals('mk'));
    });

    test('detect mk iso-8859-5', () {
      final detector = UCharDet();
      // dart format off
      final kMkIso88595 = Uint8List.fromList([0xc5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd0, 0xe6, 0xd8, 0xf8, 0xd0, 0x20, 0xd8, 0xdb, 0xd8, 0x20, 0xd7, 0xd8, 0xdc, 0xe1, 0xda, 0xd8, 0x20, 0xe1, 0xde, 0xdd, 0x20, 0xd5, 0x20, 0xe1, 0xde, 0xe1, 0xe2, 0xde, 0xf8, 0xd1, 0xd0, 0x20, 0xdd, 0xd0, 0x20, 0xe3, 0xe1, 0xdf, 0xde, 0xe0, 0xe3, 0xd2, 0xd0, 0xfa, 0xd5, 0x20, 0xdd, 0xd0, 0x20, 0xdc, 0xd5, 0xe2, 0xd0, 0xd1, 0xde, 0xdb, 0xd8, 0xd7, 0xdc, 0xde, 0xe2, 0x20, 0xd8, 0x20, 0xdd, 0xd8, 0xe1, 0xda, 0xd0, 0x20, 0xe2, 0xd5, 0xdb, 0xd5, 0xe1, 0xdd, 0xd0, 0x20, 0xe2, 0xd5, 0xdc, 0xdf, 0xd5, 0xe0, 0xd0, 0xe2, 0xe3, 0xe0, 0xd0, 0x20, 0xda, 0xd0, 0xf8, 0x20, 0xde, 0xd4, 0xe0, 0xd5, 0xd4, 0xd5, 0xdd, 0xd8, 0x20, 0xd6, 0xd8, 0xd2, 0xde, 0xe2, 0xdd, 0xd8, 0x20, 0xd7, 0xd0, 0x20, 0xd2, 0xe0, 0xd5, 0xdc, 0xd5, 0x20, 0xdd, 0xd0, 0x20, 0xd7, 0xd8, 0xdc, 0xd0, 0xe2, 0xd0, 0x2e, 0x20, 0xb2, 0xde, 0x20, 0xe5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd0, 0xe2, 0xde, 0xe0, 0xd8, 0x20, 0xe1, 0xdf, 0xd0, 0xf3, 0xd0, 0xd0, 0xe2, 0x20, 0xdf, 0xde, 0xd3, 0xde, 0xdb, 0xd5, 0xdc, 0x20, 0xd1, 0xe0, 0xde, 0xf8, 0x20, 0xda, 0xe0, 0xd7, 0xdd, 0xd5, 0xdd, 0xd8, 0x20, 0xd6, 0xd8, 0xd2, 0xde, 0xe2, 0xdd, 0xd8, 0x20, 0xd8, 0x20, 0xdc, 0xd0, 0xdb, 0x20, 0xd1, 0xe0, 0xde, 0xf8, 0x20, 0xe6, 0xd8, 0xe6, 0xd0, 0xe7, 0xd8, 0x2e, 0x20, 0xbd, 0xd0, 0x20, 0xe6, 0xd8, 0xe6, 0xd0, 0xe7, 0xd8, 0xe2, 0xd5, 0x20, 0xda, 0xd0, 0xda, 0xde, 0x20, 0xdc, 0xd5, 0xe7, 0xda, 0xd0, 0xe2, 0xd0, 0x20, 0xe1, 0xd0, 0xdc, 0xde, 0x20, 0xdc, 0xd0, 0xdb, 0xda, 0xe3, 0x20, 0xd8, 0xdc, 0x20, 0xd5, 0x20, 0xe1, 0xdd, 0xd8, 0xd6, 0xd5, 0xdd, 0xd0, 0x20, 0xe2, 0xd5, 0xdb, 0xd5, 0xe1, 0xdd, 0xd0, 0xe2, 0xd0, 0x20, 0xe2, 0xd5, 0xdc, 0xdf, 0xd5, 0xe0, 0xd0, 0xe2, 0xe3, 0xe0, 0xd0, 0x20, 0xe1, 0xd5, 0x20, 0xd1, 0xe3, 0xd4, 0xd0, 0xe2, 0x20, 0xdb, 0xd5, 0xe1, 0xdd, 0xde, 0x20, 0xd8, 0x20, 0xdd, 0xd5, 0x20, 0xe1, 0xd5, 0x20, 0xe1, 0xdc, 0xd5, 0xe2, 0xd0, 0xd0, 0xe2, 0x20, 0xd7, 0xd0, 0x20, 0xd2, 0xd8, 0xe1, 0xe2, 0xd8, 0xdd, 0xe1, 0xda, 0xd8, 0x20, 0xe5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd0, 0xe2, 0xde, 0xe0, 0xd8, 0x2e, 0x20, 0xbf, 0xde, 0xd2, 0xd5, 0xfc, 0xd5, 0xe2, 0xde, 0x20, 0xe5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd0, 0xe2, 0xde, 0xe0, 0xd8, 0x20, 0xd4, 0xde, 0xd5, 0xda, 0xd0, 0x20, 0xe1, 0xd5, 0x20, 0xd0, 0xda, 0xe2, 0xd8, 0xd2, 0xdd, 0xd8, 0x20, 0xe1, 0xda, 0xdb, 0xd0, 0xd4, 0xd8, 0xe0, 0xd0, 0xd0, 0xe2, 0x20, 0xe5, 0xe0, 0xd0, 0xdd, 0xd0, 0x20, 0xd2, 0xde, 0x20, 0xd7, 0xd0, 0xe1, 0xde, 0xdb, 0xdd, 0xd8, 0xe8, 0xe2, 0xd0, 0xe2, 0xd0, 0x20, 0x28, 0xdf, 0xe0, 0x2e, 0x20, 0xd2, 0xd5, 0xe0, 0xd2, 0xd5, 0xe0, 0xd8, 0xe7, 0xda, 0xd0, 0x29, 0x20, 0xd8, 0xdb, 0xd8, 0x20, 0xe0, 0xd5, 0xd7, 0xd5, 0xe0, 0xd2, 0xdd, 0xd8, 0x20, 0xdc, 0xd0, 0xe1, 0xe2, 0xd8, 0x20, 0xd2, 0xde, 0x20, 0xe2, 0xd5, 0xdb, 0xde, 0xe2, 0xde, 0x20, 0x28, 0xd2, 0xde, 0x20, 0xdc, 0xd0, 0xe1, 0xdd, 0xde, 0xe2, 0xde, 0x20, 0xe2, 0xda, 0xd8, 0xd2, 0xde, 0x29, 0x2e, 0x20, 0xc2, 0xd8, 0xd5, 0x20, 0xdc, 0xde, 0xd6, 0xd0, 0xe2, 0x20, 0xd4, 0xd0, 0x20, 0xe1, 0xd5, 0x20, 0xe0, 0xd0, 0xd7, 0xd1, 0xe3, 0xd4, 0xd0, 0xe2, 0x20, 0xdf, 0xde, 0xd2, 0xd5, 0xfc, 0xd5, 0xdf, 0xd0, 0xe2, 0xd8, 0x20, 0xd7, 0xd0, 0x20, 0xd2, 0xe0, 0xd5, 0xdc, 0xd5, 0x20, 0xdd, 0xd0, 0x20, 0xd7, 0xd8, 0xdc, 0xd0, 0xe2, 0xd0, 0x2e, 0x20, 0xbb, 0xd0, 0xd4, 0xdd, 0xde, 0xda, 0xe0, 0xd2, 0xdd, 0xd8, 0xe2, 0xd5, 0x20, 0xd6, 0xd8, 0xd2, 0xde, 0xe2, 0xdd, 0xd8, 0x20, 0xdc, 0xde, 0xe0, 0xd0, 0xd0, 0xe2, 0x20, 0xd4, 0xd0, 0x20, 0xe5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd8, 0xe0, 0xd0, 0xd0, 0xe2, 0x20, 0xe2, 0xd0, 0xdc, 0xe3, 0x20, 0xda, 0xd0, 0xd4, 0xd5, 0x20, 0xe8, 0xe2, 0xde, 0x20, 0xdd, 0xd0, 0xd4, 0xd2, 0xde, 0xe0, 0xd5, 0xe8, 0xdd, 0xd0, 0xe2, 0xd0, 0x20, 0xe2, 0xd5, 0xdc, 0xdf, 0xd5, 0xe0, 0xd0, 0xe2, 0xe3, 0xe0, 0xd0, 0x20, 0xe1, 0xd5, 0x20, 0xe1, 0xdf, 0xe3, 0xe8, 0xe2, 0xd0, 0x20, 0xdf, 0xde, 0xd4, 0x20, 0xe2, 0xde, 0xe7, 0xda, 0xd0, 0x20, 0xdd, 0xd0, 0x20, 0xe1, 0xdc, 0xe0, 0xd7, 0xdd, 0xe3, 0xd2, 0xd0, 0xfa, 0xd5, 0x2e, 0x20, 0xb5, 0xd4, 0xdd, 0xd0, 0xda, 0xd2, 0xde, 0x20, 0xdd, 0xd0, 0x20, 0xe5, 0xd8, 0xd1, 0xd5, 0xe0, 0xdd, 0xd0, 0xe6, 0xd8, 0xf8, 0xd0, 0x20, 0xd7, 0xd0, 0x20, 0xd2, 0xe0, 0xd5, 0xdc, 0xd5, 0x20, 0xdd, 0xd0, 0x20, 0xdb, 0xd5, 0xe2, 0xde, 0x20, 0xd5, 0x20, 0xd5, 0xe1, 0xe2, 0xd8, 0xd2, 0xd0, 0xe6, 0xd8, 0xf8, 0xd0, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMkIso88595);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-5'),
      );
      expect(candidates.first.language?.iso6391Code, equals('mk'));
    });

    test('detect mk utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kMkUtf8 = Uint8List.fromList([0xd0, 0xa5, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbd, 0x20, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb1, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x9a, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x98, 0x20, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x92, 0xd0, 0xbe, 0x20, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x93, 0xd0, 0xb0, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc, 0x20, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x98, 0x20, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbb, 0x20, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x98, 0x20, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xb0, 0x20, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xba, 0xd1, 0x83, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x9c, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x88, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0x28, 0xd0, 0xbf, 0xd1, 0x80, 0x2e, 0x20, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xba, 0xd0, 0xb0, 0x29, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0x28, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0x29, 0x2e, 0x20, 0xd0, 0xa2, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x9c, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x9b, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0x20, 0xd1, 0x88, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x83, 0xd1, 0x88, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xbc, 0xd1, 0x80, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x9a, 0xd0, 0xb5, 0x2e, 0x20, 0xd0, 0x95, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb5, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb0, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMkUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('mk'));
    });

    test('detect mk windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kMkWindows1251 = Uint8List.fromList([0xd5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe0, 0xf6, 0xe8, 0xbc, 0xe0, 0x20, 0xe8, 0xeb, 0xe8, 0x20, 0xe7, 0xe8, 0xec, 0xf1, 0xea, 0xe8, 0x20, 0xf1, 0xee, 0xed, 0x20, 0xe5, 0x20, 0xf1, 0xee, 0xf1, 0xf2, 0xee, 0xbc, 0xe1, 0xe0, 0x20, 0xed, 0xe0, 0x20, 0xf3, 0xf1, 0xef, 0xee, 0xf0, 0xf3, 0xe2, 0xe0, 0x9c, 0xe5, 0x20, 0xed, 0xe0, 0x20, 0xec, 0xe5, 0xf2, 0xe0, 0xe1, 0xee, 0xeb, 0xe8, 0xe7, 0xec, 0xee, 0xf2, 0x20, 0xe8, 0x20, 0xed, 0xe8, 0xf1, 0xea, 0xe0, 0x20, 0xf2, 0xe5, 0xeb, 0xe5, 0xf1, 0xed, 0xe0, 0x20, 0xf2, 0xe5, 0xec, 0xef, 0xe5, 0xf0, 0xe0, 0xf2, 0xf3, 0xf0, 0xe0, 0x20, 0xea, 0xe0, 0xbc, 0x20, 0xee, 0xe4, 0xf0, 0xe5, 0xe4, 0xe5, 0xed, 0xe8, 0x20, 0xe6, 0xe8, 0xe2, 0xee, 0xf2, 0xed, 0xe8, 0x20, 0xe7, 0xe0, 0x20, 0xe2, 0xf0, 0xe5, 0xec, 0xe5, 0x20, 0xed, 0xe0, 0x20, 0xe7, 0xe8, 0xec, 0xe0, 0xf2, 0xe0, 0x2e, 0x20, 0xc2, 0xee, 0x20, 0xf5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe0, 0xf2, 0xee, 0xf0, 0xe8, 0x20, 0xf1, 0xef, 0xe0, 0x83, 0xe0, 0xe0, 0xf2, 0x20, 0xef, 0xee, 0xe3, 0xee, 0xeb, 0xe5, 0xec, 0x20, 0xe1, 0xf0, 0xee, 0xbc, 0x20, 0xea, 0xf0, 0xe7, 0xed, 0xe5, 0xed, 0xe8, 0x20, 0xe6, 0xe8, 0xe2, 0xee, 0xf2, 0xed, 0xe8, 0x20, 0xe8, 0x20, 0xec, 0xe0, 0xeb, 0x20, 0xe1, 0xf0, 0xee, 0xbc, 0x20, 0xf6, 0xe8, 0xf6, 0xe0, 0xf7, 0xe8, 0x2e, 0x20, 0xcd, 0xe0, 0x20, 0xf6, 0xe8, 0xf6, 0xe0, 0xf7, 0xe8, 0xf2, 0xe5, 0x20, 0xea, 0xe0, 0xea, 0xee, 0x20, 0xec, 0xe5, 0xf7, 0xea, 0xe0, 0xf2, 0xe0, 0x20, 0xf1, 0xe0, 0xec, 0xee, 0x20, 0xec, 0xe0, 0xeb, 0xea, 0xf3, 0x20, 0xe8, 0xec, 0x20, 0xe5, 0x20, 0xf1, 0xed, 0xe8, 0xe6, 0xe5, 0xed, 0xe0, 0x20, 0xf2, 0xe5, 0xeb, 0xe5, 0xf1, 0xed, 0xe0, 0xf2, 0xe0, 0x20, 0xf2, 0xe5, 0xec, 0xef, 0xe5, 0xf0, 0xe0, 0xf2, 0xf3, 0xf0, 0xe0, 0x20, 0xf1, 0xe5, 0x20, 0xe1, 0xf3, 0xe4, 0xe0, 0xf2, 0x20, 0xeb, 0xe5, 0xf1, 0xed, 0xee, 0x20, 0xe8, 0x20, 0xed, 0xe5, 0x20, 0xf1, 0xe5, 0x20, 0xf1, 0xec, 0xe5, 0xf2, 0xe0, 0xe0, 0xf2, 0x20, 0xe7, 0xe0, 0x20, 0xe2, 0xe8, 0xf1, 0xf2, 0xe8, 0xed, 0xf1, 0xea, 0xe8, 0x20, 0xf5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe0, 0xf2, 0xee, 0xf0, 0xe8, 0x2e, 0x20, 0xcf, 0xee, 0xe2, 0xe5, 0x9d, 0xe5, 0xf2, 0xee, 0x20, 0xf5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe0, 0xf2, 0xee, 0xf0, 0xe8, 0x20, 0xe4, 0xee, 0xe5, 0xea, 0xe0, 0x20, 0xf1, 0xe5, 0x20, 0xe0, 0xea, 0xf2, 0xe8, 0xe2, 0xed, 0xe8, 0x20, 0xf1, 0xea, 0xeb, 0xe0, 0xe4, 0xe8, 0xf0, 0xe0, 0xe0, 0xf2, 0x20, 0xf5, 0xf0, 0xe0, 0xed, 0xe0, 0x20, 0xe2, 0xee, 0x20, 0xe7, 0xe0, 0xf1, 0xee, 0xeb, 0xed, 0xe8, 0xf8, 0xf2, 0xe0, 0xf2, 0xe0, 0x20, 0x28, 0xef, 0xf0, 0x2e, 0x20, 0xe2, 0xe5, 0xf0, 0xe2, 0xe5, 0xf0, 0xe8, 0xf7, 0xea, 0xe0, 0x29, 0x20, 0xe8, 0xeb, 0xe8, 0x20, 0xf0, 0xe5, 0xe7, 0xe5, 0xf0, 0xe2, 0xed, 0xe8, 0x20, 0xec, 0xe0, 0xf1, 0xf2, 0xe8, 0x20, 0xe2, 0xee, 0x20, 0xf2, 0xe5, 0xeb, 0xee, 0xf2, 0xee, 0x20, 0x28, 0xe2, 0xee, 0x20, 0xec, 0xe0, 0xf1, 0xed, 0xee, 0xf2, 0xee, 0x20, 0xf2, 0xea, 0xe8, 0xe2, 0xee, 0x29, 0x2e, 0x20, 0xd2, 0xe8, 0xe5, 0x20, 0xec, 0xee, 0xe6, 0xe0, 0xf2, 0x20, 0xe4, 0xe0, 0x20, 0xf1, 0xe5, 0x20, 0xf0, 0xe0, 0xe7, 0xe1, 0xf3, 0xe4, 0xe0, 0xf2, 0x20, 0xef, 0xee, 0xe2, 0xe5, 0x9d, 0xe5, 0xef, 0xe0, 0xf2, 0xe8, 0x20, 0xe7, 0xe0, 0x20, 0xe2, 0xf0, 0xe5, 0xec, 0xe5, 0x20, 0xed, 0xe0, 0x20, 0xe7, 0xe8, 0xec, 0xe0, 0xf2, 0xe0, 0x2e, 0x20, 0xcb, 0xe0, 0xe4, 0xed, 0xee, 0xea, 0xf0, 0xe2, 0xed, 0xe8, 0xf2, 0xe5, 0x20, 0xe6, 0xe8, 0xe2, 0xee, 0xf2, 0xed, 0xe8, 0x20, 0xec, 0xee, 0xf0, 0xe0, 0xe0, 0xf2, 0x20, 0xe4, 0xe0, 0x20, 0xf5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe8, 0xf0, 0xe0, 0xe0, 0xf2, 0x20, 0xf2, 0xe0, 0xec, 0xf3, 0x20, 0xea, 0xe0, 0xe4, 0xe5, 0x20, 0xf8, 0xf2, 0xee, 0x20, 0xed, 0xe0, 0xe4, 0xe2, 0xee, 0xf0, 0xe5, 0xf8, 0xed, 0xe0, 0xf2, 0xe0, 0x20, 0xf2, 0xe5, 0xec, 0xef, 0xe5, 0xf0, 0xe0, 0xf2, 0xf3, 0xf0, 0xe0, 0x20, 0xf1, 0xe5, 0x20, 0xf1, 0xef, 0xf3, 0xf8, 0xf2, 0xe0, 0x20, 0xef, 0xee, 0xe4, 0x20, 0xf2, 0xee, 0xf7, 0xea, 0xe0, 0x20, 0xed, 0xe0, 0x20, 0xf1, 0xec, 0xf0, 0xe7, 0xed, 0xf3, 0xe2, 0xe0, 0x9c, 0xe5, 0x2e, 0x20, 0xc5, 0xe4, 0xed, 0xe0, 0xea, 0xe2, 0xee, 0x20, 0xed, 0xe0, 0x20, 0xf5, 0xe8, 0xe1, 0xe5, 0xf0, 0xed, 0xe0, 0xf6, 0xe8, 0xbc, 0xe0, 0x20, 0xe7, 0xe0, 0x20, 0xe2, 0xf0, 0xe5, 0xec, 0xe5, 0x20, 0xed, 0xe0, 0x20, 0xeb, 0xe5, 0xf2, 0xee, 0x20, 0xe5, 0x20, 0xe5, 0xf1, 0xf2, 0xe8, 0xe2, 0xe0, 0xf6, 0xe8, 0xbc, 0xe0, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMkWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('mk'));
    });

    test('detect mt iso-8859-3', () {
      final detector = UCharDet();
      // dart format off
      final kMtIso88593 = Uint8List.fromList([0x49, 0x6c, 0x2d, 0x4d, 0x61, 0x6c, 0x74, 0x69, 0x20, 0x68, 0x75, 0x77, 0x61, 0x20, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x6e, 0x61, 0x7a, 0x7a, 0x6a, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x20, 0x74, 0x61, 0x72, 0x2d, 0x52, 0x65, 0x70, 0x75, 0x62, 0x62, 0x6c, 0x69, 0x6b, 0x61, 0x20, 0x74, 0x61, 0x27, 0x20, 0x4d, 0x61, 0x6c, 0x74, 0x61, 0x2e, 0x20, 0x48, 0x75, 0x77, 0x61, 0x20, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x75, 0x66, 0x66, 0x69, 0xe5, 0x6a, 0x61, 0x6c, 0x69, 0x20, 0x66, 0x6c, 0x69, 0x6d, 0x6b, 0x69, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x6c, 0x2d, 0x49, 0x6e, 0x67, 0x6c, 0x69, 0xbf, 0x3b, 0x20, 0x6b, 0x69, 0x66, 0x20, 0x75, 0x6b, 0x6f, 0x6c, 0x6c, 0x20, 0x77, 0x69, 0x65, 0xb1, 0x65, 0x64, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x6e, 0x61, 0x20, 0x75, 0x66, 0x66, 0x69, 0xe5, 0x6a, 0x61, 0x6c, 0x69, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x55, 0x6e, 0x6a, 0x6f, 0x6e, 0x69, 0x20, 0x45, 0x77, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x20, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x67, 0xb1, 0x61, 0x6e, 0x64, 0x75, 0x20, 0x73, 0x69, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x75, 0x20, 0x67, 0xb1, 0x65, 0x72, 0x71, 0x20, 0x73, 0x65, 0x6d, 0x69, 0x74, 0x69, 0x6b, 0x75, 0x2c, 0x20, 0x74, 0x61, 0x27, 0x20, 0x64, 0x6a, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x20, 0x47, 0xb1, 0x61, 0x72, 0x62, 0x69, 0x20, 0x6c, 0x69, 0x20, 0xf5, 0x65, 0x6a, 0x20, 0x6d, 0x69, 0x74, 0x2d, 0x54, 0x72, 0x61, 0x6d, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x61, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x41, 0x66, 0x72, 0x69, 0x6b, 0x61, 0x2c, 0x20, 0x67, 0xb1, 0x61, 0x6c, 0xb1, 0x65, 0x6b, 0x6b, 0x20, 0x71, 0x61, 0x74, 0x74, 0x20, 0x6d, 0x61, 0x20, 0x6b, 0x65, 0x6c, 0x6c, 0x75, 0x20, 0x72, 0x61, 0x62, 0x74, 0x61, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x2d, 0x71, 0x72, 0x69, 0x62, 0x20, 0x6d, 0x61, 0x6c, 0x2d, 0x47, 0xb1, 0x61, 0x72, 0x62, 0x69, 0x20, 0x4b, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x6b, 0x75, 0x2e, 0x20, 0x49, 0xbf, 0x64, 0x61, 0x20, 0x74, 0x75, 0x6c, 0x20, 0x69, 0xbf, 0x2d, 0xbf, 0x6d, 0x69, 0x6e, 0x69, 0x6a, 0x69, 0x65, 0x74, 0x2c, 0x20, 0x6d, 0x69, 0x6e, 0xb1, 0x61, 0x62, 0x62, 0x61, 0x20, 0x70, 0x72, 0x6f, 0xe5, 0x65, 0x73, 0x73, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x69, 0x7a, 0x7a, 0x61, 0x7a, 0x7a, 0x6a, 0x6f, 0x6e, 0x69, 0x20, 0x74, 0x61, 0x27, 0x20, 0x4d, 0x61, 0x6c, 0x74, 0x61, 0x2c, 0x20, 0x62, 0x64, 0x65, 0x77, 0x20, 0x64, 0x65, 0xb1, 0x6c, 0x69, 0x6e, 0x20, 0x62, 0x6f, 0x73, 0x74, 0x61, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x20, 0x6c, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x73, 0x74, 0x69, 0xe5, 0x69, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x2d, 0x49, 0x73, 0x71, 0x61, 0x6c, 0x6c, 0x69, 0x2c, 0x20, 0x64, 0x6a, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x20, 0x74, 0x61, 0x27, 0x20, 0x61, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x20, 0x77, 0x6b, 0x6f, 0x6c, 0x6c, 0x20, 0x67, 0xb1, 0x61, 0x64, 0x64, 0x69, 0x65, 0x74, 0x20, 0x6d, 0x69, 0x6e, 0x6e, 0x20, 0xbf, 0x6d, 0x69, 0x65, 0x6e, 0x20, 0x74, 0x61, 0x27, 0x20, 0xb1, 0x61, 0x6b, 0x6d, 0x61, 0x20, 0x47, 0xb1, 0x61, 0x72, 0x62, 0x69, 0x6a, 0x61, 0x2e, 0x20, 0x57, 0x61, 0x72, 0x61, 0x20, 0x6c, 0x2d, 0x49, 0x73, 0x71, 0x61, 0x6c, 0x6c, 0x69, 0x20, 0x62, 0x65, 0x64, 0x61, 0x20, 0x64, 0x69, 0x65, 0xb1, 0x65, 0x6c, 0x20, 0x75, 0x6b, 0x6f, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x2d, 0x54, 0x61, 0x6c, 0x6a, 0x61, 0x6e, 0x2c, 0x20, 0x66, 0x75, 0x71, 0x20, 0x6b, 0x6f, 0x6c, 0x6c, 0x6f, 0x78, 0x20, 0x66, 0x69, 0xbf, 0x2d, 0xbf, 0x6d, 0x69, 0x65, 0x6e, 0x20, 0x74, 0x61, 0x64, 0x2d, 0x64, 0x61, 0xb1, 0x6c, 0x61, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x4b, 0x61, 0x76, 0x61, 0x6c, 0x6c, 0x69, 0x65, 0x72, 0x69, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x4f, 0x72, 0x64, 0x6e, 0x69, 0x20, 0x74, 0x61, 0x27, 0x20, 0x53, 0x61, 0x6e, 0x20, 0xd5, 0x77, 0x61, 0x6e, 0x6e, 0x20, 0x73, 0x61, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6c, 0x2d, 0x49, 0x6e, 0x67, 0x6c, 0x69, 0xbf, 0x20, 0xb1, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x74, 0x2d, 0x54, 0x61, 0x6c, 0x6a, 0x61, 0x6e, 0x20, 0x62, 0xb1, 0x61, 0x6c, 0x61, 0x20, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x75, 0x66, 0x66, 0x69, 0xe5, 0x6a, 0x61, 0x6c, 0x69, 0x20, 0x66, 0x69, 0x6c, 0x2d, 0x4b, 0x6f, 0x73, 0x74, 0x69, 0x74, 0x75, 0x7a, 0x7a, 0x6a, 0x6f, 0x6e, 0x69, 0x20, 0x4b, 0x6f, 0x6c, 0x6f, 0x6e, 0x6a, 0x61, 0x6c, 0x69, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x31, 0x39, 0x33, 0x34, 0x2e, 0x20, 0x49, 0x6c, 0x2d, 0x4d, 0x61, 0x6c, 0x74, 0x69, 0x20, 0x68, 0x75, 0x77, 0x61, 0x20, 0x6c, 0x2d, 0x69, 0x6c, 0x73, 0x69, 0x65, 0x6e, 0x20, 0x77, 0x61, 0xb1, 0x64, 0x69, 0x65, 0x6e, 0x69, 0x20, 0x74, 0x61, 0x27, 0x20, 0x67, 0xb1, 0x61, 0x6a, 0x6e, 0x20, 0x73, 0x65, 0x6d, 0x69, 0x74, 0x69, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x20, 0x6a, 0x69, 0x6e, 0x6b, 0x69, 0x74, 0x65, 0x62, 0x20, 0x62, 0x27, 0x69, 0x74, 0x74, 0x72, 0x69, 0x20, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x69, 0x2e, 0x20, 0x4c, 0x2d, 0x61, 0x6c, 0x66, 0x61, 0x62, 0x65, 0x74, 0x74, 0x20, 0x4d, 0x61, 0x6c, 0x74, 0x69, 0x20, 0x6d, 0x61, 0x67, 0xb1, 0x6d, 0x75, 0x6c, 0x20, 0x6d, 0x69, 0x6e, 0x6e, 0x20, 0x33, 0x30, 0x20, 0x69, 0x74, 0x74, 0x72, 0x61, 0x20, 0x28, 0x32, 0x34, 0x20, 0x6b, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x69, 0x20, 0x75, 0x20, 0x36, 0x20, 0x76, 0x6f, 0x6b, 0x61, 0x6c, 0x69, 0x29, 0x20, 0x6c, 0x69, 0x20, 0x6a, 0x69, 0x64, 0x68, 0x72, 0x75, 0x20, 0x66, 0x27, 0x64, 0x69, 0x6e, 0x20, 0x6c, 0x2d, 0x6f, 0x72, 0x64, 0x6e, 0x69, 0x3a, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMtIso88593);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-3'),
      );
      expect(candidates.first.language?.iso6391Code, equals('mt'));
    });

    test('detect mt utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kMtUtf8 = Uint8List.fromList([0x46, 0x72, 0x61, 0x6e, 0x7a, 0x61, 0x20, 0x28, 0x46, 0x72, 0x61, 0x6e, 0xc4, 0x8b, 0x69, 0xc5, 0xbc, 0x3a, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x29, 0x2c, 0x20, 0x75, 0x66, 0x66, 0x69, 0xc4, 0x8b, 0x6a, 0x61, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x72, 0x2d, 0x52, 0x65, 0x70, 0x75, 0x62, 0x62, 0x6c, 0x69, 0x6b, 0x61, 0x20, 0x46, 0x72, 0x61, 0x6e, 0xc4, 0x8b, 0x69, 0xc5, 0xbc, 0x61, 0x20, 0x28, 0x46, 0x72, 0x61, 0x6e, 0xc4, 0x8b, 0x69, 0xc5, 0xbc, 0x3a, 0x0a, 0x52, 0xc3, 0xa9, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x20, 0x66, 0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61, 0x69, 0x73, 0x65, 0x29, 0x2c, 0x20, 0x68, 0x69, 0x20, 0x70, 0x61, 0x6a, 0x6a, 0x69, 0xc5, 0xbc, 0x20, 0x66, 0x6c, 0x2d, 0x45, 0x77, 0x72, 0x6f, 0x70, 0x61, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x50, 0x75, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x49, 0x6c, 0x2d, 0x62, 0x65, 0x6c, 0x74, 0x20, 0x62, 0x65, 0x6c, 0x74, 0x20, 0x6b, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x0a, 0x74, 0x61, 0x67, 0xc4, 0xa7, 0x68, 0x61, 0x20, 0x68, 0x69, 0x20, 0x50, 0x61, 0x72, 0x69, 0xc4, 0xa1, 0x69, 0x2e, 0x20, 0x48, 0x69, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x72, 0x75, 0x20, 0x74, 0x61, 0x6c, 0x2d, 0x55, 0x6e, 0x6a, 0x6f, 0x6e, 0x69, 0x20, 0x45, 0x77, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x2e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x7a, 0x61, 0x20, 0x68, 0x69, 0x20, 0x6d, 0x61, 0x71, 0x73, 0x75, 0x6d, 0x61, 0x20, 0x66, 0x27, 0x32, 0x32, 0x20, 0x72, 0xc3, 0xa9, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x6c, 0x69, 0x20, 0x68, 0x75, 0x6d, 0x61, 0x20, 0x73, 0x75, 0x64, 0x64, 0x69, 0x76, 0x69, 0xc5, 0xbc, 0x69, 0x20, 0x66, 0x27, 0x20, 0x64, 0xc3, 0xa9, 0x70, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kMtUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('mt'));
    });

    test('detect no ibm865', () {
      final detector = UCharDet();
      // dart format off
      final kNoIbm865 = Uint8List.fromList([0x50, 0x61, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x20, 0x62, 0x72, 0x75, 0x6b, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x6f, 0x6c, 0x64, 0x6e, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x65, 0x6b, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x9b, 0x76, 0x65, 0x20, 0x70, 0x86, 0x0a, 0x68, 0x86, 0x6e, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x66, 0x74, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x6a, 0x65, 0x6c, 0x70, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x86, 0x20, 0x76, 0x69, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x3b, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x75, 0x73, 0x6b, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x86, 0x0a, 0x72, 0x61, 0x73, 0x6b, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x65, 0x20, 0x74, 0x65, 0x67, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x74, 0x20, 0x69, 0x20, 0x74, 0x65, 0x6b, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x75, 0x74, 0x73, 0x74, 0x79, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x69, 0x73, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x53, 0x91, 0x72, 0x20, 0x67, 0x6f, 0x6c, 0x66, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0x9b, 0x6c, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x78, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x70, 0x86, 0x20, 0x77, 0x63, 0x20, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x0a, 0x48, 0x9b, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0x91, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0x86, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x56, 0x86, 0x72, 0x20, 0x6b, 0x6a, 0x91, 0x72, 0x65, 0x20, 0x6d, 0x9b, 0x79, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x65, 0x20, 0x9b, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x69, 0x20, 0x74, 0x61, 0x78, 0x69, 0x66, 0x69, 0x6c, 0x61, 0x2e, 0x0a, 0x49, 0x51, 0x2d, 0x6c, 0x9b, 0x73, 0x20, 0x57, 0x43, 0x2d, 0x62, 0x6f, 0x6d, 0x73, 0x20, 0x75, 0x74, 0x65, 0x6e, 0x20, 0x68, 0x9b, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x73, 0x6b, 0x6a, 0x91, 0x72, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x64, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x70, 0x86, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2e, 0x0a, 0x56, 0x86, 0x72, 0x20, 0x6b, 0x6a, 0x91, 0x72, 0x65, 0x20, 0x7a, 0x75, 0x6c, 0x75, 0x2d, 0x6d, 0x9b, 0x79, 0x20, 0x9b, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x66, 0x72, 0x61, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x45, 0x74, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x6f, 0x67, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x86, 0x20, 0x4a, 0x6f, 0x20, 0x62, 0x91, 0x72, 0x65, 0x20, 0x66, 0x61, 0x6b, 0x6b, 0x65, 0x6c, 0x6c, 0x79, 0x73, 0x20, 0x70, 0x86, 0x20, 0x76, 0x86, 0x72, 0x20, 0x73, 0x9b, 0x72, 0x67, 0x86, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x78, 0x2e, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x73, 0x6a, 0x86, 0x66, 0x9b, 0x72, 0x65, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x74, 0x20, 0x62, 0x65, 0x64, 0x72, 0x65, 0x20, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x79, 0x70, 0x73, 0x6f, 0x2c, 0x20, 0x77, 0x61, 0x74, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x6b, 0x6c, 0x91, 0x72, 0x20, 0x70, 0x86, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x2e, 0x0a, 0x56, 0x86, 0x72, 0x20, 0x73, 0x91, 0x72, 0x65, 0x20, 0x5a, 0x75, 0x6c, 0x75, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x61, 0x64, 0x65, 0x9b, 0x79, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x74, 0x65, 0x20, 0x6a, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x44, 0x75, 0x20, 0x86, 0x74, 0x20, 0x63, 0x61, 0x20, 0x66, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x65, 0x6e, 0x65, 0x72, 0x70, 0x9b, 0x6c, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x79, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x91, 0x72, 0x65, 0x20, 0x66, 0x72, 0x61, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x6e, 0x2e, 0x0a, 0x4a, 0x65, 0x67, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0x86, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x91, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6b, 0x6a, 0x9b, 0x72, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x70, 0x86, 0x20, 0x76, 0x65, 0x69, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x0a, 0x51, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x6b, 0x6c, 0x9b, 0x70, 0x70, 0x61, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x86, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x7a, 0x7a, 0x20, 0x70, 0x86, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6c, 0x91, 0x72, 0x74, 0x65, 0x20, 0x73, 0x65, 0x67, 0x20, 0x61, 0x6c, 0x64, 0x72, 0x69, 0x20, 0x86, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6d, 0x62, 0x61, 0x6c, 0x6f, 0x20, 0x66, 0x9b, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2e, 0x0a, 0x48, 0x9b, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0x91, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0x86, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kNoIbm865);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm865'));
      expect(candidates.first.language?.iso6391Code, equals('no'));
    });

    test('detect no iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kNoIso88591 = Uint8List.fromList([0x50, 0x61, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x20, 0x62, 0x72, 0x75, 0x6b, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x6f, 0x6c, 0x64, 0x6e, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x65, 0x6b, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0xf8, 0x76, 0x65, 0x20, 0x70, 0xe5, 0x0a, 0x68, 0xe5, 0x6e, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x66, 0x74, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x6a, 0x65, 0x6c, 0x70, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x76, 0x69, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x3b, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x75, 0x73, 0x6b, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0xe5, 0x0a, 0x72, 0x61, 0x73, 0x6b, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x65, 0x20, 0x74, 0x65, 0x67, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x74, 0x20, 0x69, 0x20, 0x74, 0x65, 0x6b, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x75, 0x74, 0x73, 0x74, 0x79, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x69, 0x73, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x53, 0xe6, 0x72, 0x20, 0x67, 0x6f, 0x6c, 0x66, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0xf8, 0x6c, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x78, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x77, 0x63, 0x20, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x6d, 0xf8, 0x79, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x65, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x69, 0x20, 0x74, 0x61, 0x78, 0x69, 0x66, 0x69, 0x6c, 0x61, 0x2e, 0x0a, 0x49, 0x51, 0x2d, 0x6c, 0xf8, 0x73, 0x20, 0x57, 0x43, 0x2d, 0x62, 0x6f, 0x6d, 0x73, 0x20, 0x75, 0x74, 0x65, 0x6e, 0x20, 0x68, 0xf8, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x73, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x64, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x7a, 0x75, 0x6c, 0x75, 0x2d, 0x6d, 0xf8, 0x79, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x66, 0x72, 0x61, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x45, 0x74, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x6f, 0x67, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6d, 0xe5, 0x20, 0x4a, 0x6f, 0x20, 0x62, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x61, 0x6b, 0x6b, 0x65, 0x6c, 0x6c, 0x79, 0x73, 0x20, 0x70, 0xe5, 0x20, 0x76, 0xe5, 0x72, 0x20, 0x73, 0xf8, 0x72, 0x67, 0xe5, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x78, 0x2e, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x73, 0x6a, 0xe5, 0x66, 0xf8, 0x72, 0x65, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x74, 0x20, 0x62, 0x65, 0x64, 0x72, 0x65, 0x20, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x79, 0x70, 0x73, 0x6f, 0x2c, 0x20, 0x77, 0x61, 0x74, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x6b, 0x6c, 0xe6, 0x72, 0x20, 0x70, 0xe5, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x73, 0xe6, 0x72, 0x65, 0x20, 0x5a, 0x75, 0x6c, 0x75, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x61, 0x64, 0x65, 0xf8, 0x79, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x74, 0x65, 0x20, 0x6a, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x44, 0x75, 0x20, 0xe5, 0x74, 0x20, 0x63, 0x61, 0x20, 0x66, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x65, 0x6e, 0x65, 0x72, 0x70, 0xf8, 0x6c, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x79, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x72, 0x61, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x6e, 0x2e, 0x0a, 0x4a, 0x65, 0x67, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0xe5, 0x20, 0x66, 0x6f, 0x72, 0x74, 0xe6, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6b, 0x6a, 0xf8, 0x72, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x70, 0xe5, 0x20, 0x76, 0x65, 0x69, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x0a, 0x51, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x6b, 0x6c, 0xf8, 0x70, 0x70, 0x61, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x7a, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6c, 0xe6, 0x72, 0x74, 0x65, 0x20, 0x73, 0x65, 0x67, 0x20, 0x61, 0x6c, 0x64, 0x72, 0x69, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6d, 0x62, 0x61, 0x6c, 0x6f, 0x20, 0x66, 0xf8, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x45, 0x74, 0x20, 0x73, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x63, 0x69, 0x72, 0x6b, 0x61, 0x20, 0xbe, 0x20, 0x69, 0x6e, 0x6e, 0x20, 0x69, 0x20, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x20, 0x73, 0x69, 0x73, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x65, 0x72, 0x20, 0x68, 0x65, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x20, 0x6e, 0x65, 0x64, 0x2c, 0x0a, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6f, 0x67, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x41, 0x7a, 0x61, 0x20, 0x48, 0x6f, 0x6c, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0xe5, 0x20, 0x67, 0x72, 0xe5, 0x74, 0x65, 0x20, 0x68, 0x65, 0x6c, 0x74, 0x20, 0x73, 0x61, 0x6d, 0x74, 0x69, 0x64, 0x69, 0x67, 0x0a]);
      // dart format on
      final candidates = detector.detect(kNoIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('no'));
    });

    test('detect no iso-8859-15', () {
      final detector = UCharDet();
      // dart format off
      final kNoIso885915 = Uint8List.fromList([0x50, 0x61, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x20, 0x62, 0x72, 0x75, 0x6b, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x6f, 0x6c, 0x64, 0x6e, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x65, 0x6b, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0xf8, 0x76, 0x65, 0x20, 0x70, 0xe5, 0x0a, 0x68, 0xe5, 0x6e, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x66, 0x74, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x6a, 0x65, 0x6c, 0x70, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x76, 0x69, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x3b, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x75, 0x73, 0x6b, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0xe5, 0x0a, 0x72, 0x61, 0x73, 0x6b, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x65, 0x20, 0x74, 0x65, 0x67, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x74, 0x20, 0x69, 0x20, 0x74, 0x65, 0x6b, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x75, 0x74, 0x73, 0x74, 0x79, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x69, 0x73, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x53, 0xe6, 0x72, 0x20, 0x67, 0x6f, 0x6c, 0x66, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0xf8, 0x6c, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x78, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x77, 0x63, 0x20, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x6d, 0xf8, 0x79, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x65, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x69, 0x20, 0x74, 0x61, 0x78, 0x69, 0x66, 0x69, 0x6c, 0x61, 0x2e, 0x0a, 0x49, 0x51, 0x2d, 0x6c, 0xf8, 0x73, 0x20, 0x57, 0x43, 0x2d, 0x62, 0x6f, 0x6d, 0x73, 0x20, 0x75, 0x74, 0x65, 0x6e, 0x20, 0x68, 0xf8, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x73, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x64, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x7a, 0x75, 0x6c, 0x75, 0x2d, 0x6d, 0xf8, 0x79, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x66, 0x72, 0x61, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x45, 0x74, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x6f, 0x67, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6d, 0xe5, 0x20, 0x4a, 0x6f, 0x20, 0x62, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x61, 0x6b, 0x6b, 0x65, 0x6c, 0x6c, 0x79, 0x73, 0x20, 0x70, 0xe5, 0x20, 0x76, 0xe5, 0x72, 0x20, 0x73, 0xf8, 0x72, 0x67, 0xe5, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x78, 0x2e, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x73, 0x6a, 0xe5, 0x66, 0xf8, 0x72, 0x65, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x74, 0x20, 0x62, 0x65, 0x64, 0x72, 0x65, 0x20, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x79, 0x70, 0x73, 0x6f, 0x2c, 0x20, 0x77, 0x61, 0x74, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x6b, 0x6c, 0xe6, 0x72, 0x20, 0x70, 0xe5, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x73, 0xe6, 0x72, 0x65, 0x20, 0x5a, 0x75, 0x6c, 0x75, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x61, 0x64, 0x65, 0xf8, 0x79, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x74, 0x65, 0x20, 0x6a, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x44, 0x75, 0x20, 0xe5, 0x74, 0x20, 0x63, 0x61, 0x20, 0x66, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x65, 0x6e, 0x65, 0x72, 0x70, 0xf8, 0x6c, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x79, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x72, 0x61, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x6e, 0x2e, 0x0a, 0x4a, 0x65, 0x67, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0xe5, 0x20, 0x66, 0x6f, 0x72, 0x74, 0xe6, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6b, 0x6a, 0xf8, 0x72, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x70, 0xe5, 0x20, 0x76, 0x65, 0x69, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x0a, 0x51, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x6b, 0x6c, 0xf8, 0x70, 0x70, 0x61, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x7a, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6c, 0xe6, 0x72, 0x74, 0x65, 0x20, 0x73, 0x65, 0x67, 0x20, 0x61, 0x6c, 0x64, 0x72, 0x69, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6d, 0x62, 0x61, 0x6c, 0x6f, 0x20, 0x66, 0xf8, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x20, 0x28, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x20, 0xa4, 0x29, 0x20, 0x65, 0x72, 0x20, 0x64, 0x65, 0x6e, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x79, 0x6e, 0x74, 0x65, 0x6e, 0x68, 0x65, 0x74, 0x2e, 0x20, 0x44, 0x65, 0x6e, 0x0a, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x6e, 0x66, 0xf8, 0x72, 0x74, 0x20, 0x69, 0x20, 0x31, 0x39, 0x20, 0x61, 0x76, 0x20, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x73, 0x20, 0x32, 0x37, 0x20, 0x6d, 0x65, 0x64, 0x6c, 0x65, 0x6d, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x6b, 0x6a, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x6f, 0x6e, 0x65, 0x6e, 0x29, 0x20, 0x6f, 0x67, 0x20, 0x69, 0x20, 0x66, 0x69, 0x72, 0x65, 0x0a, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x6e, 0x6f, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x67, 0x20, 0x6f, 0x6d, 0x72, 0xe5, 0x64, 0x65, 0x72, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kNoIso885915);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-15'),
      );
      expect(candidates.first.language?.iso6391Code, equals('no'));
    });

    test('detect no utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kNoUtf8 = Uint8List.fromList([0x50, 0x61, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x20, 0x62, 0x72, 0x75, 0x6b, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x6f, 0x6c, 0x64, 0x6e, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x65, 0x6b, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0xc3, 0xb8, 0x76, 0x65, 0x20, 0x70, 0xc3, 0xa5, 0x0a, 0x68, 0xc3, 0xa5, 0x6e, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x66, 0x74, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x6a, 0x65, 0x6c, 0x70, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xc3, 0xa5, 0x20, 0x76, 0x69, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x3b, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x75, 0x73, 0x6b, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0xc3, 0xa5, 0x0a, 0x72, 0x61, 0x73, 0x6b, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x65, 0x20, 0x74, 0x65, 0x67, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x74, 0x20, 0x69, 0x20, 0x74, 0x65, 0x6b, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x75, 0x74, 0x73, 0x74, 0x79, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x69, 0x73, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x53, 0xc3, 0xa6, 0x72, 0x20, 0x67, 0x6f, 0x6c, 0x66, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0xc3, 0xb8, 0x6c, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x78, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x77, 0x63, 0x20, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x0a, 0x48, 0xc3, 0xb8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xc3, 0xa5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x56, 0xc3, 0xa5, 0x72, 0x20, 0x6b, 0x6a, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x6d, 0xc3, 0xb8, 0x79, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x65, 0x20, 0xc3, 0xb8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x69, 0x20, 0x74, 0x61, 0x78, 0x69, 0x66, 0x69, 0x6c, 0x61, 0x2e, 0x0a, 0x49, 0x51, 0x2d, 0x6c, 0xc3, 0xb8, 0x73, 0x20, 0x57, 0x43, 0x2d, 0x62, 0x6f, 0x6d, 0x73, 0x20, 0x75, 0x74, 0x65, 0x6e, 0x20, 0x68, 0xc3, 0xb8, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x73, 0x6b, 0x6a, 0xc3, 0xa6, 0x72, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x64, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2e, 0x0a, 0x56, 0xc3, 0xa5, 0x72, 0x20, 0x6b, 0x6a, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x7a, 0x75, 0x6c, 0x75, 0x2d, 0x6d, 0xc3, 0xb8, 0x79, 0x20, 0xc3, 0xb8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x66, 0x72, 0x61, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x45, 0x74, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x6f, 0x67, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6d, 0xc3, 0xa5, 0x20, 0x4a, 0x6f, 0x20, 0x62, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x66, 0x61, 0x6b, 0x6b, 0x65, 0x6c, 0x6c, 0x79, 0x73, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x76, 0xc3, 0xa5, 0x72, 0x20, 0x73, 0xc3, 0xb8, 0x72, 0x67, 0xc3, 0xa5, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x78, 0x2e, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x73, 0x6a, 0xc3, 0xa5, 0x66, 0xc3, 0xb8, 0x72, 0x65, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x74, 0x20, 0x62, 0x65, 0x64, 0x72, 0x65, 0x20, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x79, 0x70, 0x73, 0x6f, 0x2c, 0x20, 0x77, 0x61, 0x74, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x6b, 0x6c, 0xc3, 0xa6, 0x72, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x2e, 0x0a, 0x56, 0xc3, 0xa5, 0x72, 0x20, 0x73, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x5a, 0x75, 0x6c, 0x75, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x61, 0x64, 0x65, 0xc3, 0xb8, 0x79, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x74, 0x65, 0x20, 0x6a, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x44, 0x75, 0x20, 0xc3, 0xa5, 0x74, 0x20, 0x63, 0x61, 0x20, 0x66, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x65, 0x6e, 0x65, 0x72, 0x70, 0xc3, 0xb8, 0x6c, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x79, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x66, 0x72, 0x61, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x6e, 0x2e, 0x0a, 0x4a, 0x65, 0x67, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0xc3, 0xa5, 0x20, 0x66, 0x6f, 0x72, 0x74, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6b, 0x6a, 0xc3, 0xb8, 0x72, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x76, 0x65, 0x69, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x0a, 0x51, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x6b, 0x6c, 0xc3, 0xb8, 0x70, 0x70, 0x61, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xc3, 0xa5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x7a, 0x7a, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6c, 0xc3, 0xa6, 0x72, 0x74, 0x65, 0x20, 0x73, 0x65, 0x67, 0x20, 0x61, 0x6c, 0x64, 0x72, 0x69, 0x20, 0xc3, 0xa5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6d, 0x62, 0x61, 0x6c, 0x6f, 0x20, 0x66, 0xc3, 0xb8, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2e, 0x0a, 0x48, 0xc3, 0xb8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xc3, 0xa6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xc3, 0xa5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x45, 0x74, 0x20, 0x73, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x63, 0x69, 0x72, 0x6b, 0x61, 0x20, 0xc2, 0xbe, 0x20, 0x69, 0x6e, 0x6e, 0x20, 0x69, 0x20, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x20, 0x73, 0x69, 0x73, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x2c, 0x20, 0x53, 0x6b, 0x69, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x65, 0x72, 0x20, 0x68, 0x65, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x20, 0x6e, 0x65, 0x64, 0x2c, 0x0a, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6f, 0x67, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x41, 0x7a, 0x61, 0x20, 0x48, 0x6f, 0x6c, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0xc3, 0xa5, 0x20, 0x67, 0x72, 0xc3, 0xa5, 0x74, 0x65, 0x20, 0x68, 0x65, 0x6c, 0x74, 0x20, 0x73, 0x61, 0x6d, 0x74, 0x69, 0x64, 0x69, 0x67, 0x0a]);
      // dart format on
      final candidates = detector.detect(kNoUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('no'));
    });

    test('detect no windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kNoWindows1252 = Uint8List.fromList([0x50, 0x61, 0x6e, 0x67, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x20, 0x62, 0x72, 0x75, 0x6b, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x68, 0x6f, 0x6c, 0x64, 0x6e, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x73, 0x6b, 0x72, 0x69, 0x76, 0x65, 0x65, 0x6b, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0xf8, 0x76, 0x65, 0x20, 0x70, 0xe5, 0x0a, 0x68, 0xe5, 0x6e, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x66, 0x74, 0x3b, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x6a, 0x65, 0x6c, 0x70, 0x65, 0x6d, 0x69, 0x64, 0x64, 0x65, 0x6c, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x76, 0x69, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x3b, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x68, 0x75, 0x73, 0x6b, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0xe5, 0x0a, 0x72, 0x61, 0x73, 0x6b, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x65, 0x20, 0x74, 0x65, 0x67, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x65, 0x74, 0x20, 0x69, 0x20, 0x74, 0x65, 0x6b, 0x6e, 0x69, 0x73, 0x6b, 0x20, 0x75, 0x74, 0x73, 0x74, 0x79, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x76, 0x69, 0x73, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x53, 0xe6, 0x72, 0x20, 0x67, 0x6f, 0x6c, 0x66, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x6b, 0xf8, 0x6c, 0x6c, 0x65, 0x20, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x78, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x77, 0x63, 0x20, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x62, 0x79, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x6d, 0xf8, 0x79, 0x20, 0x69, 0x20, 0x63, 0x61, 0x70, 0x65, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x69, 0x20, 0x74, 0x61, 0x78, 0x69, 0x66, 0x69, 0x6c, 0x61, 0x2e, 0x0a, 0x49, 0x51, 0x2d, 0x6c, 0xf8, 0x73, 0x20, 0x57, 0x43, 0x2d, 0x62, 0x6f, 0x6d, 0x73, 0x20, 0x75, 0x74, 0x65, 0x6e, 0x20, 0x68, 0xf8, 0x72, 0x73, 0x65, 0x6c, 0x20, 0x73, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x72, 0x20, 0x67, 0x6f, 0x64, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x7a, 0x75, 0x6c, 0x75, 0x2d, 0x6d, 0xf8, 0x79, 0x20, 0xf8, 0x76, 0x64, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6a, 0x6f, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x66, 0x72, 0x61, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x45, 0x74, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x20, 0x6f, 0x67, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6d, 0xe5, 0x20, 0x4a, 0x6f, 0x20, 0x62, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x61, 0x6b, 0x6b, 0x65, 0x6c, 0x6c, 0x79, 0x73, 0x20, 0x70, 0xe5, 0x20, 0x76, 0xe5, 0x72, 0x20, 0x73, 0xf8, 0x72, 0x67, 0xe5, 0x65, 0x6e, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x78, 0x2e, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x73, 0x6a, 0xe5, 0x66, 0xf8, 0x72, 0x65, 0x6e, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x74, 0x20, 0x62, 0x65, 0x64, 0x72, 0x65, 0x20, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x79, 0x70, 0x73, 0x6f, 0x2c, 0x20, 0x77, 0x61, 0x74, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x6b, 0x6c, 0xe6, 0x72, 0x20, 0x70, 0xe5, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x76, 0x65, 0x69, 0x65, 0x6e, 0x2e, 0x0a, 0x56, 0xe5, 0x72, 0x20, 0x73, 0xe6, 0x72, 0x65, 0x20, 0x5a, 0x75, 0x6c, 0x75, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x61, 0x64, 0x65, 0xf8, 0x79, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6c, 0x74, 0x65, 0x20, 0x6a, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x67, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x78, 0x69, 0x2e, 0x0a, 0x44, 0x75, 0x20, 0xe5, 0x74, 0x20, 0x63, 0x61, 0x20, 0x66, 0x69, 0x72, 0x65, 0x20, 0x77, 0x69, 0x65, 0x6e, 0x65, 0x72, 0x70, 0xf8, 0x6c, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x68, 0x6a, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x61, 0x20, 0x62, 0x79, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x20, 0xe6, 0x72, 0x65, 0x20, 0x66, 0x72, 0x61, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x65, 0x6e, 0x2e, 0x0a, 0x4a, 0x65, 0x67, 0x20, 0x62, 0x65, 0x67, 0x79, 0x6e, 0x74, 0x65, 0x20, 0xe5, 0x20, 0x66, 0x6f, 0x72, 0x74, 0xe6, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x6e, 0x73, 0x20, 0x6a, 0x65, 0x67, 0x20, 0x6b, 0x6a, 0xf8, 0x72, 0x74, 0x65, 0x20, 0x74, 0x61, 0x78, 0x69, 0x20, 0x70, 0xe5, 0x20, 0x76, 0x65, 0x69, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x0a, 0x51, 0x75, 0x69, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x72, 0x20, 0x65, 0x69, 0x6e, 0x20, 0x6b, 0x6c, 0xf8, 0x70, 0x70, 0x61, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x6a, 0x61, 0x7a, 0x7a, 0x20, 0x70, 0xe5, 0x20, 0x78, 0x79, 0x6c, 0x6f, 0x66, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6c, 0xe6, 0x72, 0x74, 0x65, 0x20, 0x73, 0x65, 0x67, 0x20, 0x61, 0x6c, 0x64, 0x72, 0x69, 0x20, 0xe5, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x63, 0x65, 0x6d, 0x62, 0x61, 0x6c, 0x6f, 0x20, 0x66, 0xf8, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x74, 0x69, 0x6c, 0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2e, 0x0a, 0x48, 0xf8, 0x76, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x73, 0x20, 0x6b, 0x6a, 0xe6, 0x72, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x77, 0x20, 0x66, 0xe5, 0x72, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x20, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x20, 0x69, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x20, 0x62, 0x79, 0x2e, 0x0a, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x20, 0x28, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x20, 0x80, 0x20, 0x96, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x6b, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x45, 0x55, 0x52, 0x29, 0x20, 0x65, 0x72, 0x20, 0x64, 0x65, 0x6e, 0x20, 0x44, 0x65, 0x6e, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x69, 0x73, 0x6b, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x79, 0x6e, 0x74, 0x65, 0x6e, 0x68, 0x65, 0x74, 0x2e, 0x20, 0x44, 0x65, 0x6e, 0x0a, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x6e, 0x66, 0xf8, 0x72, 0x74, 0x20, 0x69, 0x20, 0x31, 0x39, 0x20, 0x61, 0x76, 0x20, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x73, 0x20, 0x32, 0x37, 0x20, 0x6d, 0x65, 0x64, 0x6c, 0x65, 0x6d, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x6b, 0x6a, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x6f, 0x6e, 0x65, 0x6e, 0x29, 0x20, 0x6f, 0x67, 0x20, 0x69, 0x20, 0x66, 0x69, 0x72, 0x65, 0x0a, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x67, 0x20, 0x6e, 0x6f, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x67, 0x20, 0x6f, 0x6d, 0x72, 0xe5, 0x64, 0x65, 0x72, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kNoWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('no'));
    });

    test('detect pl ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kPlIbm852 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xe4, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0x98, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xa9, 0xbe, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xa2, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xbe, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0x88, 0x61, 0x64, 0x79, 0x73, 0x88, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0x88, 0x88, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl iso-8859-13', () {
      final detector = UCharDet();
      // dart format off
      final kPlIso885913 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xf1, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0xfa, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xe6, 0xfd, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xf3, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xfd, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xf9, 0x61, 0x64, 0x79, 0x73, 0xf9, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xf9, 0xf9, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlIso885913);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-13'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl iso-8859-16', () {
      final detector = UCharDet();
      // dart format off
      final kPlIso885916 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xf1, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0xf7, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xfd, 0xbf, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xf3, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xbf, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xb3, 0x61, 0x64, 0x79, 0x73, 0xb3, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xb3, 0xb3, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlIso885916);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-16'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kPlIso88592 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xf1, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0xb6, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xea, 0xbf, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xf3, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xbf, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xb3, 0x61, 0x64, 0x79, 0x73, 0xb3, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xb3, 0xb3, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl mac-centraleurope', () {
      final detector = UCharDet();
      // dart format off
      final kPlMaccentraleurope = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xc4, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0xe6, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xab, 0xfd, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0x97, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xfd, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xb8, 0x61, 0x64, 0x79, 0x73, 0xb8, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xb8, 0xb8, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlMaccentraleurope);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-centraleurope'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kPlUtf8 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xc5, 0x84, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0xc5, 0x9b, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xc4, 0x99, 0xc5, 0xbc, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xc3, 0xb3, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xc5, 0xbc, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xc5, 0x82, 0x61, 0x64, 0x79, 0x73, 0xc5, 0x82, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xc5, 0x82, 0xc5, 0x82, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pl windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kPlWindows1250 = Uint8List.fromList([0x5a, 0x6f, 0x66, 0x69, 0x61, 0x20, 0x28, 0x53, 0x6f, 0x6e, 0x6b, 0x61, 0x29, 0x20, 0x48, 0x6f, 0x6c, 0x73, 0x7a, 0x61, 0xf1, 0x73, 0x6b, 0x61, 0x20, 0x68, 0x65, 0x72, 0x62, 0x75, 0x20, 0x48, 0x69, 0x70, 0x70, 0x6f, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x28, 0x75, 0x72, 0x2e, 0x20, 0x6f, 0x6b, 0x2e, 0x20, 0x31, 0x34, 0x30, 0x35, 0x2c, 0x20, 0x7a, 0x6d, 0x2e, 0x20, 0x32, 0x31, 0x20, 0x77, 0x72, 0x7a, 0x65, 0x9c, 0x6e, 0x69, 0x61, 0x20, 0x31, 0x34, 0x36, 0x31, 0x20, 0x77, 0x20, 0x4b, 0x72, 0x61, 0x6b, 0x6f, 0x77, 0x69, 0x65, 0x29, 0x0a, 0x6b, 0x73, 0x69, 0xea, 0xbf, 0x6e, 0x69, 0x63, 0x7a, 0x6b, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x77, 0x73, 0x6b, 0x61, 0x2c, 0x20, 0x6b, 0x72, 0xf3, 0x6c, 0x6f, 0x77, 0x61, 0x20, 0x50, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x2c, 0x20, 0x6f, 0x64, 0x20, 0x31, 0x34, 0x32, 0x32, 0x20, 0x72, 0x6f, 0x6b, 0x75, 0x20, 0x63, 0x7a, 0x77, 0x61, 0x72, 0x74, 0x61, 0x20, 0x69, 0x20, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x69, 0x61, 0x20, 0xbf, 0x6f, 0x6e, 0x61, 0x20, 0x57, 0xb3, 0x61, 0x64, 0x79, 0x73, 0xb3, 0x61, 0x77, 0x61, 0x20, 0x49, 0x49, 0x0a, 0x4a, 0x61, 0x67, 0x69, 0x65, 0xb3, 0xb3, 0x79, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPlWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pl'));
    });

    test('detect pt iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kPtIso88591 = Uint8List.fromList([0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x28, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x73, 0x70, 0x2e, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x20, 0x22, 0x6c, 0x61, 0x67, 0x61, 0x72, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x61, 0x22, 0x20, 0x6e, 0x6f, 0x20, 0x43, 0x61, 0x6e, 0x61, 0x64, 0xe1, 0x29, 0x2c, 0x0a, 0x66, 0x6f, 0x69, 0x20, 0x75, 0x6d, 0x20, 0x67, 0xe9, 0x6e, 0x65, 0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x64, 0x69, 0x6e, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x63, 0x61, 0x72, 0x6e, 0xed, 0x76, 0x6f, 0x72, 0x6f, 0x20, 0x65, 0x20, 0x62, 0xed, 0x70, 0x65, 0x64, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x66, 0x69, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x65, 0x72, 0xed, 0x6f, 0x64, 0x6f, 0x0a, 0x43, 0x72, 0x65, 0x74, 0xe1, 0x63, 0x65, 0x6f, 0x2e, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x63, 0x65, 0x72, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x38, 0x20, 0x61, 0x20, 0x39, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2c, 0x20, 0x33, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x20, 0x65, 0x0a, 0x70, 0x65, 0x73, 0x61, 0x76, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x32, 0x20, 0x74, 0x6f, 0x6e, 0x65, 0x6c, 0x61, 0x64, 0x61, 0x73, 0x2e, 0x20, 0x4f, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x76, 0x69, 0x76, 0x65, 0x75, 0x20, 0x6e, 0x61, 0x20, 0x41, 0x6d, 0xe9, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x6f, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x65, 0x20, 0x65, 0x20, 0x66, 0x6f, 0x69, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x31, 0x38, 0x38, 0x34, 0x20, 0x70, 0x6f, 0x72, 0x20, 0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20, 0x42, 0x75, 0x72, 0x72, 0x20, 0x54, 0x79, 0x72, 0x72, 0x65, 0x6c, 0x6c, 0x20, 0x65, 0x6d, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x61, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x43, 0x61, 0x6e, 0x61, 0x64, 0xe1, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x0a, 0x61, 0x6f, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x75, 0x20, 0x6e, 0x6f, 0x6d, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPtIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('pt'));
    });

    test('detect pt utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kPtUtf8 = Uint8List.fromList([0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x28, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x20, 0x73, 0x70, 0x2e, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x20, 0x22, 0x6c, 0x61, 0x67, 0x61, 0x72, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x61, 0x22, 0x20, 0x6e, 0x6f, 0x20, 0x43, 0x61, 0x6e, 0x61, 0x64, 0xc3, 0xa1, 0x29, 0x2c, 0x0a, 0x66, 0x6f, 0x69, 0x20, 0x75, 0x6d, 0x20, 0x67, 0xc3, 0xa9, 0x6e, 0x65, 0x72, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x64, 0x69, 0x6e, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x63, 0x61, 0x72, 0x6e, 0xc3, 0xad, 0x76, 0x6f, 0x72, 0x6f, 0x20, 0x65, 0x20, 0x62, 0xc3, 0xad, 0x70, 0x65, 0x64, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x66, 0x69, 0x6d, 0x20, 0x64, 0x6f, 0x20, 0x70, 0x65, 0x72, 0xc3, 0xad, 0x6f, 0x64, 0x6f, 0x0a, 0x43, 0x72, 0x65, 0x74, 0xc3, 0xa1, 0x63, 0x65, 0x6f, 0x2e, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x63, 0x65, 0x72, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x38, 0x20, 0x61, 0x20, 0x39, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2c, 0x20, 0x33, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x61, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x20, 0x65, 0x0a, 0x70, 0x65, 0x73, 0x61, 0x76, 0x61, 0x20, 0x6d, 0x65, 0x6e, 0x6f, 0x73, 0x20, 0x64, 0x65, 0x20, 0x32, 0x20, 0x74, 0x6f, 0x6e, 0x65, 0x6c, 0x61, 0x64, 0x61, 0x73, 0x2e, 0x20, 0x4f, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x73, 0x73, 0x61, 0x75, 0x72, 0x6f, 0x20, 0x76, 0x69, 0x76, 0x65, 0x75, 0x20, 0x6e, 0x61, 0x20, 0x41, 0x6d, 0xc3, 0xa9, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x6f, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x65, 0x20, 0x65, 0x20, 0x66, 0x6f, 0x69, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x62, 0x65, 0x72, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x20, 0x64, 0x65, 0x20, 0x31, 0x38, 0x38, 0x34, 0x20, 0x70, 0x6f, 0x72, 0x20, 0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20, 0x42, 0x75, 0x72, 0x72, 0x20, 0x54, 0x79, 0x72, 0x72, 0x65, 0x6c, 0x6c, 0x20, 0x65, 0x6d, 0x20, 0x41, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x61, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x43, 0x61, 0x6e, 0x61, 0x64, 0xc3, 0xa1, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x0a, 0x61, 0x6f, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x75, 0x20, 0x6e, 0x6f, 0x6d, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kPtUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('pt'));
    });

    test('detect ro ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kRoIbm852 = Uint8List.fromList([0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x28, 0x8c, 0x6e, 0x20, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xc7, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x52, 0x65, 0x67, 0x61, 0x74, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x65, 0x69, 0x20, 0x28, 0x8c, 0x6e, 0x0a, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xc7, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x67, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x20, 0x73, 0x75, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6e, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x61, 0x76, 0x83, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x20, 0x64, 0x6f, 0x75, 0xc7, 0x20, 0x74, 0xc7, 0x72, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x65, 0x73, 0x74, 0x65, 0x20, 0x6d, 0xc7, 0x72, 0x69, 0x2c, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x66, 0x61, 0x63, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0xc7, 0x20, 0x64, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x61, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x6c, 0x65, 0x20, 0x46, 0x65, 0x72, 0x6f, 0x65, 0x20, 0x8c, 0x6e, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x69, 0x20, 0x47, 0x72, 0x6f, 0x65, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x20, 0x8c, 0x6e, 0x0a, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x75, 0x2d, 0x7a, 0x69, 0x73, 0xc7, 0x5b, 0x61, 0x5d, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x63, 0x65, 0x61, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x64, 0x65, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x74, 0xc7, 0x72, 0x69, 0x6c, 0x65, 0x0a, 0x6e, 0x6f, 0x72, 0x64, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x6c, 0x61, 0x74, 0xc7, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x2d, 0x76, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x20, 0x53, 0x75, 0x65, 0x64, 0x69, 0x61, 0x20, 0x73, 0x69, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x76, 0x65, 0x67, 0x69, 0x61, 0x2c, 0x20, 0x8c, 0x6e, 0x76, 0x65, 0x63, 0x69, 0x6e, 0x83, 0x6e, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x73, 0x75, 0x64, 0x20, 0x63, 0x75, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x2e, 0x20, 0x54, 0x61, 0x72, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0xc7, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x2d, 0x6f, 0x20, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0xc7, 0x20, 0x6d, 0x61, 0x72, 0x65, 0x2c, 0x20, 0x49, 0x75, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0x73, 0x69, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x61, 0x72, 0x69, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x75, 0x6e, 0x65, 0x6e, 0x2c, 0x20, 0x4c, 0x6f, 0x6c, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x69, 0x0a, 0x42, 0x6f, 0x72, 0x6e, 0x68, 0x6f, 0x6c, 0x6d, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x75, 0x6d, 0x20, 0x73, 0x69, 0x20, 0x73, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x69, 0x74, 0x65, 0x20, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x69, 0x74, 0x65, 0x20, 0x8c, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x2c, 0x2c, 0x41, 0x72, 0x68, 0x69, 0x70, 0x65, 0x6c, 0x61, 0x67, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x7a, 0x22, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRoIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('ro'));
    });

    test('detect ro iso-8859-16', () {
      final detector = UCharDet();
      // dart format off
      final kRoIso885916 = Uint8List.fromList([0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x28, 0xee, 0x6e, 0x20, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xe3, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x52, 0x65, 0x67, 0x61, 0x74, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x65, 0x69, 0x20, 0x28, 0xee, 0x6e, 0x0a, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xe3, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x67, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x20, 0x73, 0x75, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6e, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x61, 0x76, 0xe2, 0x6e, 0x64, 0x20, 0xba, 0x69, 0x20, 0x64, 0x6f, 0x75, 0xe3, 0x20, 0xfe, 0xe3, 0x72, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x65, 0x73, 0x74, 0x65, 0x20, 0x6d, 0xe3, 0x72, 0x69, 0x2c, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x66, 0x61, 0x63, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0xe3, 0x20, 0x64, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x61, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x6c, 0x65, 0x20, 0x46, 0x65, 0x72, 0x6f, 0x65, 0x20, 0xee, 0x6e, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x20, 0xba, 0x69, 0x20, 0x47, 0x72, 0x6f, 0x65, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x20, 0xee, 0x6e, 0x0a, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x75, 0x2d, 0x7a, 0x69, 0x73, 0xe3, 0x5b, 0x61, 0x5d, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x63, 0x65, 0x61, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x64, 0x65, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0xfe, 0xe3, 0x72, 0x69, 0x6c, 0x65, 0x0a, 0x6e, 0x6f, 0x72, 0x64, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x6c, 0x61, 0x74, 0xe3, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x2d, 0x76, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x20, 0x53, 0x75, 0x65, 0x64, 0x69, 0x61, 0x20, 0xba, 0x69, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x76, 0x65, 0x67, 0x69, 0x61, 0x2c, 0x20, 0xee, 0x6e, 0x76, 0x65, 0x63, 0x69, 0x6e, 0xe2, 0x6e, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x73, 0x75, 0x64, 0x20, 0x63, 0x75, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x2e, 0x20, 0xde, 0x61, 0x72, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0xe3, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x2d, 0x6f, 0x20, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0xe3, 0x20, 0x6d, 0x61, 0x72, 0x65, 0x2c, 0x20, 0x49, 0x75, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0xba, 0x69, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x61, 0x72, 0x69, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x75, 0x6e, 0x65, 0x6e, 0x2c, 0x20, 0x4c, 0x6f, 0x6c, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x20, 0xba, 0x69, 0x0a, 0x42, 0x6f, 0x72, 0x6e, 0x68, 0x6f, 0x6c, 0x6d, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x75, 0x6d, 0x20, 0xba, 0x69, 0x20, 0x73, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x69, 0xfe, 0x65, 0x20, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x69, 0x74, 0x65, 0x20, 0xee, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0xa5, 0x41, 0x72, 0x68, 0x69, 0x70, 0x65, 0x6c, 0x61, 0x67, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x7a, 0xb5, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRoIso885916);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-16'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ro'));
    });

    test('detect ro utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kRoUtf8 = Uint8List.fromList([0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x28, 0xc3, 0xae, 0x6e, 0x20, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xc4, 0x83, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x52, 0x65, 0x67, 0x61, 0x74, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x65, 0x69, 0x20, 0x28, 0xc3, 0xae, 0x6e, 0x0a, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xc4, 0x83, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x67, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x20, 0x73, 0x75, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6e, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x61, 0x76, 0xc3, 0xa2, 0x6e, 0x64, 0x20, 0xc8, 0x99, 0x69, 0x20, 0x64, 0x6f, 0x75, 0xc4, 0x83, 0x20, 0xc8, 0x9b, 0xc4, 0x83, 0x72, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x65, 0x73, 0x74, 0x65, 0x20, 0x6d, 0xc4, 0x83, 0x72, 0x69, 0x2c, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x66, 0x61, 0x63, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0xc4, 0x83, 0x20, 0x64, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x61, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x6c, 0x65, 0x20, 0x46, 0x65, 0x72, 0x6f, 0x65, 0x20, 0xc3, 0xae, 0x6e, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x20, 0xc8, 0x99, 0x69, 0x20, 0x47, 0x72, 0x6f, 0x65, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x20, 0xc3, 0xae, 0x6e, 0x0a, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x75, 0x2d, 0x7a, 0x69, 0x73, 0xc4, 0x83, 0x5b, 0x61, 0x5d, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x63, 0x65, 0x61, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x64, 0x65, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0xc8, 0x9b, 0xc4, 0x83, 0x72, 0x69, 0x6c, 0x65, 0x0a, 0x6e, 0x6f, 0x72, 0x64, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x6c, 0x61, 0x74, 0xc4, 0x83, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x2d, 0x76, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x20, 0x53, 0x75, 0x65, 0x64, 0x69, 0x61, 0x20, 0xc8, 0x99, 0x69, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x76, 0x65, 0x67, 0x69, 0x61, 0x2c, 0x20, 0xc3, 0xae, 0x6e, 0x76, 0x65, 0x63, 0x69, 0x6e, 0xc3, 0xa2, 0x6e, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x73, 0x75, 0x64, 0x20, 0x63, 0x75, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x2e, 0x20, 0xc8, 0x9a, 0x61, 0x72, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0xc4, 0x83, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x2d, 0x6f, 0x20, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0xc4, 0x83, 0x20, 0x6d, 0x61, 0x72, 0x65, 0x2c, 0x20, 0x49, 0x75, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0xc8, 0x99, 0x69, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x61, 0x72, 0x69, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x75, 0x6e, 0x65, 0x6e, 0x2c, 0x20, 0x4c, 0x6f, 0x6c, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x20, 0xc8, 0x99, 0x69, 0x0a, 0x42, 0x6f, 0x72, 0x6e, 0x68, 0x6f, 0x6c, 0x6d, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x75, 0x6d, 0x20, 0xc8, 0x99, 0x69, 0x20, 0x73, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x69, 0xc8, 0x9b, 0x65, 0x20, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x69, 0x74, 0x65, 0x20, 0xc3, 0xae, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0xe2, 0x80, 0x9e, 0x41, 0x72, 0x68, 0x69, 0x70, 0x65, 0x6c, 0x61, 0x67, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x7a, 0xe2, 0x80, 0x9d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRoUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ro'));
    });

    test('detect ro windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kRoWindows1250 = Uint8List.fromList([0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x28, 0xee, 0x6e, 0x20, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xe3, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x52, 0x65, 0x67, 0x61, 0x74, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x65, 0x69, 0x20, 0x28, 0xee, 0x6e, 0x0a, 0x64, 0x61, 0x6e, 0x65, 0x7a, 0xe3, 0x20, 0x53, 0x75, 0x6e, 0x65, 0x74, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x67, 0x65, 0x74, 0x20, 0x44, 0x61, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x29, 0x2c, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x75, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x20, 0x73, 0x75, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6e, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x61, 0x76, 0xe2, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x20, 0x64, 0x6f, 0x75, 0xe3, 0x20, 0x74, 0xe3, 0x72, 0x69, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x70, 0x65, 0x73, 0x74, 0x65, 0x20, 0x6d, 0xe3, 0x72, 0x69, 0x2c, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x66, 0x61, 0x63, 0x20, 0x70, 0x61, 0x72, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6e, 0x74, 0xe3, 0x20, 0x64, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x61, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x6c, 0x65, 0x20, 0x46, 0x65, 0x72, 0x6f, 0x65, 0x20, 0xee, 0x6e, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x69, 0x20, 0x47, 0x72, 0x6f, 0x65, 0x6e, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x20, 0xee, 0x6e, 0x0a, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x75, 0x2d, 0x7a, 0x69, 0x73, 0xe3, 0x5b, 0x61, 0x5d, 0x20, 0x65, 0x73, 0x74, 0x65, 0x20, 0x63, 0x65, 0x61, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x64, 0x65, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x74, 0xe3, 0x72, 0x69, 0x6c, 0x65, 0x0a, 0x6e, 0x6f, 0x72, 0x64, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x6c, 0x61, 0x74, 0xe3, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x2d, 0x76, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x20, 0x53, 0x75, 0x65, 0x64, 0x69, 0x61, 0x20, 0x73, 0x69, 0x20, 0x6c, 0x61, 0x20, 0x73, 0x75, 0x64, 0x20, 0x64, 0x65, 0x20, 0x4e, 0x6f, 0x72, 0x76, 0x65, 0x67, 0x69, 0x61, 0x2c, 0x20, 0xee, 0x6e, 0x76, 0x65, 0x63, 0x69, 0x6e, 0xe2, 0x6e, 0x64, 0x75, 0x2d, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x0a, 0x73, 0x75, 0x64, 0x20, 0x63, 0x75, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x2e, 0x20, 0x54, 0x61, 0x72, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0xe3, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x2d, 0x6f, 0x20, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0xe3, 0x20, 0x6d, 0x61, 0x72, 0x65, 0x2c, 0x20, 0x49, 0x75, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x61, 0x2c, 0x20, 0x73, 0x69, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x65, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x65, 0x2c, 0x20, 0x64, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x63, 0x61, 0x72, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x20, 0x6d, 0x61, 0x72, 0x69, 0x20, 0x73, 0x75, 0x6e, 0x74, 0x20, 0x5a, 0x65, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x75, 0x6e, 0x65, 0x6e, 0x2c, 0x20, 0x4c, 0x6f, 0x6c, 0x6c, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x46, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x69, 0x0a, 0x42, 0x6f, 0x72, 0x6e, 0x68, 0x6f, 0x6c, 0x6d, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x63, 0x75, 0x6d, 0x20, 0x73, 0x69, 0x20, 0x73, 0x75, 0x74, 0x65, 0x20, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x69, 0x74, 0x65, 0x20, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x69, 0x74, 0x65, 0x20, 0xee, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x84, 0x41, 0x72, 0x68, 0x69, 0x70, 0x65, 0x6c, 0x61, 0x67, 0x75, 0x6c, 0x20, 0x44, 0x61, 0x6e, 0x65, 0x7a, 0x94, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRoWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ro'));
    });

    test('detect ru ibm855', () {
      final detector = UCharDet();
      // dart format off
      final kRuIbm855 = Uint8List.fromList([0x43, 0x50, 0x38, 0x35, 0x35, 0x20, 0x2d, 0x2d, 0x20, 0xc6, 0xb7, 0xe1, 0xb7, 0xd0, 0xd0, 0xb7, 0xfb, 0xa8, 0xe3, 0xc6, 0xa0, 0xde, 0x20, 0xc6, 0xd6, 0xa6, 0xd6, 0xeb, 0xa0, 0xde, 0x20, 0xe3, 0xe5, 0xe1, 0xa0, 0xd4, 0xb7, 0xa4, 0xa0, 0x20, 0xa6, 0xd0, 0xde, 0x20, 0x4d, 0x53, 0x2d, 0x44, 0x4f, 0x53, 0x20, 0xb7, 0x20, 0xd8, 0xd6, 0xa6, 0xd6, 0xa2, 0xd4, 0xf1, 0xb5, 0x20, 0xa8, 0xbd, 0x20, 0xd6, 0xd8, 0xa8, 0xe1, 0xa0, 0xa4, 0xb7, 0xd6, 0xd4, 0xd4, 0xf1, 0xb5, 0x20, 0xe3, 0xb7, 0xe3, 0xe5, 0xa8, 0xd2, 0x2e, 0x20, 0xec, 0xc6, 0xd0, 0x9c, 0xfb, 0xa0, 0xa8, 0xe5, 0x20, 0xeb, 0xe3, 0xa8, 0x20, 0xe3, 0xb7, 0xd2, 0xeb, 0xd6, 0xd0, 0xf1, 0x20, 0xb7, 0xf3, 0x20, 0xd4, 0xa0, 0xa2, 0xd6, 0xe1, 0xa0, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x35, 0x2e, 0x0a, 0x0a, 0xd5, 0xa8, 0xc6, 0xd6, 0xac, 0xa6, 0xa0, 0x20, 0xf5, 0xb7, 0xe1, 0xd6, 0xc6, 0xd6, 0x20, 0xb7, 0xe3, 0xd8, 0xd6, 0xd0, 0xed, 0xf3, 0xd6, 0xeb, 0xa0, 0xd0, 0xa0, 0xe3, 0xed, 0x20, 0xeb, 0x20, 0xe4, 0xa8, 0xe1, 0xa2, 0xb7, 0xb7, 0x2c, 0x20, 0xd3, 0xa0, 0xc6, 0xa8, 0xa6, 0xd6, 0xd4, 0xb7, 0xb7, 0x20, 0xb7, 0x20, 0xa3, 0xd6, 0xd0, 0xac, 0xa0, 0xe1, 0xb7, 0xb7, 0x2c, 0x20, 0xd4, 0xd6, 0x20, 0xeb, 0x20, 0xe2, 0xd6, 0xe3, 0xe3, 0xb7, 0xb7, 0x20, 0xd4, 0xa8, 0x20, 0xd8, 0xe1, 0xb7, 0xe9, 0xb7, 0xd0, 0xa0, 0xe3, 0xed, 0x2e, 0x0a, 0x0a, 0xdd, 0xa8, 0xe1, 0xeb, 0xa0, 0xde, 0x20, 0xd8, 0xd6, 0xd0, 0xd6, 0xeb, 0xb7, 0xd4, 0xa0, 0x20, 0xc6, 0xd6, 0xa6, 0xd6, 0xeb, 0xd6, 0xbd, 0x20, 0xe5, 0xa0, 0xa2, 0xd0, 0xb7, 0xa4, 0xf1, 0x20, 0xe3, 0xd6, 0xeb, 0xd8, 0xa0, 0xa6, 0xa0, 0xa8, 0xe5, 0x20, 0xe3, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2e, 0x20, 0xfc, 0xb7, 0xe3, 0xd0, 0xa0, 0x20, 0xd8, 0xd6, 0xa6, 0x20, 0xa2, 0xe7, 0xc6, 0xeb, 0xa0, 0xd2, 0xb7, 0x20, 0xd6, 0xa2, 0xd6, 0xf3, 0xd4, 0xa0, 0xfb, 0xa0, 0x9c, 0xe5, 0x20, 0xf5, 0xa8, 0xe3, 0xe5, 0xd4, 0xa0, 0xa6, 0xa4, 0xa0, 0xe5, 0xa8, 0xe1, 0xb7, 0xfb, 0xd4, 0xf1, 0xbd, 0x20, 0xc6, 0xd6, 0xa6, 0x20, 0xa2, 0xe7, 0xc6, 0xeb, 0xf1, 0x20, 0xeb, 0x20, 0x9d, 0xd4, 0xb7, 0xc6, 0xd6, 0xa6, 0xa8, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuIbm855);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm855'));
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru ibm866', () {
      final detector = UCharDet();
      // dart format off
      final kRuIbm866 = Uint8List.fromList([0x3c, 0x3c, 0x80, 0xab, 0xec, 0xe2, 0xa5, 0xe0, 0xad, 0xa0, 0xe2, 0xa8, 0xa2, 0xad, 0xa0, 0xef, 0x20, 0xaa, 0xae, 0xa4, 0xa8, 0xe0, 0xae, 0xa2, 0xaa, 0xa0, 0x3e, 0x3e, 0x20, 0x28, 0x3c, 0x3c, 0x80, 0xab, 0xec, 0xe2, 0xa5, 0xe0, 0xad, 0xa0, 0xe2, 0xa8, 0xa2, 0xad, 0xa0, 0xef, 0x20, 0xaa, 0xae, 0xa4, 0xa8, 0xe0, 0xae, 0xa2, 0xaa, 0xa0, 0x20, 0x83, 0x8e, 0x91, 0x92, 0x3e, 0x3e, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0xae, 0xe1, 0xad, 0xae, 0xa2, 0xa0, 0xad, 0xad, 0xa0, 0xef, 0x20, 0xad, 0xa0, 0x0a, 0x43, 0x50, 0x34, 0x33, 0x37, 0x20, 0xaa, 0xae, 0xa4, 0xae, 0xa2, 0xa0, 0xef, 0x20, 0xe1, 0xe2, 0xe0, 0xa0, 0xad, 0xa8, 0xe6, 0xa0, 0x2c, 0x20, 0xa3, 0xa4, 0xa5, 0x20, 0xa2, 0xe1, 0xa5, 0x20, 0xe1, 0xaf, 0xa5, 0xe6, 0xa8, 0xe4, 0xa8, 0xe7, 0xa5, 0xe1, 0xaa, 0xa8, 0xa5, 0x20, 0xa5, 0xa2, 0xe0, 0xae, 0xaf, 0xa5, 0xa9, 0xe1, 0xaa, 0xa8, 0xa5, 0x20, 0xe1, 0xa8, 0xac, 0xa2, 0xae, 0xab, 0xeb, 0x20, 0xa2, 0xae, 0x20, 0xa2, 0xe2, 0xae, 0xe0, 0xae, 0xa9, 0x0a, 0xaf, 0xae, 0xab, 0xae, 0xa2, 0xa8, 0xad, 0xa5, 0x20, 0xa7, 0xa0, 0xac, 0xa5, 0xad, 0xa5, 0xad, 0xeb, 0x20, 0xad, 0xa0, 0x20, 0xaa, 0xa8, 0xe0, 0xa8, 0xab, 0xab, 0xa8, 0xe6, 0xe3, 0x2c, 0x20, 0xae, 0xe1, 0xe2, 0xa0, 0xa2, 0xab, 0xef, 0xef, 0x20, 0xaf, 0xe1, 0xa5, 0xa2, 0xa4, 0xae, 0xa3, 0xe0, 0xa0, 0xe4, 0xa8, 0xe7, 0xa5, 0xe1, 0xaa, 0xa8, 0xa5, 0x20, 0xe1, 0xa8, 0xac, 0xa2, 0xae, 0xab, 0xeb, 0x20, 0xad, 0xa5, 0xe2, 0xe0, 0xae, 0xad, 0xe3, 0xe2, 0xeb, 0xac, 0xa8, 0x2e, 0x0a, 0x91, 0xab, 0xa5, 0xa4, 0xae, 0xa2, 0xa0, 0xe2, 0xa5, 0xab, 0xec, 0xad, 0xae, 0x2c, 0x20, 0xed, 0xe2, 0xae, 0x20, 0xad, 0xa5, 0x20, 0xaf, 0xae, 0xe0, 0xe2, 0xa8, 0xe2, 0x20, 0xa2, 0xa8, 0xa4, 0x20, 0xaf, 0xe0, 0xae, 0xa3, 0xe0, 0xa0, 0xac, 0xac, 0x2c, 0x20, 0xa8, 0xe1, 0xaf, 0xae, 0xab, 0xec, 0xa7, 0xe3, 0xee, 0xe9, 0xa8, 0xe5, 0x20, 0xa4, 0xab, 0xef, 0x20, 0xe0, 0xa0, 0xa1, 0xae, 0xe2, 0xeb, 0x20, 0xe2, 0xa5, 0xaa, 0xe1, 0xe2, 0xae, 0xa2, 0xeb, 0xa5, 0x0a, 0xae, 0xaa, 0xad, 0xa0, 0x2c, 0x20, 0xa0, 0x20, 0xe2, 0xa0, 0xaa, 0xa6, 0xa5, 0x20, 0xae, 0xa1, 0xa5, 0xe1, 0xaf, 0xa5, 0xe7, 0xa8, 0xa2, 0xa0, 0xa5, 0xe2, 0x20, 0xa8, 0xe1, 0xaf, 0xae, 0xab, 0xec, 0xa7, 0xae, 0xa2, 0xa0, 0xad, 0xa8, 0xa5, 0x20, 0xa2, 0x20, 0xad, 0xa8, 0xe5, 0x20, 0xe1, 0xa8, 0xac, 0xa2, 0xae, 0xab, 0xae, 0xa2, 0x20, 0xaa, 0xa8, 0xe0, 0xa8, 0xab, 0xab, 0xa8, 0xe6, 0xeb, 0x2e, 0x0a, 0x0a, 0x88, 0xe1, 0xe2, 0xae, 0xe0, 0xa8, 0xe7, 0xa5, 0xe1, 0xaa, 0xa8, 0x20, 0xe1, 0xe3, 0xe9, 0xa5, 0xe1, 0xe2, 0xa2, 0xae, 0xa2, 0xa0, 0xab, 0xae, 0x20, 0xac, 0xad, 0xae, 0xa3, 0xae, 0x20, 0xa2, 0xa0, 0xe0, 0xa8, 0xa0, 0xad, 0xe2, 0xae, 0xa2, 0x20, 0xa0, 0xab, 0xec, 0xe2, 0xa5, 0xe0, 0xad, 0xa0, 0xe2, 0xa8, 0xa2, 0xad, 0xae, 0xa9, 0x20, 0xaa, 0xae, 0xa4, 0xa8, 0xe0, 0xae, 0xa2, 0xaa, 0xa8, 0x2c, 0x20, 0xad, 0xae, 0x20, 0xa2, 0xe1, 0xa5, 0x0a, 0xe0, 0xa0, 0xa7, 0xab, 0xa8, 0xe7, 0xa8, 0xef, 0x20, 0xaa, 0xa0, 0xe1, 0xa0, 0xee, 0xe2, 0xe1, 0xef, 0x20, 0xe2, 0xae, 0xab, 0xec, 0xaa, 0xae, 0x20, 0xae, 0xa1, 0xab, 0xa0, 0xe1, 0xe2, 0xa8, 0x20, 0x30, 0x78, 0x46, 0x30, 0x20, 0x2d, 0x2d, 0x20, 0x30, 0x78, 0x46, 0x46, 0x20, 0x28, 0x32, 0x34, 0x30, 0x2d, 0x2d, 0x32, 0x35, 0x35, 0x29, 0x2e, 0x20, 0x88, 0xe1, 0xaf, 0xae, 0xab, 0xec, 0xa7, 0xae, 0xa2, 0xa0, 0xab, 0xa8, 0xe1, 0xec, 0x0a, 0xa2, 0xe1, 0xa5, 0xa2, 0xae, 0xa7, 0xac, 0xae, 0xa6, 0xad, 0xeb, 0xa5, 0x20, 0xe0, 0xe3, 0xe1, 0xa8, 0xe4, 0xa8, 0xaa, 0xa0, 0xe2, 0xae, 0xe0, 0xeb, 0x2d, 0xe1, 0xa0, 0xac, 0xae, 0xa4, 0xa5, 0xab, 0xaa, 0xa8, 0x2c, 0x20, 0xaf, 0xa8, 0xe1, 0xa0, 0xa2, 0xe8, 0xa8, 0xa5, 0xe1, 0xef, 0x20, 0xad, 0xa5, 0xa7, 0xa0, 0xa2, 0xa8, 0xe1, 0xa8, 0xac, 0xae, 0x20, 0xe7, 0xa0, 0xe1, 0xe2, 0xad, 0xeb, 0xac, 0xa8, 0x0a, 0xaf, 0xe0, 0xae, 0xa3, 0xe0, 0xa0, 0xac, 0xac, 0xa8, 0xe1, 0xe2, 0xa0, 0xac, 0xa8, 0x2c, 0x20, 0xe0, 0xa0, 0xe1, 0xaf, 0xe0, 0xae, 0xe1, 0xe2, 0xe0, 0xa0, 0xad, 0xef, 0xef, 0xe1, 0xec, 0x20, 0xaf, 0xae, 0x20, 0xa7, 0xad, 0xa0, 0xaa, 0xae, 0xac, 0xe1, 0xe2, 0xa2, 0xe3, 0x20, 0xa8, 0x20, 0xe7, 0xa5, 0xe0, 0xa5, 0xa7, 0x20, 0xe0, 0xa5, 0xa4, 0xaa, 0xa8, 0xa5, 0x20, 0xaa, 0xae, 0xac, 0xaf, 0xec, 0xee, 0xe2, 0xa5, 0xe0, 0xad, 0xeb, 0xa5, 0x0a, 0xe6, 0xa5, 0xad, 0xe2, 0xe0, 0xeb, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuIbm866);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm866'));
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru iso-8859-5', () {
      final detector = UCharDet();
      // dart format off
      final kRuIso88595 = Uint8List.fromList([0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x35, 0x20, 0x0a, 0x38, 0x2d, 0xd1, 0xd8, 0xe2, 0xdd, 0xd0, 0xef, 0x20, 0xda, 0xde, 0xd4, 0xde, 0xd2, 0xd0, 0xef, 0x20, 0xe1, 0xe2, 0xe0, 0xd0, 0xdd, 0xd8, 0xe6, 0xd0, 0x20, 0xd8, 0xd7, 0x20, 0xe1, 0xd5, 0xdc, 0xd5, 0xd9, 0xe1, 0xe2, 0xd2, 0xd0, 0x20, 0xda, 0xde, 0xd4, 0xde, 0xd2, 0xeb, 0xe5, 0x20, 0xe1, 0xe2, 0xe0, 0xd0, 0xdd, 0xd8, 0xe6, 0x20, 0xe1, 0xe2, 0xd0, 0xdd, 0xd4, 0xd0, 0xe0, 0xe2, 0xd0, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x20, 0xd4, 0xdb, 0xef, 0x20, 0xdf, 0xe0, 0xd5, 0xd4, 0xe1, 0xe2, 0xd0, 0xd2, 0xdb, 0xd5, 0xdd, 0xd8, 0xef, 0x20, 0xda, 0xd8, 0xe0, 0xd8, 0xdb, 0xdb, 0xd8, 0xe6, 0xeb, 0x2e, 0x0a, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x35, 0x20, 0xd1, 0xeb, 0xdb, 0xd0, 0x20, 0xe1, 0xde, 0xd7, 0xd4, 0xd0, 0xdd, 0xd0, 0x20, 0xdd, 0xd0, 0x20, 0xd1, 0xd0, 0xd7, 0xd5, 0x20, 0x22, 0xde, 0xe1, 0xdd, 0xde, 0xd2, 0xdd, 0xde, 0xd9, 0x20, 0xda, 0xde, 0xd4, 0xd8, 0xe0, 0xde, 0xd2, 0xda, 0xd8, 0x22, 0x20, 0x28, 0xd2, 0xe1, 0xd5, 0x20, 0xe0, 0xe3, 0xe1, 0xe1, 0xda, 0xd8, 0xd5, 0x20, 0xd1, 0xe3, 0xda, 0xd2, 0xeb, 0x20, 0xe1, 0xde, 0xe5, 0xe0, 0xd0, 0xdd, 0xd8, 0xdb, 0xd8, 0x20, 0xe1, 0xd2, 0xde, 0xf1, 0x20, 0xe0, 0xd0, 0xe1, 0xdf, 0xde, 0xdb, 0xde, 0xd6, 0xd5, 0xdd, 0xd8, 0xd5, 0x2c, 0x20, 0xd7, 0xd0, 0x20, 0xd8, 0xe1, 0xda, 0xdb, 0xee, 0xe7, 0xd5, 0xdd, 0xd8, 0xd5, 0xdc, 0x20, 0xd7, 0xd0, 0xd3, 0xdb, 0xd0, 0xd2, 0xdd, 0xde, 0xd9, 0x20, 0xa1, 0x29, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuIso88595);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-5'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru koi8-r', () {
      final detector = UCharDet();
      // dart format off
      final kRuKoi8r = Uint8List.fromList([0xeb, 0xef, 0xe9, 0x2d, 0x38, 0x20, 0x28, 0xcb, 0xcf, 0xc4, 0x20, 0xcf, 0xc2, 0xcd, 0xc5, 0xce, 0xc1, 0x20, 0xc9, 0xce, 0xc6, 0xcf, 0xd2, 0xcd, 0xc1, 0xc3, 0xc9, 0xc5, 0xca, 0x2c, 0x20, 0x38, 0x20, 0xc2, 0xc9, 0xd4, 0xcf, 0xd7, 0x29, 0x2c, 0x20, 0x4b, 0x4f, 0x49, 0x38, 0x20, 0x2d, 0x20, 0xd7, 0xcf, 0xd3, 0xd8, 0xcd, 0xc9, 0xc2, 0xc9, 0xd4, 0xcf, 0xd7, 0xc1, 0xd1, 0x20, 0xcb, 0xcf, 0xc4, 0xcf, 0xd7, 0xc1, 0xd1, 0x20, 0xd3, 0xd4, 0xd2, 0xc1, 0xce, 0xc9, 0xc3, 0xc1, 0x2c, 0x20, 0xd3, 0xcf, 0xd7, 0xcd, 0xc5, 0xd3, 0xd4, 0xc9, 0xcd, 0xc1, 0xd1, 0x20, 0xd3, 0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2e, 0x20, 0xf2, 0xc1, 0xda, 0xd2, 0xc1, 0xc2, 0xcf, 0xd4, 0xc1, 0xce, 0xc1, 0x20, 0xc4, 0xcc, 0xd1, 0x20, 0xcb, 0xcf, 0xc4, 0xc9, 0xd2, 0xcf, 0xd7, 0xc1, 0xce, 0xc9, 0xd1, 0x20, 0xc2, 0xd5, 0xcb, 0xd7, 0x20, 0xcb, 0xc9, 0xd2, 0xc9, 0xcc, 0xcc, 0xc9, 0xde, 0xc5, 0xd3, 0xcb, 0xc9, 0xc8, 0x20, 0xc1, 0xcc, 0xc6, 0xc1, 0xd7, 0xc9, 0xd4, 0xcf, 0xd7, 0x2e, 0x20, 0xe2, 0xd9, 0xcc, 0xc1, 0x20, 0xdb, 0xc9, 0xd2, 0xcf, 0xcb, 0xcf, 0x20, 0xd2, 0xc1, 0xd3, 0xd0, 0xd2, 0xcf, 0xd3, 0xd4, 0xd2, 0xc1, 0xce, 0xc5, 0xce, 0xc1, 0x20, 0xcb, 0xc1, 0xcb, 0x20, 0xcf, 0xd3, 0xce, 0xcf, 0xd7, 0xce, 0xc1, 0xd1, 0x20, 0xd2, 0xd5, 0xd3, 0xd3, 0xcb, 0xc1, 0xd1, 0x20, 0xcb, 0xcf, 0xc4, 0xc9, 0xd2, 0xcf, 0xd7, 0xcb, 0xc1, 0x20, 0xd7, 0x20, 0x55, 0x6e, 0x69, 0x78, 0x2d, 0xd3, 0xcf, 0xd7, 0xcd, 0xc5, 0xd3, 0xd4, 0xc9, 0xcd, 0xd9, 0xc8, 0x20, 0xef, 0xf3, 0x20, 0xc9, 0x20, 0xd7, 0x20, 0xdc, 0xcc, 0xc5, 0xcb, 0xd4, 0xd2, 0xcf, 0xce, 0xce, 0xcf, 0xca, 0x20, 0xd0, 0xcf, 0xde, 0xd4, 0xc5, 0x2c, 0x20, 0xcf, 0xc4, 0xce, 0xc1, 0xcb, 0xcf, 0x20, 0xc2, 0xcc, 0xc9, 0xd6, 0xc5, 0x20, 0xcb, 0x20, 0x32, 0x30, 0x31, 0x30, 0x20, 0xc7, 0xcf, 0xc4, 0xd5, 0x2c, 0x20, 0xd3, 0x20, 0xd2, 0xc1, 0xd3, 0xd0, 0xd2, 0xcf, 0xd3, 0xd4, 0xd2, 0xc1, 0xce, 0xc5, 0xce, 0xc9, 0xc5, 0xcd, 0x20, 0xe0, 0xce, 0xc9, 0xcb, 0xcf, 0xc4, 0xc1, 0x2c, 0x20, 0xd0, 0xcf, 0xd3, 0xd4, 0xc5, 0xd0, 0xc5, 0xce, 0xce, 0xcf, 0x20, 0xd7, 0xd9, 0xc8, 0xcf, 0xc4, 0xc9, 0xd4, 0x20, 0xc9, 0xda, 0x20, 0xd5, 0xd0, 0xcf, 0xd4, 0xd2, 0xc5, 0xc2, 0xcc, 0xc5, 0xce, 0xc9, 0xd1, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuKoi8r);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('koi8-r'));
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru mac-cyrillic', () {
      final detector = UCharDet();
      // dart format off
      final kRuMaccyrillic = Uint8List.fromList([0x8a, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe0, 0x20, 0x4d, 0x61, 0x63, 0x43, 0x79, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x20, 0xe8, 0xf1, 0xef, 0xee, 0xeb, 0xfc, 0xe7, 0xf3, 0xe5, 0xf2, 0xf1, 0xdf, 0x20, 0xf2, 0xee, 0xeb, 0xfc, 0xea, 0xee, 0x20, 0xed, 0xe0, 0x20, 0xea, 0xee, 0xec, 0xef, 0xfc, 0xfe, 0xf2, 0xe5, 0xf0, 0xe0, 0xf5, 0x20, 0xc7, 0x8c, 0xe0, 0xea, 0xe8, 0xed, 0xf2, 0xee, 0xf8, 0xc8, 0x2e, 0x0a, 0x0a, 0x81, 0xeb, 0xe0, 0xe3, 0xee, 0xe4, 0xe0, 0xf0, 0xdf, 0x20, 0xee, 0xf2, 0xf1, 0xf3, 0xf2, 0xf1, 0xf2, 0xe2, 0xe8, 0xfe, 0x20, 0xef, 0xf1, 0xe5, 0xe2, 0xe4, 0xee, 0xe3, 0xf0, 0xe0, 0xf4, 0xe8, 0xea, 0xe8, 0x20, 0xe8, 0x20, 0xc7, 0xe2, 0xe5, 0xf0, 0xf5, 0xed, 0xe8, 0xf5, 0xc8, 0x20, 0xf3, 0xef, 0xf0, 0xe0, 0xe2, 0xeb, 0xdf, 0xfe, 0xf9, 0xe8, 0xf5, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xee, 0xe2, 0x20, 0xfd, 0xf2, 0xe0, 0x0a, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe0, 0x20, 0xe2, 0xea, 0xeb, 0xfe, 0xf7, 0xe0, 0xe5, 0xf2, 0x20, 0xe4, 0xee, 0xe2, 0xee, 0xeb, 0xfc, 0xed, 0xee, 0x20, 0xec, 0xed, 0xee, 0xe3, 0xee, 0x20, 0xef, 0xee, 0xeb, 0xe5, 0xe7, 0xed, 0xfb, 0xf5, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xee, 0xe2, 0x3b, 0x20, 0xea, 0xf0, 0xee, 0xec, 0xe5, 0x20, 0xf2, 0xee, 0xe3, 0xee, 0x2c, 0x20, 0xef, 0xf0, 0xe8, 0xf1, 0xf3, 0xf2, 0xf1, 0xf2, 0xe2, 0xf3, 0xfe, 0xf2, 0x0a, 0xe2, 0xf1, 0xe5, 0x20, 0xe4, 0xee, 0xef, 0xee, 0xeb, 0xed, 0xe8, 0xf2, 0xe5, 0xeb, 0xfc, 0xed, 0xfb, 0xe5, 0x20, 0xe1, 0xf3, 0xea, 0xe2, 0xfb, 0x2c, 0x20, 0xed, 0xe5, 0xee, 0xe1, 0xf5, 0xee, 0xe4, 0xe8, 0xec, 0xfb, 0xe5, 0x20, 0xe4, 0xeb, 0xdf, 0x20, 0xe7, 0xe0, 0xef, 0xe8, 0xf1, 0xe8, 0x20, 0xf3, 0xea, 0xf0, 0xe0, 0xe8, 0xed, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x20, 0x28, 0xea, 0xf0, 0xee, 0xec, 0xe5, 0x20, 0xa2, 0x29, 0x2c, 0x0a, 0xe1, 0xe5, 0xeb, 0xee, 0xf0, 0xf3, 0xf1, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x2c, 0x20, 0xec, 0xe0, 0xea, 0xe5, 0xe4, 0xee, 0xed, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x20, 0xe8, 0x20, 0xf1, 0xe5, 0xf0, 0xe1, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x20, 0xdf, 0xe7, 0xfb, 0xea, 0xee, 0xe2, 0x2e, 0x0a, 0x0a, 0x8d, 0xe8, 0xe6, 0xed, 0xdf, 0xdf, 0x20, 0xf7, 0xe0, 0xf1, 0xf2, 0xfc, 0x20, 0xf2, 0xe0, 0xe1, 0xeb, 0xe8, 0xf6, 0xfb, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe8, 0x20, 0x28, 0xeb, 0xe0, 0xf2, 0xe8, 0xed, 0xe8, 0xf6, 0xe0, 0x29, 0x20, 0xef, 0xee, 0xeb, 0xed, 0xee, 0xf1, 0xf2, 0xfc, 0xfe, 0x20, 0xf1, 0xee, 0xee, 0xf2, 0xe2, 0xe5, 0xf2, 0xf1, 0xf2, 0xe2, 0xf3, 0xe5, 0xf2, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe5, 0x0a, 0x41, 0x53, 0x43, 0x49, 0x49, 0x2e, 0x20, 0x97, 0xe8, 0xf1, 0xeb, 0xe0, 0x20, 0xef, 0xee, 0xe4, 0x20, 0xe1, 0xf3, 0xea, 0xe2, 0xe0, 0xec, 0xe8, 0x20, 0xee, 0xe1, 0xee, 0xe7, 0xed, 0xe0, 0xf7, 0xe0, 0xfe, 0xf2, 0x20, 0xf8, 0xe5, 0xf1, 0xf2, 0xed, 0xe0, 0xe4, 0xf6, 0xe0, 0xf2, 0xe5, 0xf0, 0xe8, 0xf7, 0xed, 0xfb, 0xe9, 0x20, 0xea, 0xee, 0xe4, 0x20, 0xe1, 0xf3, 0xea, 0xe2, 0xfb, 0x20, 0xe2, 0x20, 0x9e, 0xed, 0xe8, 0xea, 0xee, 0xe4, 0xe5, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuMaccyrillic);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-cyrillic'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kRuUtf8 = Uint8List.fromList([0xd0, 0xa1, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x82, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x87, 0xd1, 0x91, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x8e, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x83, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0x20, 0x31, 0x34, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0x31, 0x35, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0x28, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x81, 0x20, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x81, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x29, 0x2c, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x20, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd1, 0x8c, 0xd0, 0xb8, 0xd1, 0x85, 0x2e, 0x20, 0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0x2c, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x88, 0xd0, 0xb0, 0xd1, 0x84, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x85, 0x2c, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb0, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x85, 0x2e, 0x20, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0xc2, 0xa0, 0xe2, 0x80, 0x94, 0x20, 0xd0, 0xa1, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x8c, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7, 0x20, 0xd0, 0x91, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0x90, 0xd0, 0xb7, 0xd0, 0xb8, 0xd1, 0x8e, 0x2c, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0x95, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x83, 0x2e, 0x20, 0xd0, 0x92, 0x20, 0xd0, 0x95, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0x38, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0x3a, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x80, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8a, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x83, 0x20, 0x62, 0x6f, 0x62, 0x61, 0x6b, 0x20, 0x28, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x2c, 0x20, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x2c, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x29, 0x2c, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd1, 0x83, 0xd1, 0x8e, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x83, 0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x8b, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbe, 0x2d, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0x9a, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x2c, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xa6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0, 0x90, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0x9c, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb7, 0xd0, 0xb1, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x85, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0xb9, 0x2c, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbe, 0x2d, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba, 0x2e, 0x20, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd1, 0x8b, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb3, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8f, 0xd0, 0xbc, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xbd, 0xd1, 0x8e, 0xd1, 0x8e, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x8f, 0xd1, 0x87, 0xd0, 0xba, 0xd1, 0x83, 0x2e, 0x20, 0xd0, 0x92, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8b, 0x2c, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x85, 0x2c, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x8e, 0xd1, 0x82, 0x20, 0xd1, 0x82, 0xd1, 0x91, 0xd0, 0xbf, 0xd0, 0xbb, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x85, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x82, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbc, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0x28, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0x29, 0x20, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x89, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x81, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0x20, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0x2c, 0x20, 0xd0, 0xba, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0x2c, 0x20, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0x2e, 0x20, 0xd0, 0xa1, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd1, 0x86, 0xd0, 0xb0, 0x5b, 0x33, 0x5d, 0x2e, 0x20, 0xd0, 0xa1, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x8f, 0xd1, 0x82, 0x5b, 0x33, 0x5d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect ru windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kRuWindows1251 = Uint8List.fromList([0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x31, 0x0a, 0xed, 0xe0, 0xe1, 0xee, 0xf0, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xee, 0xe2, 0x20, 0xe8, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe0, 0x2c, 0x20, 0xff, 0xe2, 0xeb, 0xff, 0xfe, 0xf9, 0xe0, 0xff, 0xf1, 0xff, 0x20, 0xf1, 0xf2, 0xe0, 0xed, 0xe4, 0xe0, 0xf0, 0xf2, 0xed, 0xee, 0xe9, 0x20, 0x38, 0x2d, 0xe1, 0xe8, 0xf2, 0xed, 0xee, 0xe9, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xee, 0xe9, 0x20, 0xe4, 0xeb, 0xff, 0x20, 0xe2, 0xf1, 0xe5, 0xf5, 0x20, 0xf0, 0xf3, 0xf1, 0xf1, 0xea, 0xe8, 0xf5, 0x20, 0xe2, 0xe5, 0xf0, 0xf1, 0xe8, 0xe9, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2e, 0x20, 0xcf, 0xee, 0xeb, 0xfc, 0xe7, 0xf3, 0xe5, 0xf2, 0xf1, 0xff, 0x20, 0xe4, 0xee, 0xe2, 0xee, 0xeb, 0xfc, 0xed, 0xee, 0x20, 0xe1, 0xee, 0xeb, 0xfc, 0xf8, 0xee, 0xe9, 0x20, 0xef, 0xee, 0xef, 0xf3, 0xeb, 0xff, 0xf0, 0xed, 0xee, 0xf1, 0xf2, 0xfc, 0xfe, 0x2e, 0x20, 0xc1, 0xfb, 0xeb, 0xe0, 0x20, 0xf1, 0xee, 0xe7, 0xe4, 0xe0, 0xed, 0xe0, 0x20, 0xed, 0xe0, 0x20, 0xe1, 0xe0, 0xe7, 0xe5, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xee, 0xea, 0x2c, 0x20, 0xe8, 0xf1, 0xef, 0xee, 0xeb, 0xfc, 0xe7, 0xee, 0xe2, 0xe0, 0xe2, 0xf8, 0xe8, 0xf5, 0xf1, 0xff, 0x20, 0xe2, 0x20, 0xf0, 0xe0, 0xed, 0xed, 0xe8, 0xf5, 0x20, 0xab, 0xf1, 0xe0, 0xec, 0xee, 0xef, 0xe0, 0xeb, 0xfc, 0xed, 0xfb, 0xf5, 0xbb, 0x20, 0xf0, 0xf3, 0xf1, 0xe8, 0xf4, 0xe8, 0xea, 0xe0, 0xf2, 0xee, 0xf0, 0xe0, 0xf5, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0xe2, 0x20, 0x31, 0x39, 0x39, 0x30, 0x97, 0x31, 0x39, 0x39, 0x31, 0x20, 0xe3, 0xe3, 0x2e, 0x20, 0xf1, 0xee, 0xe2, 0xec, 0xe5, 0xf1, 0xf2, 0xed, 0xee, 0x20, 0xef, 0xf0, 0xe5, 0xe4, 0xf1, 0xf2, 0xe0, 0xe2, 0xe8, 0xf2, 0xe5, 0xeb, 0xff, 0xec, 0xe8, 0x20, 0xab, 0xcf, 0xe0, 0xf0, 0xe0, 0xe3, 0xf0, 0xe0, 0xf4, 0xe0, 0xbb, 0x2c, 0x20, 0xab, 0xc4, 0xe8, 0xe0, 0xeb, 0xee, 0xe3, 0xe0, 0xbb, 0x20, 0xe8, 0x20, 0xf0, 0xee, 0xf1, 0xf1, 0xe8, 0xe9, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x20, 0xee, 0xf2, 0xe4, 0xe5, 0xeb, 0xe5, 0xed, 0xe8, 0xff, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x20, 0xcf, 0xe5, 0xf0, 0xe2, 0xee, 0xed, 0xe0, 0xf7, 0xe0, 0xeb, 0xfc, 0xed, 0xfb, 0xe9, 0x20, 0xe2, 0xe0, 0xf0, 0xe8, 0xe0, 0xed, 0xf2, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xea, 0xe8, 0x20, 0xf1, 0xe8, 0xeb, 0xfc, 0xed, 0xee, 0x20, 0xee, 0xf2, 0xeb, 0xe8, 0xf7, 0xe0, 0xeb, 0xf1, 0xff, 0x20, 0xee, 0xf2, 0x20, 0xef, 0xf0, 0xe5, 0xe4, 0xf1, 0xf2, 0xe0, 0xe2, 0xeb, 0xe5, 0xed, 0xed, 0xee, 0xe3, 0xee, 0x20, 0xed, 0xe8, 0xe6, 0xe5, 0x20, 0xe2, 0x20, 0xf2, 0xe0, 0xe1, 0xeb, 0xe8, 0xf6, 0xe5, 0x20, 0x28, 0xe2, 0x20, 0xf7, 0xe0, 0xf1, 0xf2, 0xed, 0xee, 0xf1, 0xf2, 0xe8, 0x2c, 0x20, 0xf2, 0xe0, 0xec, 0x20, 0xe1, 0xfb, 0xeb, 0xee, 0x20, 0xe7, 0xed, 0xe0, 0xf7, 0xe8, 0xf2, 0xe5, 0xeb, 0xfc, 0xed, 0xee, 0xe5, 0x20, 0xf7, 0xe8, 0xf1, 0xeb, 0xee, 0x20, 0xab, 0xe1, 0xe5, 0xeb, 0xfb, 0xf5, 0x20, 0xef, 0xff, 0xf2, 0xe5, 0xed, 0xbb, 0x29, 0x2e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2d, 0x31, 0x32, 0x35, 0x31, 0x20, 0xe2, 0xfb, 0xe3, 0xee, 0xe4, 0xed, 0xee, 0x20, 0xee, 0xf2, 0xeb, 0xe8, 0xf7, 0xe0, 0xe5, 0xf2, 0xf1, 0xff, 0x20, 0xee, 0xf2, 0x20, 0xe4, 0xf0, 0xf3, 0xe3, 0xe8, 0xf5, 0x20, 0x38, 0x2d, 0xe1, 0xe8, 0xf2, 0xed, 0xfb, 0xf5, 0x20, 0xea, 0xe8, 0xf0, 0xe8, 0xeb, 0xeb, 0xe8, 0xf7, 0xe5, 0xf1, 0xea, 0xe8, 0xf5, 0x20, 0xea, 0xee, 0xe4, 0xe8, 0xf0, 0xee, 0xe2, 0xee, 0xea, 0x20, 0x28, 0xf2, 0xe0, 0xea, 0xe8, 0xf5, 0x20, 0xea, 0xe0, 0xea, 0x20, 0x43, 0x50, 0x38, 0x36, 0x36, 0x2c, 0x20, 0x4b, 0x4f, 0x49, 0x38, 0x2d, 0x52, 0x20, 0xe8, 0x20, 0x49, 0x53, 0x4f, 0x20, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x35, 0x29, 0x20, 0xed, 0xe0, 0xeb, 0xe8, 0xf7, 0xe8, 0xe5, 0xec, 0x20, 0xef, 0xf0, 0xe0, 0xea, 0xf2, 0xe8, 0xf7, 0xe5, 0xf1, 0xea, 0xe8, 0x20, 0xe2, 0xf1, 0xe5, 0xf5, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xee, 0xe2, 0x2c, 0x20, 0xe8, 0xf1, 0xef, 0xee, 0xeb, 0xfc, 0xe7, 0xf3, 0xfe, 0xf9, 0xe8, 0xf5, 0xf1, 0xff, 0x20, 0xe2, 0x20, 0xf0, 0xf3, 0xf1, 0xf1, 0xea, 0xee, 0xe9, 0x20, 0xf2, 0xe8, 0xef, 0xee, 0xe3, 0xf0, 0xe0, 0xf4, 0xe8, 0xea, 0xe5, 0x20, 0xe4, 0xeb, 0xff, 0x20, 0xee, 0xe1, 0xfb, 0xf7, 0xed, 0xee, 0xe3, 0xee, 0x20, 0xf2, 0xe5, 0xea, 0xf1, 0xf2, 0xe0, 0x20, 0x28, 0xee, 0xf2, 0xf1, 0xf3, 0xf2, 0xf1, 0xf2, 0xe2, 0xf3, 0xe5, 0xf2, 0x20, 0xf2, 0xee, 0xeb, 0xfc, 0xea, 0xee, 0x20, 0xe7, 0xed, 0xe0, 0xf7, 0xee, 0xea, 0x20, 0xf3, 0xe4, 0xe0, 0xf0, 0xe5, 0xed, 0xe8, 0xff, 0x29, 0x3b, 0x20, 0xee, 0xed, 0xe0, 0x20, 0xf2, 0xe0, 0xea, 0xe6, 0xe5, 0x20, 0xf1, 0xee, 0xe4, 0xe5, 0xf0, 0xe6, 0xe8, 0xf2, 0x20, 0xe2, 0xf1, 0xe5, 0x20, 0xf1, 0xe8, 0xec, 0xe2, 0xee, 0xeb, 0xfb, 0x20, 0xe4, 0xeb, 0xff, 0x20, 0xe4, 0xf0, 0xf3, 0xe3, 0xe8, 0xf5, 0x20, 0xf1, 0xeb, 0xe0, 0xe2, 0xff, 0xed, 0xf1, 0xea, 0xe8, 0xf5, 0x20, 0xff, 0xe7, 0xfb, 0xea, 0xee, 0xe2, 0x3a, 0x20, 0xf3, 0xea, 0xf0, 0xe0, 0xe8, 0xed, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x2c, 0x20, 0xe1, 0xe5, 0xeb, 0xee, 0xf0, 0xf3, 0xf1, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x2c, 0x20, 0xf1, 0xe5, 0xf0, 0xe1, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x2c, 0x20, 0xec, 0xe0, 0xea, 0xe5, 0xe4, 0xee, 0xed, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x20, 0xe8, 0x20, 0xe1, 0xee, 0xeb, 0xe3, 0xe0, 0xf0, 0xf1, 0xea, 0xee, 0xe3, 0xee, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kRuWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('ru'));
    });

    test('detect sk ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kSkIbm852 = Uint8List.fromList([0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x69, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x82, 0x74, 0x61, 0x20, 0x76, 0x20, 0x70, 0x6f, 0x72, 0x61, 0x64, 0xa1, 0x20, 0x6f, 0x64, 0x20, 0x53, 0x6c, 0x6e, 0x6b, 0x61, 0x2c, 0x20, 0x6e, 0x61, 0x6a, 0x76, 0x84, 0x9f, 0xe7, 0x69, 0x61, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6a, 0x68, 0x6d, 0x6f, 0x74, 0x6e, 0x65, 0x6a, 0xe7, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x82, 0x74, 0x61, 0x0a, 0x6e, 0x61, 0xe7, 0x65, 0x6a, 0x20, 0x73, 0x6c, 0x6e, 0x65, 0x9f, 0x6e, 0x65, 0x6a, 0x20, 0x73, 0xa3, 0x73, 0x74, 0x61, 0x76, 0x79, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x70, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x6e, 0xec, 0x20, 0x70, 0x6f, 0x20, 0x72, 0xa1, 0x6d, 0x73, 0x6b, 0x6f, 0x6d, 0x20, 0x62, 0x6f, 0x68, 0x6f, 0x76, 0x69, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x69, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x6d, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x82, 0x74, 0x79, 0x20, 0x6a, 0x65, 0x20, 0xe7, 0x74, 0x79, 0x6c, 0x69, 0x7a, 0x6f, 0x76, 0x61, 0x6e, 0x82, 0x20, 0x7a, 0x6e, 0xa0, 0x7a, 0x6f, 0x72, 0x6e, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x68, 0x6f, 0x20, 0x62, 0x6f, 0xa7, 0x73, 0x6b, 0x82, 0x68, 0x6f, 0x20, 0x62, 0x6c, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSkIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('sk'));
    });

    test('detect sk iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kSkIso88592 = Uint8List.fromList([0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x69, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x61, 0x20, 0x76, 0x20, 0x70, 0x6f, 0x72, 0x61, 0x64, 0xed, 0x20, 0x6f, 0x64, 0x20, 0x53, 0x6c, 0x6e, 0x6b, 0x61, 0x2c, 0x20, 0x6e, 0x61, 0x6a, 0x76, 0xe4, 0xe8, 0xb9, 0x69, 0x61, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6a, 0x68, 0x6d, 0x6f, 0x74, 0x6e, 0x65, 0x6a, 0xb9, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x61, 0x0a, 0x6e, 0x61, 0xb9, 0x65, 0x6a, 0x20, 0x73, 0x6c, 0x6e, 0x65, 0xe8, 0x6e, 0x65, 0x6a, 0x20, 0x73, 0xfa, 0x73, 0x74, 0x61, 0x76, 0x79, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x70, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x6e, 0xfd, 0x20, 0x70, 0x6f, 0x20, 0x72, 0xed, 0x6d, 0x73, 0x6b, 0x6f, 0x6d, 0x20, 0x62, 0x6f, 0x68, 0x6f, 0x76, 0x69, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x69, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x6d, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x79, 0x20, 0x6a, 0x65, 0x20, 0xb9, 0x74, 0x79, 0x6c, 0x69, 0x7a, 0x6f, 0x76, 0x61, 0x6e, 0xe9, 0x20, 0x7a, 0x6e, 0xe1, 0x7a, 0x6f, 0x72, 0x6e, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x68, 0x6f, 0x20, 0x62, 0x6f, 0xbe, 0x73, 0x6b, 0xe9, 0x68, 0x6f, 0x20, 0x62, 0x6c, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSkIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sk'));
    });

    test('detect sk mac-centraleurope', () {
      final detector = UCharDet();
      // dart format off
      final kSkMaccentraleurope = Uint8List.fromList([0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x69, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x8e, 0x74, 0x61, 0x20, 0x76, 0x20, 0x70, 0x6f, 0x72, 0x61, 0x64, 0x92, 0x20, 0x6f, 0x64, 0x20, 0x53, 0x6c, 0x6e, 0x6b, 0x61, 0x2c, 0x20, 0x6e, 0x61, 0x6a, 0x76, 0x8a, 0x8b, 0xe4, 0x69, 0x61, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6a, 0x68, 0x6d, 0x6f, 0x74, 0x6e, 0x65, 0x6a, 0xe4, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x8e, 0x74, 0x61, 0x0a, 0x6e, 0x61, 0xe4, 0x65, 0x6a, 0x20, 0x73, 0x6c, 0x6e, 0x65, 0x8b, 0x6e, 0x65, 0x6a, 0x20, 0x73, 0x9c, 0x73, 0x74, 0x61, 0x76, 0x79, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x70, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x6e, 0xf9, 0x20, 0x70, 0x6f, 0x20, 0x72, 0x92, 0x6d, 0x73, 0x6b, 0x6f, 0x6d, 0x20, 0x62, 0x6f, 0x68, 0x6f, 0x76, 0x69, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x69, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x6d, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x8e, 0x74, 0x79, 0x20, 0x6a, 0x65, 0x20, 0xe4, 0x74, 0x79, 0x6c, 0x69, 0x7a, 0x6f, 0x76, 0x61, 0x6e, 0x8e, 0x20, 0x7a, 0x6e, 0x87, 0x7a, 0x6f, 0x72, 0x6e, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x68, 0x6f, 0x20, 0x62, 0x6f, 0xec, 0x73, 0x6b, 0x8e, 0x68, 0x6f, 0x20, 0x62, 0x6c, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSkMaccentraleurope);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-centraleurope'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sk'));
    });

    test('detect sk utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kSkUtf8 = Uint8List.fromList([0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x69, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xc3, 0xa9, 0x74, 0x61, 0x20, 0x76, 0x20, 0x70, 0x6f, 0x72, 0x61, 0x64, 0xc3, 0xad, 0x20, 0x6f, 0x64, 0x20, 0x53, 0x6c, 0x6e, 0x6b, 0x61, 0x2c, 0x20, 0x6e, 0x61, 0x6a, 0x76, 0xc3, 0xa4, 0xc4, 0x8d, 0xc5, 0xa1, 0x69, 0x61, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6a, 0x68, 0x6d, 0x6f, 0x74, 0x6e, 0x65, 0x6a, 0xc5, 0xa1, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xc3, 0xa9, 0x74, 0x61, 0x0a, 0x6e, 0x61, 0xc5, 0xa1, 0x65, 0x6a, 0x20, 0x73, 0x6c, 0x6e, 0x65, 0xc4, 0x8d, 0x6e, 0x65, 0x6a, 0x20, 0x73, 0xc3, 0xba, 0x73, 0x74, 0x61, 0x76, 0x79, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x70, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x6e, 0xc3, 0xbd, 0x20, 0x70, 0x6f, 0x20, 0x72, 0xc3, 0xad, 0x6d, 0x73, 0x6b, 0x6f, 0x6d, 0x20, 0x62, 0x6f, 0x68, 0x6f, 0x76, 0x69, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x69, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x6d, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0xc3, 0xa9, 0x74, 0x79, 0x20, 0x6a, 0x65, 0x20, 0xc5, 0xa1, 0x74, 0x79, 0x6c, 0x69, 0x7a, 0x6f, 0x76, 0x61, 0x6e, 0xc3, 0xa9, 0x20, 0x7a, 0x6e, 0xc3, 0xa1, 0x7a, 0x6f, 0x72, 0x6e, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x68, 0x6f, 0x20, 0x62, 0x6f, 0xc5, 0xbe, 0x73, 0x6b, 0xc3, 0xa9, 0x68, 0x6f, 0x20, 0x62, 0x6c, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSkUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('sk'));
    });

    test('detect sk windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kSkWindows1250 = Uint8List.fromList([0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x69, 0x61, 0x74, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x61, 0x20, 0x76, 0x20, 0x70, 0x6f, 0x72, 0x61, 0x64, 0xed, 0x20, 0x6f, 0x64, 0x20, 0x53, 0x6c, 0x6e, 0x6b, 0x61, 0x2c, 0x20, 0x6e, 0x61, 0x6a, 0x76, 0xe4, 0xe8, 0x9a, 0x69, 0x61, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6a, 0x68, 0x6d, 0x6f, 0x74, 0x6e, 0x65, 0x6a, 0x9a, 0x69, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x61, 0x0a, 0x6e, 0x61, 0x9a, 0x65, 0x6a, 0x20, 0x73, 0x6c, 0x6e, 0x65, 0xe8, 0x6e, 0x65, 0x6a, 0x20, 0x73, 0xfa, 0x73, 0x74, 0x61, 0x76, 0x79, 0x2e, 0x20, 0x4a, 0x65, 0x20, 0x70, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x6e, 0xfd, 0x20, 0x70, 0x6f, 0x20, 0x72, 0xed, 0x6d, 0x73, 0x6b, 0x6f, 0x6d, 0x20, 0x62, 0x6f, 0x68, 0x6f, 0x76, 0x69, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x69, 0x2e, 0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6f, 0x6d, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x79, 0x20, 0x6a, 0x65, 0x20, 0x9a, 0x74, 0x79, 0x6c, 0x69, 0x7a, 0x6f, 0x76, 0x61, 0x6e, 0xe9, 0x20, 0x7a, 0x6e, 0xe1, 0x7a, 0x6f, 0x72, 0x6e, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72, 0x6f, 0x76, 0x68, 0x6f, 0x20, 0x62, 0x6f, 0x9e, 0x73, 0x6b, 0xe9, 0x68, 0x6f, 0x20, 0x62, 0x6c, 0x65, 0x73, 0x6b, 0x75, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSkWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sk'));
    });

    test('detect sl ibm852', () {
      final detector = UCharDet();
      // dart format off
      final kSlIbm852 = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0xa1, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x82, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0xa7, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0xa7, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0xa7, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0x9f, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0x9f, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0xa7, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0xe6, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0x9f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0x9f, 0x6e, 0x61, 0x20, 0xa7, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0x9f, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlIbm852);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('ibm852'));
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sl iso-8859-16', () {
      final detector = UCharDet();
      // dart format off
      final kSlIso885916 = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0xed, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0xb8, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0xb8, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0xb8, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0xb9, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0xb9, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0xb8, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0xa6, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xb9, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xb9, 0x6e, 0x61, 0x20, 0xb8, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0xb9, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlIso885916);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-16'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sl iso-8859-2', () {
      final detector = UCharDet();
      // dart format off
      final kSlIso88592 = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0xed, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0xbe, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0xe8, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0xe8, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0xa9, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xe8, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xe8, 0x6e, 0x61, 0x20, 0xbe, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0xe8, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlIso88592);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-2'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sl mac-centraleurope', () {
      final detector = UCharDet();
      // dart format off
      final kSlMaccentraleurope = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x92, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x8e, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0xec, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0xec, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0xec, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0x8b, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0x8b, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0xec, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0xe1, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0x8b, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0x8b, 0x6e, 0x61, 0x20, 0xec, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0x8b, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlMaccentraleurope);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('mac-centraleurope'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sl utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kSlUtf8 = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0xc3, 0xad, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xc3, 0xa9, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0xc5, 0xbe, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0xc5, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0xc5, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0xc4, 0x8d, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0xc4, 0x8d, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0xc5, 0xbe, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0xc5, 0xa0, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xc4, 0x8d, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xc4, 0x8d, 0x6e, 0x61, 0x20, 0xc5, 0xbe, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0xc4, 0x8d, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sl windows-1250', () {
      final detector = UCharDet();
      // dart format off
      final kSlWindows1250 = Uint8List.fromList([0x4e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0xed, 0x76, 0x69, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe9, 0x74, 0x20, 0x6a, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x69, 0x20, 0x6e, 0x61, 0x72, 0x61, 0x76, 0x6e, 0x69, 0x20, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x28, 0x72, 0x65, 0x64, 0x6b, 0x65, 0x6a, 0x65, 0x20, 0x74, 0x75, 0x64, 0x69, 0x20, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x6a, 0x65, 0x0a, 0x7a, 0x6d, 0x6f, 0x9e, 0x65, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x6a, 0x61, 0x74, 0x69, 0x20, 0x9e, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x65, 0x2e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x20, 0x6a, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x74, 0x6f, 0x6a, 0x20, 0x6e, 0x65, 0x7a, 0x65, 0x6d, 0x65, 0x6c, 0x6a, 0x73, 0x6b, 0x65, 0x67, 0x61, 0x20, 0x9e, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x20, 0x74, 0x72, 0x65, 0x6e, 0x75, 0x74, 0x6e, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x6f, 0x76, 0x2c, 0x20, 0x6a, 0x65, 0x20, 0x72, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x0a, 0x6e, 0x61, 0x73, 0x65, 0x6c, 0x6a, 0x69, 0x76, 0x69, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x76, 0x20, 0x76, 0x20, 0x67, 0x6c, 0x61, 0x76, 0x6e, 0x65, 0x6d, 0x20, 0x65, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x63, 0x69, 0x6a, 0x61, 0x20, 0x72, 0x61, 0x7a, 0x6d, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x20, 0x5a, 0x65, 0x6d, 0x6c, 0x6a, 0x69, 0x20, 0x69, 0x6e, 0x20, 0x7a, 0x6e, 0x61, 0xe8, 0x69, 0x6c, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x0a, 0x53, 0x6f, 0x6e, 0x63, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x67, 0x61, 0x20, 0x4f, 0x73, 0x6f, 0x6e, 0xe8, 0x6a, 0x61, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x67, 0x6f, 0x76, 0x6f, 0x72, 0x69, 0x6a, 0x6f, 0x20, 0x76, 0x20, 0x70, 0x72, 0x69, 0x64, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x74, 0x6a, 0x75, 0x20, 0x9e, 0x69, 0x76, 0x6c, 0x6a, 0x65, 0x6e, 0x6a, 0x61, 0x2e, 0x20, 0x8a, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x65, 0x62, 0x65, 0x6a, 0x20, 0x73, 0x6f, 0x0a, 0x70, 0x6f, 0x6d, 0x65, 0x6d, 0x62, 0x6e, 0x69, 0x20, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x6a, 0x69, 0x2c, 0x20, 0x6b, 0x69, 0x20, 0x73, 0x6f, 0x20, 0x6f, 0x68, 0x72, 0x61, 0x6e, 0x69, 0x6c, 0x69, 0x20, 0x7a, 0x61, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x2c, 0x20, 0x6d, 0x6e, 0x6f, 0x67, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xe8, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6e, 0x65, 0x20, 0x6c, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x2c, 0x20, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x6c, 0x69, 0xe8, 0x6e, 0x61, 0x20, 0x9e, 0x69, 0x76, 0x61, 0x20, 0x62, 0x69, 0x74, 0x6a, 0x61, 0x2c, 0x20, 0x6d, 0x69, 0x6b, 0x72, 0x6f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x6d, 0x65, 0x2e, 0x20, 0x52, 0x61, 0x7a, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x61, 0x6e, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6f, 0x72, 0x69, 0x6a, 0x61, 0x20, 0x76, 0x20, 0x74, 0x65, 0x6a, 0x0a, 0x73, 0x6d, 0x65, 0x72, 0x69, 0x20, 0x6a, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x7a, 0x76, 0x69, 0x6a, 0x61, 0x6a, 0x6f, 0xe8, 0x65, 0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x6a, 0x65, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSlWindows1250);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1250'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sl'));
    });

    test('detect sr iso-8859-5', () {
      final detector = UCharDet();
      // dart format off
      final kSrIso88595 = Uint8List.fromList([0xbc, 0xe0, 0xdc, 0xde, 0xe2, 0x20, 0xf8, 0xd5, 0x20, 0xd4, 0xe3, 0xd3, 0xd0, 0xe7, 0xd0, 0xda, 0x20, 0xde, 0xe2, 0xdf, 0xe0, 0xd8, 0xdb, 0xd8, 0xda, 0xd5, 0x20, 0xdf, 0xd5, 0xd4, 0xd5, 0xe1, 0xd5, 0xe2, 0x20, 0xe1, 0xd0, 0xdd, 0xe2, 0xd8, 0xdc, 0xd5, 0xe2, 0xd0, 0xe0, 0xd0, 0x2c, 0x20, 0xd7, 0xd0, 0xf8, 0xd5, 0xd4, 0xdd, 0xde, 0x20, 0xe1, 0x20, 0xe0, 0xd5, 0xdf, 0xde, 0xdc, 0x20, 0xda, 0xde, 0xf8, 0xd8, 0x20, 0xe1, 0xd0, 0xdc, 0x20, 0xd8, 0xd7, 0xdd, 0xde, 0xe1, 0xd8, 0x20, 0xd4, 0xd2, 0xd0, 0xd4, 0xd5, 0xe1, 0xd5, 0xe2, 0x20, 0xe1, 0xd0, 0xdd, 0xe2, 0xd8, 0xdc, 0xd5, 0xe2, 0xd0, 0xe0, 0xd0, 0x2e, 0x20, 0xc2, 0xd5, 0xd6, 0xd0, 0xda, 0x20, 0xf8, 0xd5, 0x20, 0xe7, 0xd5, 0xe2, 0xd8, 0xe0, 0xd8, 0x20, 0xd4, 0xde, 0x20, 0xdf, 0xd5, 0xe2, 0x20, 0xda, 0xd8, 0xdb, 0xde, 0xd3, 0xe0, 0xd0, 0xdc, 0xd0, 0x2c, 0x20, 0xe0, 0xd5, 0xe2, 0xda, 0xde, 0x20, 0xd2, 0xd8, 0xe8, 0xd5, 0x2e, 0x20, 0xb8, 0xdc, 0xd0, 0x20, 0xdf, 0xe0, 0xd5, 0xda, 0xe0, 0xd0, 0xe1, 0xdd, 0xde, 0x20, 0xda, 0xe0, 0xd7, 0xdd, 0xde, 0x20, 0xe1, 0xd8, 0xd2, 0xda, 0xd0, 0xe1, 0xe2, 0xd5, 0x20, 0xd1, 0xde, 0xf8, 0xd5, 0x2c, 0x20, 0xda, 0xde, 0xf8, 0xd5, 0x20, 0xdd, 0xd0, 0x20, 0xe1, 0xd2, 0xd5, 0xe2, 0xdb, 0xde, 0xe1, 0xe2, 0xd8, 0x20, 0xd4, 0xde, 0xd1, 0xd8, 0xf8, 0xd0, 0x20, 0xd7, 0xdb, 0xd0, 0xe2, 0xdd, 0xde, 0xe1, 0xdc, 0xd5, 0xf2, 0xd5, 0x20, 0xdf, 0xe0, 0xd5, 0xdb, 0xd8, 0xd2, 0xd5, 0x2e, 0x20, 0xba, 0xd0, 0xde, 0x20, 0xdc, 0xd8, 0xe8, 0xd5, 0xd2, 0xd8, 0x2c, 0x20, 0xd7, 0xd5, 0xe7, 0xd5, 0xd2, 0xd8, 0x20, 0xd8, 0x20, 0xde, 0xe1, 0xe2, 0xd0, 0xdb, 0xd8, 0x20, 0xd3, 0xdb, 0xde, 0xd4, 0xd0, 0xe0, 0xd8, 0x2c, 0x20, 0xdc, 0xe0, 0xdc, 0xde, 0xe2, 0x20, 0xd8, 0xdc, 0xd0, 0x20, 0xe1, 0xd5, 0xda, 0xe3, 0xe2, 0xd8, 0xfb, 0xd5, 0x20, 0xda, 0xde, 0xf8, 0xd8, 0x20, 0xdd, 0xd5, 0xdf, 0xe0, 0xd5, 0xe1, 0xe2, 0xd0, 0xdd, 0xde, 0x20, 0xe0, 0xd0, 0xe1, 0xe2, 0xe3, 0x20, 0xdf, 0xd0, 0x20, 0xdc, 0xde, 0xe0, 0xd0, 0x20, 0xe7, 0xd5, 0xe1, 0xe2, 0xde, 0x20, 0xdd, 0xd5, 0xe8, 0xe2, 0xde, 0x20, 0xd4, 0xd0, 0x20, 0xd3, 0xdb, 0xde, 0xf2, 0xd5, 0x20, 0xd4, 0xd0, 0x20, 0xd1, 0xd8, 0x20, 0xd8, 0xe5, 0x20, 0xe2, 0xe0, 0xde, 0xe8, 0xd8, 0xde, 0x2e, 0x20, 0xbd, 0xd0, 0x20, 0xdf, 0xe0, 0xd5, 0xd4, 0xfa, 0xd8, 0xdc, 0x20, 0xdd, 0xde, 0xd3, 0xd0, 0xdc, 0xd0, 0x20, 0xd8, 0xdc, 0xd0, 0x20, 0xe7, 0xd5, 0xe2, 0xd8, 0xe0, 0xd8, 0x20, 0xdf, 0xe0, 0xe1, 0xe2, 0xd0, 0x20, 0xdd, 0xd0, 0xde, 0xe0, 0xe3, 0xd6, 0xd0, 0xdd, 0xd0, 0x20, 0xdf, 0xde, 0xd2, 0xd8, 0xf8, 0xd5, 0xdd, 0xd8, 0xdc, 0x20, 0xda, 0xd0, 0xdd, 0xff, 0xd0, 0xdc, 0xd0, 0x20, 0xdf, 0xde, 0xdc, 0xde, 0xfb, 0xe3, 0x20, 0xda, 0xde, 0xf8, 0xd8, 0xe5, 0x20, 0xd6, 0xd8, 0xd2, 0xde, 0xe2, 0xd8, 0xfa, 0xd0, 0x20, 0xe3, 0xd7, 0xd8, 0xdc, 0xd0, 0x20, 0xe2, 0xe0, 0xd0, 0xd2, 0xe3, 0x20, 0xd8, 0x20, 0xd3, 0xe0, 0xd0, 0xdd, 0xe7, 0xd8, 0xe6, 0xd5, 0x2c, 0x20, 0xdf, 0xe0, 0xd8, 0xdd, 0xde, 0xe1, 0xd8, 0x20, 0xe5, 0xe0, 0xd0, 0xdd, 0xe3, 0x20, 0xe3, 0xe1, 0xe2, 0xd8, 0xdc, 0xd0, 0x20, 0xd8, 0x20, 0xda, 0xde, 0xdf, 0xd0, 0x20, 0xd7, 0xd5, 0xdc, 0xf9, 0xe3, 0x2e, 0x20, 0xbd, 0xd0, 0x20, 0xd7, 0xd0, 0xd4, 0xfa, 0xd8, 0xdc, 0x20, 0xdd, 0xde, 0xd3, 0xd0, 0xdc, 0xd0, 0x20, 0xd8, 0xdc, 0xd0, 0x20, 0xdf, 0xd5, 0xe2, 0x20, 0xdf, 0xe0, 0xe1, 0xe2, 0xd8, 0xf8, 0xe3, 0x20, 0xe1, 0x20, 0xdf, 0xe0, 0xd8, 0xdb, 0xd8, 0xe7, 0xdd, 0xde, 0x20, 0xda, 0xe0, 0xd0, 0xe2, 0xda, 0xd8, 0xdc, 0x20, 0xda, 0xd0, 0xdd, 0xff, 0xd0, 0xdc, 0xd0, 0x2e, 0x20, 0xbc, 0xe0, 0xdc, 0xde, 0xe2, 0x20, 0xd8, 0xdc, 0xd0, 0x20, 0xd2, 0xd5, 0xde, 0xdc, 0xd0, 0x20, 0xde, 0xe8, 0xe2, 0xd0, 0xe0, 0x20, 0xd2, 0xd8, 0xd4, 0x2c, 0x20, 0xd0, 0x20, 0xe3, 0xe8, 0xd8, 0x20, 0xdc, 0xe3, 0x20, 0xe5, 0xd2, 0xd0, 0xe2, 0xd0, 0xf8, 0xe3, 0x20, 0xe1, 0xd2, 0xd0, 0xda, 0xd8, 0x20, 0xd8, 0x20, 0xdd, 0xd0, 0xf8, 0xe1, 0xdb, 0xd0, 0xd1, 0xd8, 0xf8, 0xd8, 0x20, 0xd7, 0xd2, 0xe3, 0xda, 0x2e, 0x5b, 0x32, 0x5d, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSrIso88595);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-5'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sr'));
    });

    test('detect sr utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kSrUtf8 = Uint8List.fromList([0xd0, 0x9c, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd1, 0x98, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xba, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x98, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0x20, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb0, 0xd0, 0xba, 0x20, 0xd1, 0x98, 0xd0, 0xb5, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0x2c, 0x20, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x88, 0xd0, 0xb5, 0x2e, 0x20, 0xd0, 0x98, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x92, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xb5, 0x2e, 0x20, 0xd0, 0x9a, 0xd0, 0xb0, 0xd0, 0xbe, 0x20, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xb7, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xbc, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x9b, 0xd0, 0xb5, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x83, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x88, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xb3, 0xd0, 0xbb, 0xd0, 0xbe, 0xd1, 0x92, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xb1, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xbe, 0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x9a, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x9f, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x9b, 0xd1, 0x83, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x98, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x9a, 0xd0, 0xb0, 0x20, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x83, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb5, 0x2c, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x83, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x99, 0xd1, 0x83, 0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x9a, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x98, 0xd1, 0x83, 0x20, 0xd1, 0x81, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x9f, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x9c, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x80, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0x2c, 0x20, 0xd0, 0xb0, 0x20, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xb8, 0x20, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd1, 0x85, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x98, 0xd1, 0x83, 0x20, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x98, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb8, 0xd1, 0x98, 0xd0, 0xb8, 0x20, 0xd0, 0xb7, 0xd0, 0xb2, 0xd1, 0x83, 0xd0, 0xba, 0x2e, 0x5b, 0x32, 0x5d, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSrUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('sr'));
    });

    test('detect sr windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kSrWindows1251 = Uint8List.fromList([0xcc, 0xf0, 0xec, 0xee, 0xf2, 0x20, 0xbc, 0xe5, 0x20, 0xe4, 0xf3, 0xe3, 0xe0, 0xf7, 0xe0, 0xea, 0x20, 0xee, 0xf2, 0xef, 0xf0, 0xe8, 0xeb, 0xe8, 0xea, 0xe5, 0x20, 0xef, 0xe5, 0xe4, 0xe5, 0xf1, 0xe5, 0xf2, 0x20, 0xf1, 0xe0, 0xed, 0xf2, 0xe8, 0xec, 0xe5, 0xf2, 0xe0, 0xf0, 0xe0, 0x2c, 0x20, 0xe7, 0xe0, 0xbc, 0xe5, 0xe4, 0xed, 0xee, 0x20, 0xf1, 0x20, 0xf0, 0xe5, 0xef, 0xee, 0xec, 0x20, 0xea, 0xee, 0xbc, 0xe8, 0x20, 0xf1, 0xe0, 0xec, 0x20, 0xe8, 0xe7, 0xed, 0xee, 0xf1, 0xe8, 0x20, 0xe4, 0xe2, 0xe0, 0xe4, 0xe5, 0xf1, 0xe5, 0xf2, 0x20, 0xf1, 0xe0, 0xed, 0xf2, 0xe8, 0xec, 0xe5, 0xf2, 0xe0, 0xf0, 0xe0, 0x2e, 0x20, 0xd2, 0xe5, 0xe6, 0xe0, 0xea, 0x20, 0xbc, 0xe5, 0x20, 0xf7, 0xe5, 0xf2, 0xe8, 0xf0, 0xe8, 0x20, 0xe4, 0xee, 0x20, 0xef, 0xe5, 0xf2, 0x20, 0xea, 0xe8, 0xeb, 0xee, 0xe3, 0xf0, 0xe0, 0xec, 0xe0, 0x2c, 0x20, 0xf0, 0xe5, 0xf2, 0xea, 0xee, 0x20, 0xe2, 0xe8, 0xf8, 0xe5, 0x2e, 0x20, 0xc8, 0xec, 0xe0, 0x20, 0xef, 0xf0, 0xe5, 0xea, 0xf0, 0xe0, 0xf1, 0xed, 0xee, 0x20, 0xea, 0xf0, 0xe7, 0xed, 0xee, 0x20, 0xf1, 0xe8, 0xe2, 0xea, 0xe0, 0xf1, 0xf2, 0xe5, 0x20, 0xe1, 0xee, 0xbc, 0xe5, 0x2c, 0x20, 0xea, 0xee, 0xbc, 0xe5, 0x20, 0xed, 0xe0, 0x20, 0xf1, 0xe2, 0xe5, 0xf2, 0xeb, 0xee, 0xf1, 0xf2, 0xe8, 0x20, 0xe4, 0xee, 0xe1, 0xe8, 0xbc, 0xe0, 0x20, 0xe7, 0xeb, 0xe0, 0xf2, 0xed, 0xee, 0xf1, 0xec, 0xe5, 0x90, 0xe5, 0x20, 0xef, 0xf0, 0xe5, 0xeb, 0xe8, 0xe2, 0xe5, 0x2e, 0x20, 0xca, 0xe0, 0xee, 0x20, 0xec, 0xe8, 0xf8, 0xe5, 0xe2, 0xe8, 0x2c, 0x20, 0xe7, 0xe5, 0xf7, 0xe5, 0xe2, 0xe8, 0x20, 0xe8, 0x20, 0xee, 0xf1, 0xf2, 0xe0, 0xeb, 0xe8, 0x20, 0xe3, 0xeb, 0xee, 0xe4, 0xe0, 0xf0, 0xe8, 0x2c, 0x20, 0xec, 0xf0, 0xec, 0xee, 0xf2, 0x20, 0xe8, 0xec, 0xe0, 0x20, 0xf1, 0xe5, 0xea, 0xf3, 0xf2, 0xe8, 0x9e, 0xe5, 0x20, 0xea, 0xee, 0xbc, 0xe8, 0x20, 0xed, 0xe5, 0xef, 0xf0, 0xe5, 0xf1, 0xf2, 0xe0, 0xed, 0xee, 0x20, 0xf0, 0xe0, 0xf1, 0xf2, 0xf3, 0x20, 0xef, 0xe0, 0x20, 0xec, 0xee, 0xf0, 0xe0, 0x20, 0xf7, 0xe5, 0xf1, 0xf2, 0xee, 0x20, 0xed, 0xe5, 0xf8, 0xf2, 0xee, 0x20, 0xe4, 0xe0, 0x20, 0xe3, 0xeb, 0xee, 0x90, 0xe5, 0x20, 0xe4, 0xe0, 0x20, 0xe1, 0xe8, 0x20, 0xe8, 0xf5, 0x20, 0xf2, 0xf0, 0xee, 0xf8, 0xe8, 0xee, 0x2e, 0x20, 0xcd, 0xe0, 0x20, 0xef, 0xf0, 0xe5, 0xe4, 0x9c, 0xe8, 0xec, 0x20, 0xed, 0xee, 0xe3, 0xe0, 0xec, 0xe0, 0x20, 0xe8, 0xec, 0xe0, 0x20, 0xf7, 0xe5, 0xf2, 0xe8, 0xf0, 0xe8, 0x20, 0xef, 0xf0, 0xf1, 0xf2, 0xe0, 0x20, 0xed, 0xe0, 0xee, 0xf0, 0xf3, 0xe6, 0xe0, 0xed, 0xe0, 0x20, 0xef, 0xee, 0xe2, 0xe8, 0xbc, 0xe5, 0xed, 0xe8, 0xec, 0x20, 0xea, 0xe0, 0xed, 0x9f, 0xe0, 0xec, 0xe0, 0x20, 0xef, 0xee, 0xec, 0xee, 0x9e, 0xf3, 0x20, 0xea, 0xee, 0xbc, 0xe8, 0xf5, 0x20, 0xe6, 0xe8, 0xe2, 0xee, 0xf2, 0xe8, 0x9c, 0xe0, 0x20, 0xf3, 0xe7, 0xe8, 0xec, 0xe0, 0x20, 0xf2, 0xf0, 0xe0, 0xe2, 0xf3, 0x20, 0xe8, 0x20, 0xe3, 0xf0, 0xe0, 0xed, 0xf7, 0xe8, 0xf6, 0xe5, 0x2c, 0x20, 0xef, 0xf0, 0xe8, 0xed, 0xee, 0xf1, 0xe8, 0x20, 0xf5, 0xf0, 0xe0, 0xed, 0xf3, 0x20, 0xf3, 0xf1, 0xf2, 0xe8, 0xec, 0xe0, 0x20, 0xe8, 0x20, 0xea, 0xee, 0xef, 0xe0, 0x20, 0xe7, 0xe5, 0xec, 0x9a, 0xf3, 0x2e, 0x20, 0xcd, 0xe0, 0x20, 0xe7, 0xe0, 0xe4, 0x9c, 0xe8, 0xec, 0x20, 0xed, 0xee, 0xe3, 0xe0, 0xec, 0xe0, 0x20, 0xe8, 0xec, 0xe0, 0x20, 0xef, 0xe5, 0xf2, 0x20, 0xef, 0xf0, 0xf1, 0xf2, 0xe8, 0xbc, 0xf3, 0x20, 0xf1, 0x20, 0xef, 0xf0, 0xe8, 0xeb, 0xe8, 0xf7, 0xed, 0xee, 0x20, 0xea, 0xf0, 0xe0, 0xf2, 0xea, 0xe8, 0xec, 0x20, 0xea, 0xe0, 0xed, 0x9f, 0xe0, 0xec, 0xe0, 0x2e, 0x20, 0xcc, 0xf0, 0xec, 0xee, 0xf2, 0x20, 0xe8, 0xec, 0xe0, 0x20, 0xe2, 0xe5, 0xee, 0xec, 0xe0, 0x20, 0xee, 0xf8, 0xf2, 0xe0, 0xf0, 0x20, 0xe2, 0xe8, 0xe4, 0x2c, 0x20, 0xe0, 0x20, 0xf3, 0xf8, 0xe8, 0x20, 0xec, 0xf3, 0x20, 0xf5, 0xe2, 0xe0, 0xf2, 0xe0, 0xbc, 0xf3, 0x20, 0xf1, 0xe2, 0xe0, 0xea, 0xe8, 0x20, 0xe8, 0x20, 0xed, 0xe0, 0xbc, 0xf1, 0xeb, 0xe0, 0xe1, 0xe8, 0xbc, 0xe8, 0x20, 0xe7, 0xe2, 0xf3, 0xea, 0x2e, 0x5b, 0x32, 0x5d, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSrWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sr'));
    });

    test('detect sv iso-8859-1', () {
      final detector = UCharDet();
      // dart format off
      final kSvIso88591 = Uint8List.fromList([0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x20, 0xe4, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x74, 0xe4, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x70, 0xe5, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x68, 0x61, 0x6c, 0x76, 0xf6, 0x6e, 0x20, 0x69, 0x20, 0x42, 0x72, 0x75, 0x6e, 0x6e, 0x62, 0x79, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x48, 0xf6, 0x67, 0x61, 0x6e, 0xe4, 0x73, 0x20, 0x6b, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x2c, 0x20, 0x53, 0x6b, 0xe5, 0x6e, 0x65, 0x20, 0x6c, 0xe4, 0x6e, 0x2e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x68, 0xe4, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x76, 0x61, 0x72, 0x20, 0x66, 0x72, 0xe5, 0x6e, 0x20, 0x62, 0xf6, 0x72, 0x6a, 0x61, 0x6e, 0x20, 0x65, 0x74, 0x74, 0x20, 0x66, 0x69, 0x73, 0x6b, 0x65, 0x6c, 0xe4, 0x67, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6b, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x69, 0x20, 0x64, 0x65, 0x6e, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x76, 0xe4, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x53, 0x76, 0x65, 0x72, 0x69, 0x67, 0x65, 0x20, 0x69, 0x20, 0x73, 0x6c, 0x75, 0x74, 0x65, 0x74, 0x20, 0x61, 0x76, 0x20, 0x31, 0x38, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x54, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x74, 0x61, 0x20, 0x62, 0x69, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x2d, 0x20, 0x6f, 0x63, 0x68, 0x0a, 0x62, 0x69, 0x64, 0x72, 0x61, 0x72, 0x20, 0x2d, 0x20, 0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x73, 0x6b, 0xf6, 0x6e, 0x61, 0x20, 0x6c, 0xe4, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x64, 0x20, 0xd6, 0x72, 0x65, 0x73, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x6e, 0x6f, 0x72, 0x72, 0x61, 0x20, 0x75, 0x74, 0x6c, 0x6f, 0x70, 0x70, 0x2c, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x72, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x0a, 0x62, 0x61, 0x6b, 0x67, 0x72, 0x75, 0x6e, 0x64, 0x2e, 0x20, 0x47, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x68, 0x65, 0x74, 0x73, 0x62, 0x61, 0x64, 0x20, 0x66, 0xf6, 0x72, 0x20, 0x6d, 0xe4, 0x6e, 0x20, 0x6f, 0x63, 0x68, 0x20, 0x6b, 0x76, 0x69, 0x6e, 0x6e, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x69, 0x20, 0x52, 0x61, 0x6e, 0x73, 0x76, 0x69, 0x6b, 0x20, 0x69, 0x20, 0x62, 0xf6, 0x72, 0x6a, 0x61, 0x6e, 0x0a, 0x61, 0x76, 0x20, 0x31, 0x39, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x68, 0x65, 0x74, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x72, 0xe4, 0x66, 0x66, 0x61, 0x64, 0x65, 0x20, 0x73, 0x74, 0x72, 0x61, 0x78, 0x20, 0x66, 0xf6, 0x72, 0x65, 0x20, 0x66, 0xf6, 0x72, 0x73, 0x74, 0x61, 0x0a, 0x76, 0xe4, 0x72, 0x6c, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0xe4, 0x76, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x6b, 0x72, 0x69, 0x67, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x73, 0x74, 0x72, 0xf6, 0x6d, 0x6d, 0x61, 0x72, 0x6e, 0x61, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x2e, 0x0a, 0x46, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x20, 0xe4, 0x72, 0x20, 0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0xe4, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x20, 0x74, 0x72, 0x65, 0x64, 0x75, 0x62, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x20, 0x69, 0x6e, 0x76, 0xe5, 0x6e, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6d, 0xe5, 0x6e, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSvIso88591);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-1'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sv'));
    });

    test('detect sv utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kSvUtf8 = Uint8List.fromList([0x4d, 0xc3, 0xb6, 0x6c, 0x6c, 0x65, 0x20, 0xc3, 0xa4, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x74, 0xc3, 0xa4, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x70, 0xc3, 0xa5, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x68, 0x61, 0x6c, 0x76, 0xc3, 0xb6, 0x6e, 0x20, 0x69, 0x20, 0x42, 0x72, 0x75, 0x6e, 0x6e, 0x62, 0x79, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x48, 0xc3, 0xb6, 0x67, 0x61, 0x6e, 0xc3, 0xa4, 0x73, 0x20, 0x6b, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x2c, 0x20, 0x53, 0x6b, 0xc3, 0xa5, 0x6e, 0x65, 0x20, 0x6c, 0xc3, 0xa4, 0x6e, 0x2e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x68, 0xc3, 0xa4, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x76, 0x61, 0x72, 0x20, 0x66, 0x72, 0xc3, 0xa5, 0x6e, 0x20, 0x62, 0xc3, 0xb6, 0x72, 0x6a, 0x61, 0x6e, 0x20, 0x65, 0x74, 0x74, 0x20, 0x66, 0x69, 0x73, 0x6b, 0x65, 0x6c, 0xc3, 0xa4, 0x67, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6b, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x69, 0x20, 0x64, 0x65, 0x6e, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x76, 0xc3, 0xa4, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x53, 0x76, 0x65, 0x72, 0x69, 0x67, 0x65, 0x20, 0x69, 0x20, 0x73, 0x6c, 0x75, 0x74, 0x65, 0x74, 0x20, 0x61, 0x76, 0x20, 0x31, 0x38, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x54, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x74, 0x61, 0x20, 0x62, 0x69, 0x64, 0x72, 0x6f, 0x67, 0x20, 0xe2, 0x80, 0x93, 0x20, 0x6f, 0x63, 0x68, 0x0a, 0x62, 0x69, 0x64, 0x72, 0x61, 0x72, 0x20, 0xe2, 0x80, 0x93, 0x20, 0x4d, 0xc3, 0xb6, 0x6c, 0x6c, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x73, 0x6b, 0xc3, 0xb6, 0x6e, 0x61, 0x20, 0x6c, 0xc3, 0xa4, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x64, 0x20, 0xc3, 0x96, 0x72, 0x65, 0x73, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x6e, 0x6f, 0x72, 0x72, 0x61, 0x20, 0x75, 0x74, 0x6c, 0x6f, 0x70, 0x70, 0x2c, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x72, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x0a, 0x62, 0x61, 0x6b, 0x67, 0x72, 0x75, 0x6e, 0x64, 0x2e, 0x20, 0x47, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x68, 0x65, 0x74, 0x73, 0x62, 0x61, 0x64, 0x20, 0x66, 0xc3, 0xb6, 0x72, 0x20, 0x6d, 0xc3, 0xa4, 0x6e, 0x20, 0x6f, 0x63, 0x68, 0x20, 0x6b, 0x76, 0x69, 0x6e, 0x6e, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x69, 0x20, 0x52, 0x61, 0x6e, 0x73, 0x76, 0x69, 0x6b, 0x20, 0x69, 0x20, 0x62, 0xc3, 0xb6, 0x72, 0x6a, 0x61, 0x6e, 0x0a, 0x61, 0x76, 0x20, 0x31, 0x39, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x68, 0x65, 0x74, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x72, 0xc3, 0xa4, 0x66, 0x66, 0x61, 0x64, 0x65, 0x20, 0x73, 0x74, 0x72, 0x61, 0x78, 0x20, 0x66, 0xc3, 0xb6, 0x72, 0x65, 0x20, 0x66, 0xc3, 0xb6, 0x72, 0x73, 0x74, 0x61, 0x0a, 0x76, 0xc3, 0xa4, 0x72, 0x6c, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0xc3, 0xa4, 0x76, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x6b, 0x72, 0x69, 0x67, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x73, 0x74, 0x72, 0xc3, 0xb6, 0x6d, 0x6d, 0x61, 0x72, 0x6e, 0x61, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x2e, 0x0a, 0x46, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x20, 0xc3, 0xa4, 0x72, 0x20, 0x4d, 0xc3, 0xb6, 0x6c, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0xc3, 0xa4, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x20, 0x74, 0x72, 0x65, 0x64, 0x75, 0x62, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x20, 0x69, 0x6e, 0x76, 0xc3, 0xa5, 0x6e, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6d, 0xc3, 0xa5, 0x6e, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSvUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('sv'));
    });

    test('detect sv windows-1252', () {
      final detector = UCharDet();
      // dart format off
      final kSvWindows1252 = Uint8List.fromList([0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x20, 0xe4, 0x72, 0x20, 0x65, 0x6e, 0x20, 0x74, 0xe4, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x70, 0xe5, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x68, 0x61, 0x6c, 0x76, 0xf6, 0x6e, 0x20, 0x69, 0x20, 0x42, 0x72, 0x75, 0x6e, 0x6e, 0x62, 0x79, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x48, 0xf6, 0x67, 0x61, 0x6e, 0xe4, 0x73, 0x20, 0x6b, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x2c, 0x20, 0x53, 0x6b, 0xe5, 0x6e, 0x65, 0x20, 0x6c, 0xe4, 0x6e, 0x2e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x68, 0xe4, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x76, 0x61, 0x72, 0x20, 0x66, 0x72, 0xe5, 0x6e, 0x20, 0x62, 0xf6, 0x72, 0x6a, 0x61, 0x6e, 0x20, 0x65, 0x74, 0x74, 0x20, 0x66, 0x69, 0x73, 0x6b, 0x65, 0x6c, 0xe4, 0x67, 0x65, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0x6b, 0x6f, 0x6d, 0x20, 0x61, 0x74, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x69, 0x20, 0x64, 0x65, 0x6e, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x76, 0xe4, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x6e, 0x20, 0x69, 0x20, 0x53, 0x76, 0x65, 0x72, 0x69, 0x67, 0x65, 0x20, 0x69, 0x20, 0x73, 0x6c, 0x75, 0x74, 0x65, 0x74, 0x20, 0x61, 0x76, 0x20, 0x31, 0x38, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x54, 0x69, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x74, 0x74, 0x61, 0x20, 0x62, 0x69, 0x64, 0x72, 0x6f, 0x67, 0x20, 0x96, 0x20, 0x6f, 0x63, 0x68, 0x0a, 0x62, 0x69, 0x64, 0x72, 0x61, 0x72, 0x20, 0x96, 0x20, 0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x73, 0x6b, 0xf6, 0x6e, 0x61, 0x20, 0x6c, 0xe4, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x64, 0x20, 0xd6, 0x72, 0x65, 0x73, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x6e, 0x6f, 0x72, 0x72, 0x61, 0x20, 0x75, 0x74, 0x6c, 0x6f, 0x70, 0x70, 0x2c, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x4b, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x72, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x0a, 0x62, 0x61, 0x6b, 0x67, 0x72, 0x75, 0x6e, 0x64, 0x2e, 0x20, 0x47, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x68, 0x65, 0x74, 0x73, 0x62, 0x61, 0x64, 0x20, 0x66, 0xf6, 0x72, 0x20, 0x6d, 0xe4, 0x6e, 0x20, 0x6f, 0x63, 0x68, 0x20, 0x6b, 0x76, 0x69, 0x6e, 0x6e, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x69, 0x20, 0x52, 0x61, 0x6e, 0x73, 0x76, 0x69, 0x6b, 0x20, 0x69, 0x20, 0x62, 0xf6, 0x72, 0x6a, 0x61, 0x6e, 0x0a, 0x61, 0x76, 0x20, 0x31, 0x39, 0x30, 0x30, 0x2d, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x2e, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x68, 0x65, 0x74, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x72, 0xe4, 0x66, 0x66, 0x61, 0x64, 0x65, 0x20, 0x73, 0x74, 0x72, 0x61, 0x78, 0x20, 0x66, 0xf6, 0x72, 0x65, 0x20, 0x66, 0xf6, 0x72, 0x73, 0x74, 0x61, 0x0a, 0x76, 0xe4, 0x72, 0x6c, 0x64, 0x73, 0x6b, 0x72, 0x69, 0x67, 0x65, 0x74, 0x2c, 0x20, 0x6d, 0x65, 0x6e, 0x20, 0xe4, 0x76, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x6b, 0x72, 0x69, 0x67, 0x73, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x73, 0x74, 0x72, 0xf6, 0x6d, 0x6d, 0x61, 0x72, 0x6e, 0x61, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x2e, 0x0a, 0x46, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x20, 0xe4, 0x72, 0x20, 0x4d, 0xf6, 0x6c, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0xe4, 0x72, 0x20, 0x74, 0x75, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x20, 0x74, 0x72, 0x65, 0x64, 0x75, 0x62, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x20, 0x69, 0x6e, 0x76, 0xe5, 0x6e, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x74, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6d, 0xe5, 0x6e, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kSvWindows1252);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1252'),
      );
      expect(candidates.first.language?.iso6391Code, equals('sv'));
    });

    test('detect th iso-8859-11', () {
      final detector = UCharDet();
      // dart format off
      final kThIso885911 = Uint8List.fromList([0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x0a, 0x0a, 0xa0, 0xc1, 0xd2, 0xb5, 0xc3, 0xb0, 0xd2, 0xb9, 0xbc, 0xc5, 0xd4, 0xb5, 0xc0, 0xd1, 0xb3, 0xb1, 0xec, 0xcd, 0xd8, 0xb5, 0xca, 0xd2, 0xcb, 0xa1, 0xc3, 0xc3, 0xc1, 0x20, 0x36, 0x32, 0x30, 0x2d, 0x32, 0x35, 0x33, 0x33, 0x2c, 0x20, 0xc1, 0xcd, 0xa1, 0x2e, 0x36, 0x32, 0x30, 0x2d, 0x32, 0x35, 0x33, 0x33, 0x2c, 0x20, 0xcb, 0xc3, 0xd7, 0xcd, 0xb7, 0xd5, 0xe8, 0xc3, 0xd9, 0xe9, 0xa8, 0xd1, 0xa1, 0xa1, 0xd1, 0xb9, 0xb7, 0xd1, 0xe8, 0xc7, 0xe4, 0xbb, 0xc7, 0xe8, 0xd2, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xe0, 0xbb, 0xe7, 0xb9, 0xaa, 0xd8, 0xb4, 0xcd, 0xd1, 0xa1, 0xa2, 0xc3, 0xd0, 0xc1, 0xd2, 0xb5, 0xc3, 0xb0, 0xd2, 0xb9, 0xcd, 0xd8, 0xb5, 0xca, 0xd2, 0xcb, 0xa1, 0xc3, 0xc3, 0xc1, 0xa2, 0xcd, 0xa7, 0xe4, 0xb7, 0xc2, 0x20, 0xc1, 0xd5, 0xaa, 0xd7, 0xe8, 0xcd, 0xe0, 0xb5, 0xe7, 0xc1, 0xc7, 0xe8, 0xd2, 0x20, 0xc3, 0xcb, 0xd1, 0xca, 0xca, 0xd3, 0xcb, 0xc3, 0xd1, 0xba, 0xcd, 0xd1, 0xa1, 0xa2, 0xc3, 0xd0, 0xe4, 0xb7, 0xc2, 0xb7, 0xd5, 0xe8, 0xe3, 0xaa, 0xe9, 0xa1, 0xd1, 0xba, 0xa4, 0xcd, 0xc1, 0xbe, 0xd4, 0xc7, 0xe0, 0xb5, 0xcd, 0xc3, 0xec, 0x0a, 0x0a, 0xc3, 0xcb, 0xd1, 0xca, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xc1, 0xd5, 0xc3, 0xd2, 0xc2, 0xc5, 0xd0, 0xe0, 0xcd, 0xd5, 0xc2, 0xb4, 0xa4, 0xc5, 0xe9, 0xd2, 0xc2, 0xc3, 0xcb, 0xd1, 0xca, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x31, 0x20, 0xc1, 0xd2, 0xa1, 0x20, 0xe1, 0xb5, 0xa1, 0xb5, 0xe8, 0xd2, 0xa7, 0xa1, 0xd1, 0xb9, 0xe1, 0xa4, 0xe8, 0xe0, 0xbe, 0xd5, 0xc2, 0xa7, 0xb7, 0xd5, 0xe8, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x31, 0x20, 0xa1, 0xd3, 0xcb, 0xb9, 0xb4, 0xe3, 0xcb, 0xe9, 0x20, 0x41, 0x30, 0x20, 0xe0, 0xbb, 0xe7, 0xb9, 0x20, 0x22, 0xe0, 0xc7, 0xe9, 0xb9, 0xc7, 0xc3, 0xc3, 0xa4, 0xe1, 0xba, 0xba, 0xe4, 0xc1, 0xe8, 0xb5, 0xd1, 0xb4, 0xa4, 0xd3, 0x22, 0x20, 0x28, 0x6e, 0x6f, 0x2d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x29, 0x20, 0xca, 0xe8, 0xc7, 0xb9, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xb9, 0xd1, 0xe9, 0xb9, 0xe1, 0xc1, 0xe9, 0xa8, 0xd0, 0xca, 0xa7, 0xc7, 0xb9, 0xb5, 0xd3, 0xe1, 0xcb, 0xb9, 0xe8, 0xa7, 0x20, 0x41, 0x30, 0x20, 0xe0, 0xcd, 0xd2, 0xe4, 0xc7, 0xe9, 0x20, 0xe1, 0xb5, 0xe8, 0xa1, 0xe7, 0xe4, 0xc1, 0xe8, 0xe4, 0xb4, 0xe9, 0xa1, 0xd3, 0xcb, 0xb9, 0xb4, 0xa4, 0xe8, 0xd2, 0xe3, 0xb4, 0x20, 0xe6, 0x20, 0xe3, 0xcb, 0xe9, 0x0a]);
      // dart format on
      final candidates = detector.detect(kThIso885911);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-11'),
      );
      expect(candidates.first.language?.iso6391Code, equals('th'));
    });

    test('detect th tis-620', () {
      final detector = UCharDet();
      // dart format off
      final kThTis620 = Uint8List.fromList([0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x0a, 0x0a, 0xc1, 0xd2, 0xb5, 0xc3, 0xb0, 0xd2, 0xb9, 0xbc, 0xc5, 0xd4, 0xb5, 0xc0, 0xd1, 0xb3, 0xb1, 0xec, 0xcd, 0xd8, 0xb5, 0xca, 0xd2, 0xcb, 0xa1, 0xc3, 0xc3, 0xc1, 0x20, 0x36, 0x32, 0x30, 0x2d, 0x32, 0x35, 0x33, 0x33, 0x2c, 0x20, 0xc1, 0xcd, 0xa1, 0x2e, 0x36, 0x32, 0x30, 0x2d, 0x32, 0x35, 0x33, 0x33, 0x2c, 0x20, 0xcb, 0xc3, 0xd7, 0xcd, 0xb7, 0xd5, 0xe8, 0xc3, 0xd9, 0xe9, 0xa8, 0xd1, 0xa1, 0xa1, 0xd1, 0xb9, 0xb7, 0xd1, 0xe8, 0xc7, 0xe4, 0xbb, 0xc7, 0xe8, 0xd2, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xe0, 0xbb, 0xe7, 0xb9, 0xaa, 0xd8, 0xb4, 0xcd, 0xd1, 0xa1, 0xa2, 0xc3, 0xd0, 0xc1, 0xd2, 0xb5, 0xc3, 0xb0, 0xd2, 0xb9, 0xcd, 0xd8, 0xb5, 0xca, 0xd2, 0xcb, 0xa1, 0xc3, 0xc3, 0xc1, 0xa2, 0xcd, 0xa7, 0xe4, 0xb7, 0xc2, 0x20, 0xc1, 0xd5, 0xaa, 0xd7, 0xe8, 0xcd, 0xe0, 0xb5, 0xe7, 0xc1, 0xc7, 0xe8, 0xd2, 0x20, 0xc3, 0xcb, 0xd1, 0xca, 0xca, 0xd3, 0xcb, 0xc3, 0xd1, 0xba, 0xcd, 0xd1, 0xa1, 0xa2, 0xc3, 0xd0, 0xe4, 0xb7, 0xc2, 0xb7, 0xd5, 0xe8, 0xe3, 0xaa, 0xe9, 0xa1, 0xd1, 0xba, 0xa4, 0xcd, 0xc1, 0xbe, 0xd4, 0xc7, 0xe0, 0xb5, 0xcd, 0xc3, 0xec, 0x0a, 0x0a, 0xc3, 0xcb, 0xd1, 0xca, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xc1, 0xd5, 0xc3, 0xd2, 0xc2, 0xc5, 0xd0, 0xe0, 0xcd, 0xd5, 0xc2, 0xb4, 0xa4, 0xc5, 0xe9, 0xd2, 0xc2, 0xc3, 0xcb, 0xd1, 0xca, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x31, 0x20, 0xc1, 0xd2, 0xa1, 0x20, 0xe1, 0xb5, 0xa1, 0xb5, 0xe8, 0xd2, 0xa7, 0xa1, 0xd1, 0xb9, 0xe1, 0xa4, 0xe8, 0xe0, 0xbe, 0xd5, 0xc2, 0xa7, 0xb7, 0xd5, 0xe8, 0x20, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x31, 0x20, 0xa1, 0xd3, 0xcb, 0xb9, 0xb4, 0xe3, 0xcb, 0xe9, 0x20, 0x41, 0x30, 0x20, 0xe0, 0xbb, 0xe7, 0xb9, 0x20, 0x22, 0xe0, 0xc7, 0xe9, 0xb9, 0xc7, 0xc3, 0xc3, 0xa4, 0xe1, 0xba, 0xba, 0xe4, 0xc1, 0xe8, 0xb5, 0xd1, 0xb4, 0xa4, 0xd3, 0x22, 0x20, 0x28, 0x6e, 0x6f, 0x2d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x29, 0x20, 0xca, 0xe8, 0xc7, 0xb9, 0x20, 0x54, 0x49, 0x53, 0x2d, 0x36, 0x32, 0x30, 0x20, 0xb9, 0xd1, 0xe9, 0xb9, 0xe1, 0xc1, 0xe9, 0xa8, 0xd0, 0xca, 0xa7, 0xc7, 0xb9, 0xb5, 0xd3, 0xe1, 0xcb, 0xb9, 0xe8, 0xa7, 0x20, 0x41, 0x30, 0x20, 0xe0, 0xcd, 0xd2, 0xe4, 0xc7, 0xe9, 0x20, 0xe1, 0xb5, 0xe8, 0xa1, 0xe7, 0xe4, 0xc1, 0xe8, 0xe4, 0xb4, 0xe9, 0xa1, 0xd3, 0xcb, 0xb9, 0xb4, 0xa4, 0xe8, 0xd2, 0xe3, 0xb4, 0x20, 0xe6, 0x20, 0xe3, 0xcb, 0xe9, 0x0a]);
      // dart format on
      final candidates = detector.detect(kThTis620);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('tis-620'));
      expect(candidates.first.language?.iso6391Code, equals('th'));
    });

    test('detect th utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kThUtf8 = Uint8List.fromList([0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xb9, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb4, 0xe0, 0xb9, 0x82, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0x94, 0x20, 0x28, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa4, 0xe0, 0xb8, 0xa9, 0x3a, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0xb7, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x90, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb8, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb5, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0x8a, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xa2, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0xab, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0x9e, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0xa7, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x8c, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x9c, 0xe0, 0xb8, 0xa5, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x88, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x82, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0x98, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb5, 0xe0, 0xb9, 0x88, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x8a, 0xe0, 0xb9, 0x89, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xa0, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xaa, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0x99, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0x8d, 0xe0, 0xb9, 0x88, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x99, 0xe0, 0xb9, 0x82, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0x81, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x94, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa2, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0xa5, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x99, 0x20, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xb9, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb4, 0xe0, 0xb9, 0x82, 0xe0, 0xb8, 0x84, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x9b, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0x94, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb5, 0xe0, 0xb9, 0x88, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x9c, 0xe0, 0xb8, 0xa5, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x94, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa7, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xb2, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0xa7, 0x20, 0xe0, 0xb8, 0x9e, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x92, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x95, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x88, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x90, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0x8a, 0xe0, 0xb8, 0xb8, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa5, 0x20, 0x28, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x53, 0x65, 0x74, 0x3a, 0x20, 0x55, 0x43, 0x53, 0x29, 0x20, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x9e, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0x9e, 0xe0, 0xb9, 0x8c, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0x87, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xb7, 0xe0, 0xb8, 0xad, 0x20, 0x54, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x9b, 0xe0, 0xb9, 0x87, 0xe0, 0xb8, 0x99, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0x9c, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0x9c, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0xaa, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x9e, 0xe0, 0xb8, 0xb7, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0xad, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x8a, 0xe0, 0xb9, 0x89, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x9b, 0xe0, 0xb9, 0x87, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xad, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0x87, 0x20, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x88, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb1, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x98, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0x98, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb5, 0xe0, 0xb9, 0x88, 0xe0, 0xb9, 0x83, 0xe0, 0xb8, 0x8a, 0xe0, 0xb9, 0x89, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x82, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0xaa, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb3, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xa1, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x95, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0x90, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x82, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x88, 0xe0, 0xb8, 0xb3, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xb6, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0x87, 0x20, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb3, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xa3, 0x20, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x8e, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x93, 0xe0, 0xb8, 0x91, 0xe0, 0xb9, 0x8c, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xa1, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0x20, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xa1, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x9b, 0xe0, 0xb8, 0x96, 0xe0, 0xb8, 0xb6, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0xb3, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa3, 0xe0, 0xb9, 0x81, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0x94, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x9c, 0xe0, 0xb8, 0xa5, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb0, 0xe0, 0xb8, 0xaa, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0x87, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb4, 0xe0, 0xb8, 0xa8, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x87, 0x20, 0x28, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x8a, 0xe0, 0xb9, 0x88, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0xab, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb7, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xad, 0xe0, 0xb8, 0xb1, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xae, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0x9a, 0xe0, 0xb8, 0xa3, 0xe0, 0xb8, 0xb9, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xb5, 0xe0, 0xb9, 0x88, 0xe0, 0xb9, 0x80, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xb5, 0xe0, 0xb8, 0xa2, 0xe0, 0xb8, 0x99, 0xe0, 0xb8, 0x88, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0x81, 0xe0, 0xb8, 0x82, 0xe0, 0xb8, 0xa7, 0xe0, 0xb8, 0xb2, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x9b, 0xe0, 0xb8, 0x8b, 0xe0, 0xb9, 0x89, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa2, 0x29, 0x0a]);
      // dart format on
      final candidates = detector.detect(kThUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('th'));
    });

    test('detect tr iso-8859-3', () {
      final detector = UCharDet();
      // dart format off
      final kTrIso88593 = Uint8List.fromList([0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x64, 0x69, 0x6c, 0x69, 0x20, 0x79, 0x61, 0x20, 0x64, 0x61, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x2c, 0x20, 0x62, 0x61, 0x74, 0xb9, 0x64, 0x61, 0x20, 0x42, 0x61, 0x6c, 0x6b, 0x61, 0x6e, 0x6c, 0x61, 0x72, 0x27, 0x64, 0x61, 0x6e, 0x20, 0x62, 0x61, 0xba, 0x6c, 0x61, 0x79, 0xb9, 0x70, 0x20, 0x64, 0x6f, 0xbb, 0x75, 0x64, 0x61, 0x0a, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x20, 0x44, 0x65, 0x6e, 0x69, 0x7a, 0x69, 0x20, 0x73, 0x61, 0x68, 0x61, 0x73, 0xb9, 0x6e, 0x61, 0x20, 0x6b, 0x61, 0x64, 0x61, 0x72, 0x20, 0x6b, 0x6f, 0x6e, 0x75, 0xba, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x41, 0x6c, 0x74, 0x61, 0x79, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x62, 0x69, 0x72, 0x69, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x59, 0x61, 0xba, 0xb9, 0x2c, 0x20, 0x65, 0x6e, 0x20, 0x65, 0x73, 0x6b, 0x69, 0x0a, 0x68, 0x65, 0x73, 0x61, 0x70, 0x6c, 0x61, 0x72, 0x61, 0x20, 0x67, 0xf6, 0x72, 0x65, 0x20, 0x38, 0x35, 0x30, 0x30, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x67, 0xfc, 0x6e, 0x20, 0x79, 0x61, 0xba, 0x61, 0x79, 0x61, 0x6e, 0x20, 0x44, 0xfc, 0x6e, 0x79, 0x61, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x20, 0x61, 0x72, 0x61, 0x73, 0xb9, 0x6e, 0x64, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x65, 0x73, 0x6b, 0x69, 0x0a, 0x79, 0x61, 0x7a, 0xb9, 0x6c, 0xb9, 0x20, 0x62, 0x65, 0x6c, 0x67, 0x65, 0x6c, 0x65, 0x72, 0x65, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x42, 0x75, 0x20, 0x62, 0x65, 0x6c, 0x67, 0x65, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0xe7, 0x69, 0x76, 0x69, 0x20, 0x79, 0x61, 0x7a, 0xb9, 0x6c, 0xb9, 0x20, 0x53, 0xfc, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6c, 0x65, 0x72, 0x64, 0x65, 0x6b, 0x69, 0x20, 0x61, 0x6c, 0xb9, 0x6e, 0x74, 0xb9, 0x20, 0x6b, 0x65, 0x6c, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x72, 0x64, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x32, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x79, 0x61, 0x7a, 0xb9, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x20, 0x69, 0xe7, 0x69, 0x6e, 0x64, 0x65, 0x20, 0x4f, 0xbb, 0x75, 0x7a, 0x20, 0x73, 0x61, 0x68, 0x61, 0x73, 0xb9, 0x20, 0x79, 0x61, 0x7a, 0xb9, 0x0a, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x4f, 0x73, 0x6d, 0x61, 0x6e, 0x6c, 0xb9, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x6e, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x61, 0x6d, 0xb9, 0x6e, 0xb9, 0x20, 0x6f, 0x6c, 0x75, 0xba, 0x74, 0x75, 0x72, 0x75, 0x72, 0x2e, 0x20, 0x42, 0x61, 0xba, 0x74, 0x61, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x6f, 0x6c, 0x6d, 0x61, 0x6b, 0x20, 0xfc, 0x7a, 0x65, 0x72, 0x65, 0x0a, 0x65, 0x73, 0x6b, 0x69, 0x20, 0x4f, 0x73, 0x6d, 0x61, 0x6e, 0x6c, 0xb9, 0x20, 0xa9, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x6c, 0x75, 0xbb, 0x75, 0x20, 0x63, 0x6f, 0xbb, 0x72, 0x61, 0x66, 0x79, 0x61, 0x73, 0xb9, 0x6e, 0x64, 0x61, 0x20, 0x6b, 0x6f, 0x6e, 0x75, 0xba, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x64, 0xfc, 0x6e, 0x79, 0x61, 0x64, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x61, 0x7a, 0x6c, 0x61, 0x0a, 0x6b, 0x6f, 0x6e, 0x75, 0xba, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x35, 0x2e, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x20, 0x73, 0x6f, 0x6e, 0x64, 0x61, 0x6e, 0x20, 0x65, 0x6b, 0x6c, 0x65, 0x6d, 0x65, 0x6c, 0x69, 0x20, 0x62, 0x69, 0x72, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x33, 0x5d, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x20, 0xf6, 0x74, 0xfc, 0x72, 0xfc, 0x0a, 0x6b, 0x75, 0x6c, 0x6c, 0x61, 0x6e, 0xb9, 0x6c, 0x61, 0x6e, 0x20, 0x68, 0x65, 0x72, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x20, 0x62, 0x69, 0x72, 0x20, 0x65, 0x79, 0x6c, 0x65, 0x6d, 0x20, 0xfc, 0x7a, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6c, 0x64, 0x69, 0xbb, 0x69, 0x20, 0x6b, 0x61, 0x64, 0x61, 0x72, 0x20, 0x73, 0xf6, 0x7a, 0x63, 0xfc, 0x6b, 0x0a, 0x74, 0xfc, 0x72, 0x65, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x69, 0x6c, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x34, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x20, 0x62, 0x75, 0x20, 0x79, 0xf6, 0x6e, 0xfc, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x64, 0x6f, 0x6c, 0x61, 0x79, 0xb9, 0x20, 0x64, 0x69, 0xbb, 0x65, 0x72, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x79, 0x6c, 0x65, 0x0a, 0x6f, 0x72, 0x74, 0x61, 0x6b, 0x20, 0x79, 0x61, 0x20, 0x64, 0x61, 0x20, 0x61, 0x79, 0x72, 0xb9, 0x6b, 0x20, 0x62, 0x75, 0x6c, 0x75, 0x6e, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x61, 0x72, 0x63, 0x61, 0x20, 0x65, 0x6b, 0x65, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x74, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x35, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x20, 0xe7, 0x6f, 0x6b, 0x20, 0x67, 0x65, 0x6e, 0x69, 0xba, 0x0a, 0x6b, 0x75, 0x6c, 0x6c, 0x61, 0x6e, 0xb9, 0x6d, 0xb9, 0x79, 0x6c, 0x61, 0x20, 0x62, 0x69, 0x72, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x20, 0x7a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x20, 0x62, 0x69, 0x72, 0x20, 0x64, 0x69, 0x6c, 0x20, 0x6f, 0x6c, 0x6d, 0x61, 0x73, 0xb9, 0x6e, 0xb9, 0x6e, 0x20, 0x79, 0x61, 0x6e, 0xb9, 0x20, 0x73, 0xb9, 0x72, 0x61, 0x2c, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x74, 0x69, 0x62, 0x61, 0x72, 0xb9, 0x79, 0x6c, 0x61, 0x0a, 0x22, 0xf6, 0x7a, 0x6e, 0x65, 0x2d, 0x6e, 0x65, 0x73, 0x6e, 0x65, 0x2d, 0x79, 0xfc, 0x6b, 0x6c, 0x65, 0x6d, 0x22, 0x20, 0x62, 0x69, 0xe7, 0x69, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x6b, 0x69, 0x20, 0x63, 0xfc, 0x6d, 0x6c, 0x65, 0x20, 0x6b, 0x75, 0x72, 0x75, 0x6c, 0x75, 0xba, 0x75, 0x6e, 0x61, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x74, 0x69, 0x72, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kTrIso88593);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-3'),
      );
      expect(candidates.first.language?.iso6391Code, equals('tr'));
    });

    test('detect tr iso-8859-9', () {
      final detector = UCharDet();
      // dart format off
      final kTrIso88599 = Uint8List.fromList([0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x64, 0x69, 0x6c, 0x69, 0x20, 0x79, 0x61, 0x20, 0x64, 0x61, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x2c, 0x20, 0x62, 0x61, 0x74, 0xfd, 0x64, 0x61, 0x20, 0x42, 0x61, 0x6c, 0x6b, 0x61, 0x6e, 0x6c, 0x61, 0x72, 0x27, 0x64, 0x61, 0x6e, 0x20, 0x62, 0x61, 0xfe, 0x6c, 0x61, 0x79, 0xfd, 0x70, 0x20, 0x64, 0x6f, 0xf0, 0x75, 0x64, 0x61, 0x0a, 0x48, 0x61, 0x7a, 0x61, 0x72, 0x20, 0x44, 0x65, 0x6e, 0x69, 0x7a, 0x69, 0x20, 0x73, 0x61, 0x68, 0x61, 0x73, 0xfd, 0x6e, 0x61, 0x20, 0x6b, 0x61, 0x64, 0x61, 0x72, 0x20, 0x6b, 0x6f, 0x6e, 0x75, 0xfe, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x41, 0x6c, 0x74, 0x61, 0x79, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x62, 0x69, 0x72, 0x69, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x59, 0x61, 0xfe, 0xfd, 0x2c, 0x20, 0x65, 0x6e, 0x20, 0x65, 0x73, 0x6b, 0x69, 0x0a, 0x68, 0x65, 0x73, 0x61, 0x70, 0x6c, 0x61, 0x72, 0x61, 0x20, 0x67, 0xf6, 0x72, 0x65, 0x20, 0x38, 0x35, 0x30, 0x30, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x67, 0xfc, 0x6e, 0x20, 0x79, 0x61, 0xfe, 0x61, 0x79, 0x61, 0x6e, 0x20, 0x44, 0xfc, 0x6e, 0x79, 0x61, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x20, 0x61, 0x72, 0x61, 0x73, 0xfd, 0x6e, 0x64, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x65, 0x73, 0x6b, 0x69, 0x0a, 0x79, 0x61, 0x7a, 0xfd, 0x6c, 0xfd, 0x20, 0x62, 0x65, 0x6c, 0x67, 0x65, 0x6c, 0x65, 0x72, 0x65, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x42, 0x75, 0x20, 0x62, 0x65, 0x6c, 0x67, 0x65, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0xe7, 0x69, 0x76, 0x69, 0x20, 0x79, 0x61, 0x7a, 0xfd, 0x6c, 0xfd, 0x20, 0x53, 0xfc, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x6c, 0x65, 0x72, 0x64, 0x65, 0x6b, 0x69, 0x20, 0x61, 0x6c, 0xfd, 0x6e, 0x74, 0xfd, 0x20, 0x6b, 0x65, 0x6c, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x72, 0x64, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x32, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x79, 0x61, 0x7a, 0xfd, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x20, 0x69, 0xe7, 0x69, 0x6e, 0x64, 0x65, 0x20, 0x4f, 0xf0, 0x75, 0x7a, 0x20, 0x73, 0x61, 0x68, 0x61, 0x73, 0xfd, 0x20, 0x79, 0x61, 0x7a, 0xfd, 0x0a, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x4f, 0x73, 0x6d, 0x61, 0x6e, 0x6c, 0xfd, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x6e, 0x69, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x61, 0x6d, 0xfd, 0x6e, 0xfd, 0x20, 0x6f, 0x6c, 0x75, 0xfe, 0x74, 0x75, 0x72, 0x75, 0x72, 0x2e, 0x20, 0x42, 0x61, 0xfe, 0x74, 0x61, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x6f, 0x6c, 0x6d, 0x61, 0x6b, 0x20, 0xfc, 0x7a, 0x65, 0x72, 0x65, 0x0a, 0x65, 0x73, 0x6b, 0x69, 0x20, 0x4f, 0x73, 0x6d, 0x61, 0x6e, 0x6c, 0xfd, 0x20, 0xdd, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x6c, 0x75, 0xf0, 0x75, 0x20, 0x63, 0x6f, 0xf0, 0x72, 0x61, 0x66, 0x79, 0x61, 0x73, 0xfd, 0x6e, 0x64, 0x61, 0x20, 0x6b, 0x6f, 0x6e, 0x75, 0xfe, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x2c, 0x20, 0x64, 0xfc, 0x6e, 0x79, 0x61, 0x64, 0x61, 0x20, 0x65, 0x6e, 0x20, 0x66, 0x61, 0x7a, 0x6c, 0x61, 0x0a, 0x6b, 0x6f, 0x6e, 0x75, 0xfe, 0x75, 0x6c, 0x61, 0x6e, 0x20, 0x35, 0x2e, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x20, 0x73, 0x6f, 0x6e, 0x64, 0x61, 0x6e, 0x20, 0x65, 0x6b, 0x6c, 0x65, 0x6d, 0x65, 0x6c, 0x69, 0x20, 0x62, 0x69, 0x72, 0x20, 0x64, 0x69, 0x6c, 0x64, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x33, 0x5d, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x20, 0xf6, 0x74, 0xfc, 0x72, 0xfc, 0x0a, 0x6b, 0x75, 0x6c, 0x6c, 0x61, 0x6e, 0xfd, 0x6c, 0x61, 0x6e, 0x20, 0x68, 0x65, 0x72, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x20, 0x62, 0x69, 0x72, 0x20, 0x65, 0x79, 0x6c, 0x65, 0x6d, 0x20, 0xfc, 0x7a, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6c, 0x64, 0x69, 0xf0, 0x69, 0x20, 0x6b, 0x61, 0x64, 0x61, 0x72, 0x20, 0x73, 0xf6, 0x7a, 0x63, 0xfc, 0x6b, 0x0a, 0x74, 0xfc, 0x72, 0x65, 0x74, 0x69, 0x6c, 0x65, 0x62, 0x69, 0x6c, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x34, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x73, 0x69, 0x20, 0x62, 0x75, 0x20, 0x79, 0xf6, 0x6e, 0xfc, 0x6e, 0x64, 0x65, 0x6e, 0x20, 0x64, 0x6f, 0x6c, 0x61, 0x79, 0xfd, 0x20, 0x64, 0x69, 0xf0, 0x65, 0x72, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0x20, 0x64, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x79, 0x6c, 0x65, 0x0a, 0x6f, 0x72, 0x74, 0x61, 0x6b, 0x20, 0x79, 0x61, 0x20, 0x64, 0x61, 0x20, 0x61, 0x79, 0x72, 0xfd, 0x6b, 0x20, 0x62, 0x75, 0x6c, 0x75, 0x6e, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x61, 0x72, 0x63, 0x61, 0x20, 0x65, 0x6b, 0x65, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x74, 0x69, 0x72, 0x2e, 0x5b, 0x31, 0x35, 0x5d, 0x20, 0x54, 0xfc, 0x72, 0x6b, 0xe7, 0x65, 0x20, 0xe7, 0x6f, 0x6b, 0x20, 0x67, 0x65, 0x6e, 0x69, 0xfe, 0x0a, 0x6b, 0x75, 0x6c, 0x6c, 0x61, 0x6e, 0xfd, 0x6d, 0xfd, 0x79, 0x6c, 0x61, 0x20, 0x62, 0x69, 0x72, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x20, 0x7a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x20, 0x62, 0x69, 0x72, 0x20, 0x64, 0x69, 0x6c, 0x20, 0x6f, 0x6c, 0x6d, 0x61, 0x73, 0xfd, 0x6e, 0xfd, 0x6e, 0x20, 0x79, 0x61, 0x6e, 0xfd, 0x20, 0x73, 0xfd, 0x72, 0x61, 0x2c, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x74, 0x69, 0x62, 0x61, 0x72, 0xfd, 0x79, 0x6c, 0x61, 0x0a, 0x22, 0xf6, 0x7a, 0x6e, 0x65, 0x2d, 0x6e, 0x65, 0x73, 0x6e, 0x65, 0x2d, 0x79, 0xfc, 0x6b, 0x6c, 0x65, 0x6d, 0x22, 0x20, 0x62, 0x69, 0xe7, 0x69, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x6b, 0x69, 0x20, 0x63, 0xfc, 0x6d, 0x6c, 0x65, 0x20, 0x6b, 0x75, 0x72, 0x75, 0x6c, 0x75, 0xfe, 0x75, 0x6e, 0x61, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x74, 0x69, 0x72, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kTrIso88599);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('iso-8859-9'),
      );
      expect(candidates.first.language?.iso6391Code, equals('tr'));
    });

    test('detect tr utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kTrUtf8 = Uint8List.fromList([0x54, 0xc3, 0xbc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x6d, 0xc3, 0xae, 0x20, 0x61, 0x64, 0xc4, 0xb1, 0x79, 0x6c, 0x61, 0x20, 0x54, 0xc3, 0xbc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x20, 0x43, 0x75, 0x6d, 0x68, 0x75, 0x72, 0x69, 0x79, 0x65, 0x74, 0x69, 0x2c, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x61, 0x6b, 0x6c, 0x61, 0x72, 0xc4, 0xb1, 0x6e, 0xc4, 0xb1, 0x6e, 0x20, 0x62, 0xc3, 0xbc, 0x79, 0xc3, 0xbc, 0x6b, 0x20, 0x62, 0xc3, 0xb6, 0x6c, 0xc3, 0xbc, 0x6d, 0xc3, 0xbc, 0x20, 0x41, 0x6e, 0x61, 0x64, 0x6f, 0x6c, 0x75, 0x27, 0x64, 0x61, 0x2c, 0x20, 0x6b, 0xc3, 0xbc, 0xc3, 0xa7, 0xc3, 0xbc, 0x6b, 0x20, 0x62, 0x69, 0x72, 0x20, 0x62, 0xc3, 0xb6, 0x6c, 0xc3, 0xbc, 0x6d, 0xc3, 0xbc, 0x20, 0x69, 0x73, 0x65, 0x20, 0x42, 0x61, 0x6c, 0x6b, 0x61, 0x6e, 0x20, 0x59, 0x61, 0x72, 0xc4, 0xb1, 0x6d, 0x61, 0x64, 0x61, 0x73, 0xc4, 0xb1, 0x27, 0x6e, 0xc4, 0xb1, 0x6e, 0x20, 0x67, 0xc3, 0xbc, 0x6e, 0x65, 0x79, 0x64, 0x6f, 0xc4, 0x9f, 0x75, 0x20, 0x75, 0x7a, 0x61, 0x6e, 0x74, 0xc4, 0xb1, 0x73, 0xc4, 0xb1, 0x20, 0x6f, 0x6c, 0x61, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x6b, 0x79, 0x61, 0x27, 0x64, 0x61, 0x20, 0x79, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x61, 0x6e, 0x20, 0xc3, 0xbc, 0x6c, 0x6b, 0x65, 0x2e, 0x20, 0x4b, 0x75, 0x7a, 0x65, 0x79, 0x62, 0x61, 0x74, 0xc4, 0xb1, 0x64, 0x61, 0x20, 0x42, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x2c, 0x20, 0x62, 0x61, 0x74, 0xc4, 0xb1, 0x64, 0x61, 0x20, 0x59, 0x75, 0x6e, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x2c, 0x20, 0x6b, 0x75, 0x7a, 0x65, 0x79, 0x64, 0x6f, 0xc4, 0x9f, 0x75, 0x64, 0x61, 0x20, 0x47, 0xc3, 0xbc, 0x72, 0x63, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x2c, 0x20, 0x64, 0x6f, 0xc4, 0x9f, 0x75, 0x64, 0x61, 0x20, 0x45, 0x72, 0x6d, 0x65, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x2c, 0x20, 0xc4, 0xb0, 0x72, 0x61, 0x6e, 0x20, 0x76, 0x65, 0x20, 0x41, 0x7a, 0x65, 0x72, 0x62, 0x61, 0x79, 0x63, 0x61, 0x6e, 0x27, 0xc4, 0xb1, 0x6e, 0x20, 0x65, 0x6b, 0x73, 0x6c, 0x61, 0x76, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x61, 0xc4, 0x9f, 0xc4, 0xb1, 0x20, 0x4e, 0x61, 0x68, 0xc3, 0xa7, 0xc4, 0xb1, 0x76, 0x61, 0x6e, 0x2c, 0x20, 0x67, 0xc3, 0xbc, 0x6e, 0x65, 0x79, 0x64, 0x6f, 0xc4, 0x9f, 0x75, 0x64, 0x61, 0x20, 0x69, 0x73, 0x65, 0x20, 0x49, 0x72, 0x61, 0x6b, 0x20, 0x76, 0x65, 0x20, 0x53, 0x75, 0x72, 0x69, 0x79, 0x65, 0x20, 0x6b, 0x6f, 0x6d, 0xc5, 0x9f, 0x75, 0x73, 0x75, 0x64, 0x75, 0x72, 0x2e, 0x20, 0x47, 0xc3, 0xbc, 0x6e, 0x65, 0x79, 0x69, 0x6e, 0x69, 0x20, 0x4b, 0xc4, 0xb1, 0x62, 0x72, 0xc4, 0xb1, 0x73, 0x20, 0x61, 0x64, 0x61, 0x73, 0xc4, 0xb1, 0x20, 0x76, 0x65, 0x20, 0x41, 0x6b, 0x64, 0x65, 0x6e, 0x69, 0x7a, 0x2e, 0x20, 0x42, 0x61, 0x74, 0xc4, 0xb1, 0x73, 0xc4, 0xb1, 0x6e, 0xc4, 0xb1, 0x20, 0x45, 0x67, 0x65, 0x20, 0x44, 0x65, 0x6e, 0x69, 0x7a, 0x69, 0x20, 0x76, 0x65, 0x20, 0x6b, 0x75, 0x7a, 0x65, 0x79, 0x69, 0x6e, 0x69, 0x20, 0x4b, 0x61, 0x72, 0x61, 0x64, 0x65, 0x6e, 0x69, 0x7a, 0x20, 0xc3, 0xa7, 0x65, 0x76, 0x72, 0x65, 0x6c, 0x65, 0x72, 0x2e, 0x20, 0x4d, 0x61, 0x72, 0x6d, 0x61, 0x72, 0x61, 0x20, 0x44, 0x65, 0x6e, 0x69, 0x7a, 0x69, 0x20, 0x69, 0x73, 0x65, 0x20, 0xc4, 0xb0, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x20, 0x42, 0x6f, 0xc4, 0x9f, 0x61, 0x7a, 0xc4, 0xb1, 0x20, 0x76, 0x65, 0x20, 0xc3, 0x87, 0x61, 0x6e, 0x61, 0x6b, 0x6b, 0x61, 0x6c, 0x65, 0x20, 0x42, 0x6f, 0xc4, 0x9f, 0x61, 0x7a, 0xc4, 0xb1, 0x20, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x69, 0x72, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x20, 0x41, 0x6e, 0x61, 0x64, 0x6f, 0x6c, 0x75, 0x27, 0x79, 0x75, 0x20, 0x54, 0x72, 0x61, 0x6b, 0x79, 0x61, 0x27, 0x64, 0x61, 0x6e, 0x20, 0x79, 0x61, 0x6e, 0x69, 0x20, 0x41, 0x73, 0x79, 0x61, 0x27, 0x79, 0xc4, 0xb1, 0x20, 0x41, 0x76, 0x72, 0x75, 0x70, 0x61, 0x27, 0x64, 0x61, 0x6e, 0x20, 0x61, 0x79, 0xc4, 0xb1, 0x72, 0xc4, 0xb1, 0x72, 0x2e, 0x20, 0x54, 0xc3, 0xbc, 0x72, 0x6b, 0x69, 0x79, 0x65, 0x2c, 0x20, 0x41, 0x76, 0x72, 0x75, 0x70, 0x61, 0x20, 0x76, 0x65, 0x20, 0x41, 0x73, 0x79, 0x61, 0x27, 0x6e, 0xc4, 0xb1, 0x6e, 0x20, 0x6b, 0x61, 0x76, 0xc5, 0x9f, 0x61, 0x6b, 0x20, 0x6e, 0x6f, 0x6b, 0x74, 0x61, 0x73, 0xc4, 0xb1, 0x6e, 0x64, 0x61, 0x20, 0x79, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6d, 0x61, 0x73, 0xc4, 0xb1, 0x20, 0x73, 0x61, 0x79, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x20, 0xc3, 0xb6, 0x6e, 0x65, 0x6d, 0x6c, 0x69, 0x20, 0x62, 0x69, 0x72, 0x20, 0x6a, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x6a, 0x69, 0x6b, 0x20, 0x67, 0xc3, 0xbc, 0x63, 0x65, 0x20, 0x73, 0x61, 0x68, 0x69, 0x70, 0x74, 0x69, 0x72, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kTrUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('tr'));
    });

    test('detect uk utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kUkUtf8 = Uint8List.fromList([0xd0, 0x91, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0x5b, 0x31, 0x5d, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0x5b, 0x33, 0x5d, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x20, 0x42, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x62, 0x61, 0x63, 0x68, 0x2c, 0x20, 0x31, 0x37, 0x37, 0x39, 0x29, 0xc2, 0xa0, 0xe2, 0x80, 0x94, 0x20, 0xd1, 0x80, 0xd1, 0x96, 0xd0, 0xb4, 0x20, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xbd, 0xd1, 0x96, 0xd0, 0xb2, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x96, 0xd1, 0x80, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0x28, 0x53, 0x63, 0x69, 0x75, 0x72, 0x69, 0x64, 0x61, 0x65, 0x29, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0x84, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x96, 0xd1, 0x97, 0x20, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0x9f, 0xd1, 0x96, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x96, 0xd1, 0x87, 0xd0, 0xbd, 0xd1, 0x96, 0xd0, 0xb9, 0x20, 0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x86, 0xd1, 0x96, 0x2e, 0x20, 0xd0, 0x91, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd1, 0x97, 0xd0, 0xb4, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb7, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0x20, 0xd1, 0x96, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd1, 0x96, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0x2c, 0x20, 0xd1, 0x8f, 0xd0, 0xb3, 0xd1, 0x96, 0xd0, 0xb4, 0x2c, 0x20, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x88, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x85, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x96, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8f, 0x20, 0xd1, 0x96, 0x20, 0xd0, 0xba, 0xd0, 0xb2, 0xd1, 0x96, 0xd1, 0x82, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0xaf, 0xd0, 0xba, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe, 0x2c, 0x20, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x85, 0x20, 0xd1, 0x96, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x87, 0xd1, 0x86, 0xd1, 0x96, 0x20, 0xd0, 0xb2, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb6, 0x20, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb8, 0x2e, 0x20, 0xd0, 0x91, 0xd1, 0x96, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x88, 0xd1, 0x96, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xba, 0xd1, 0x96, 0xd0, 0xb2, 0x20, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x86, 0xd1, 0x96, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x96, 0x2e, 0x20, 0xd0, 0xa3, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x96, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd1, 0x83, 0x2c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0x20, 0xd0, 0xb9, 0x20, 0xd1, 0x82, 0xd1, 0x96, 0xd0, 0xbb, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0x20, 0x33, 0x30, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0x36, 0x30, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x96, 0xd0, 0xb2, 0x2c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x85, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xe2, 0x80, 0x94, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0x20, 0x31, 0x30, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0x32, 0x35, 0x20, 0xd1, 0x81, 0xd0, 0xbc, 0x2c, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0xd1, 0x96, 0xd0, 0xb4, 0x20, 0x33, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0x37, 0x20, 0xd0, 0xba, 0xd1, 0x96, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x96, 0xd0, 0xb2, 0x5b, 0x34, 0x5d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kUkUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('uk'));
    });

    test('detect uk windows-1251', () {
      final detector = UCharDet();
      // dart format off
      final kUkWindows1251 = Uint8List.fromList([0xc1, 0xe0, 0xe1, 0xe0, 0xea, 0x5b, 0x31, 0x5d, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0xe1, 0xe0, 0xe9, 0xe1, 0xe0, 0xea, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0xe1, 0xee, 0xe1, 0xe0, 0xea, 0x5b, 0x33, 0x5d, 0x20, 0x28, 0x4d, 0x61, 0x72, 0x6d, 0x6f, 0x74, 0x61, 0x20, 0x42, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x62, 0x61, 0x63, 0x68, 0x2c, 0x20, 0x31, 0x37, 0x37, 0x39, 0x29, 0xa0, 0x97, 0x20, 0xf0, 0xb3, 0xe4, 0x20, 0xe3, 0xf0, 0xe8, 0xe7, 0xf3, 0xed, 0xb3, 0xe2, 0x20, 0xf0, 0xee, 0xe4, 0xe8, 0xed, 0xe8, 0x20, 0xe2, 0xe8, 0xe2, 0xb3, 0xf0, 0xea, 0xee, 0xe2, 0xe8, 0xf5, 0x20, 0x28, 0x53, 0x63, 0x69, 0x75, 0x72, 0x69, 0x64, 0x61, 0x65, 0x29, 0x20, 0xef, 0xee, 0xf8, 0xe8, 0xf0, 0xe5, 0xed, 0xe8, 0xf5, 0x20, 0xe2, 0x20, 0xaa, 0xe2, 0xf0, 0xe0, 0xe7, 0xb3, 0xbf, 0x20, 0xf2, 0xe0, 0x20, 0xcf, 0xb3, 0xe2, 0xed, 0xb3, 0xf7, 0xed, 0xb3, 0xe9, 0x20, 0xc0, 0xec, 0xe5, 0xf0, 0xe8, 0xf6, 0xb3, 0x2e, 0x20, 0xc1, 0xe0, 0xe1, 0xe0, 0xea, 0xe8, 0x20, 0xe2, 0x20, 0xee, 0xf1, 0xed, 0xee, 0xe2, 0xed, 0xee, 0xec, 0xf3, 0x20, 0xbf, 0xe4, 0xff, 0xf2, 0xfc, 0x20, 0xe7, 0xe5, 0xeb, 0xe5, 0xed, 0xfc, 0x20, 0xb3, 0x20, 0xe1, 0xe0, 0xe3, 0xe0, 0xf2, 0xee, 0x20, 0xe2, 0xe8, 0xe4, 0xb3, 0xe2, 0x20, 0xf2, 0xf0, 0xe0, 0xe2, 0x2c, 0x20, 0xff, 0xe3, 0xb3, 0xe4, 0x2c, 0x20, 0xeb, 0xe8, 0xf8, 0xe0, 0xe9, 0xed, 0xe8, 0xea, 0xe8, 0x2c, 0x20, 0xec, 0xee, 0xf5, 0xe8, 0x2c, 0x20, 0xea, 0xee, 0xf0, 0xb3, 0xed, 0xed, 0xff, 0x20, 0xb3, 0x20, 0xea, 0xe2, 0xb3, 0xf2, 0xe8, 0x2e, 0x20, 0xdf, 0xea, 0x20, 0xef, 0xf0, 0xe0, 0xe2, 0xe8, 0xeb, 0xee, 0x2c, 0x20, 0xe6, 0xe8, 0xe2, 0xf3, 0xf2, 0xfc, 0x20, 0xf3, 0x20, 0xed, 0xee, 0xf0, 0xe0, 0xf5, 0x20, 0xb3, 0x20, 0xef, 0xe5, 0xf0, 0xe5, 0xe1, 0xf3, 0xe2, 0xe0, 0xfe, 0xf2, 0xfc, 0x20, 0xf3, 0x20, 0xf1, 0xef, 0xeb, 0xff, 0xf7, 0xf6, 0xb3, 0x20, 0xe2, 0xef, 0xf0, 0xee, 0xe4, 0xee, 0xe2, 0xe6, 0x20, 0xe7, 0xe8, 0xec, 0xe8, 0x2e, 0x20, 0xc1, 0xb3, 0xeb, 0xfc, 0xf8, 0xb3, 0xf1, 0xf2, 0xfc, 0x20, 0xe1, 0xe0, 0xe1, 0xe0, 0xea, 0xb3, 0xe2, 0x20, 0xe4, 0xf3, 0xe6, 0xe5, 0x20, 0xf1, 0xee, 0xf6, 0xb3, 0xe0, 0xeb, 0xfc, 0xed, 0xb3, 0x2e, 0x20, 0xd3, 0x20, 0xe7, 0xe0, 0xeb, 0xe5, 0xe6, 0xed, 0xee, 0xf1, 0xf2, 0xb3, 0x20, 0xe2, 0xb3, 0xe4, 0x20, 0xe2, 0xe8, 0xe4, 0xf3, 0x2c, 0x20, 0xe4, 0xee, 0xe2, 0xe6, 0xe8, 0xed, 0xe0, 0x20, 0xe3, 0xee, 0xeb, 0xee, 0xe2, 0xe8, 0x20, 0xe9, 0x20, 0xf2, 0xb3, 0xeb, 0xe0, 0x20, 0xf1, 0xf2, 0xe0, 0xed, 0xee, 0xe2, 0xe8, 0xf2, 0xfc, 0x20, 0xe2, 0xb3, 0xe4, 0x20, 0x33, 0x30, 0x20, 0xe4, 0xee, 0x20, 0x36, 0x30, 0x20, 0xf1, 0xe0, 0xed, 0xf2, 0xe8, 0xec, 0xe5, 0xf2, 0xf0, 0xb3, 0xe2, 0x2c, 0x20, 0xe4, 0xee, 0xe2, 0xe6, 0xe8, 0xed, 0xe0, 0x20, 0xf5, 0xe2, 0xee, 0xf1, 0xf2, 0xe0, 0x20, 0x97, 0x20, 0xe2, 0xb3, 0xe4, 0x20, 0x31, 0x30, 0x20, 0xe4, 0xee, 0x20, 0x32, 0x35, 0x20, 0xf1, 0xec, 0x2c, 0x20, 0xe2, 0xe0, 0xe3, 0xe0, 0x20, 0xf1, 0xf2, 0xe0, 0xed, 0xee, 0xe2, 0xe8, 0xf2, 0xfc, 0x20, 0xe2, 0xb3, 0xe4, 0x20, 0x33, 0x20, 0xe4, 0xee, 0x20, 0x37, 0x20, 0xea, 0xb3, 0xeb, 0xee, 0xe3, 0xf0, 0xe0, 0xec, 0xb3, 0xe2, 0x5b, 0x34, 0x5d, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kUkWindows1251);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1251'),
      );
      expect(candidates.first.language?.iso6391Code, equals('uk'));
    });

    test('detect vi utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kViUtf8 = Uint8List.fromList([0x43, 0x68, 0xe1, 0xbb, 0xaf, 0x20, 0x51, 0x75, 0xe1, 0xbb, 0x91, 0x63, 0x20, 0x6e, 0x67, 0xe1, 0xbb, 0xaf, 0x20, 0x6c, 0xc3, 0xa0, 0x20, 0x68, 0xe1, 0xbb, 0x87, 0x20, 0x63, 0x68, 0xe1, 0xbb, 0xaf, 0x20, 0x76, 0x69, 0xe1, 0xba, 0xbf, 0x74, 0x20, 0x74, 0x68, 0xe1, 0xbb, 0x91, 0x6e, 0x67, 0x20, 0x6e, 0x68, 0xe1, 0xba, 0xa5, 0x74, 0x20, 0x63, 0x68, 0xc3, 0xad, 0x6e, 0x68, 0x20, 0x74, 0x68, 0xe1, 0xbb, 0xa9, 0x63, 0x20, 0x68, 0x69, 0xe1, 0xbb, 0x87, 0x6e, 0x20, 0x6e, 0x61, 0x79, 0x20, 0x63, 0xe1, 0xbb, 0xa7, 0x61, 0x20, 0x74, 0x69, 0xe1, 0xba, 0xbf, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x2c, 0x20, 0x73, 0xe1, 0xbb, 0xad, 0x0a, 0x64, 0xe1, 0xbb, 0xa5, 0x6e, 0x67, 0x20, 0x6b, 0xc3, 0xbd, 0x20, 0x74, 0xe1, 0xbb, 0xb1, 0x20, 0x4c, 0x61, 0x20, 0x54, 0x69, 0x6e, 0x68, 0x2c, 0x20, 0x64, 0xe1, 0xbb, 0xb1, 0x61, 0x20, 0x74, 0x72, 0xc3, 0xaa, 0x6e, 0x20, 0x63, 0xc3, 0xa1, 0x63, 0x20, 0x62, 0xe1, 0xba, 0xa3, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe1, 0xbb, 0xaf, 0x20, 0x63, 0xc3, 0xa1, 0x69, 0x20, 0x63, 0xe1, 0xbb, 0xa7, 0x61, 0x20, 0x6e, 0x68, 0xc3, 0xb3, 0x6d, 0x20, 0x6e, 0x67, 0xc3, 0xb4, 0x6e, 0x20, 0x6e, 0x67, 0xe1, 0xbb, 0xaf, 0x20, 0x52, 0xc3, 0xb4, 0x6d, 0x61, 0x6e, 0x2c, 0x5b, 0x31, 0x5d, 0x20, 0xc4, 0x91, 0xe1, 0xba, 0xb7, 0x63, 0x0a, 0x62, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x20, 0x6c, 0xc3, 0xa0, 0x20, 0x62, 0xe1, 0xba, 0xa3, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe1, 0xbb, 0xaf, 0x20, 0x63, 0xc3, 0xa1, 0x69, 0x20, 0x42, 0xe1, 0xbb, 0x93, 0x20, 0xc4, 0x90, 0xc3, 0xa0, 0x6f, 0x20, 0x4e, 0x68, 0x61, 0x2c, 0x5b, 0x32, 0x5d, 0x20, 0x76, 0xe1, 0xbb, 0x9b, 0x69, 0x20, 0x63, 0xc3, 0xa1, 0x63, 0x20, 0x64, 0xe1, 0xba, 0xa5, 0x75, 0x20, 0x70, 0x68, 0xe1, 0xbb, 0xa5, 0x20, 0x63, 0x68, 0xe1, 0xbb, 0xa7, 0x20, 0x79, 0xe1, 0xba, 0xbf, 0x75, 0x20, 0x74, 0xe1, 0xbb, 0xab, 0x20, 0x62, 0xe1, 0xba, 0xa3, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe1, 0xbb, 0xaf, 0x20, 0x63, 0xc3, 0xa1, 0x69, 0x20, 0x48, 0x79, 0x0a, 0x4c, 0xe1, 0xba, 0xa1, 0x70, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kViUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('vi'));
    });

    test('detect vi viscii', () {
      final detector = UCharDet();
      // dart format off
      final kViViscii = Uint8List.fromList([0x43, 0x68, 0xe6, 0x20, 0x51, 0x75, 0xaf, 0x63, 0x20, 0x6e, 0x67, 0xe6, 0x20, 0x6c, 0xe0, 0x20, 0x68, 0xae, 0x20, 0x63, 0x68, 0xe6, 0x20, 0x76, 0x69, 0xaa, 0x74, 0x20, 0x74, 0x68, 0xaf, 0x6e, 0x67, 0x20, 0x6e, 0x68, 0xa4, 0x74, 0x20, 0x63, 0x68, 0xed, 0x6e, 0x68, 0x20, 0x74, 0x68, 0xd1, 0x63, 0x20, 0x68, 0x69, 0xae, 0x6e, 0x20, 0x6e, 0x61, 0x79, 0x20, 0x63, 0xfc, 0x61, 0x20, 0x74, 0x69, 0xaa, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xae, 0x74, 0x2c, 0x20, 0x73, 0xd8, 0x0a, 0x64, 0xf8, 0x6e, 0x67, 0x20, 0x6b, 0xfd, 0x20, 0x74, 0xf1, 0x20, 0x4c, 0x61, 0x20, 0x54, 0x69, 0x6e, 0x68, 0x2c, 0x20, 0x64, 0xf1, 0x61, 0x20, 0x74, 0x72, 0xea, 0x6e, 0x20, 0x63, 0xe1, 0x63, 0x20, 0x62, 0xe4, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe6, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x63, 0xfc, 0x61, 0x20, 0x6e, 0x68, 0xf3, 0x6d, 0x20, 0x6e, 0x67, 0xf4, 0x6e, 0x20, 0x6e, 0x67, 0xe6, 0x20, 0x52, 0xf4, 0x6d, 0x61, 0x6e, 0x2c, 0x5b, 0x31, 0x5d, 0x20, 0xf0, 0xa3, 0x63, 0x0a, 0x62, 0x69, 0xae, 0x74, 0x20, 0x6c, 0xe0, 0x20, 0x62, 0xe4, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe6, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x42, 0xb0, 0x20, 0xd0, 0xe0, 0x6f, 0x20, 0x4e, 0x68, 0x61, 0x2c, 0x5b, 0x32, 0x5d, 0x20, 0x76, 0xbe, 0x69, 0x20, 0x63, 0xe1, 0x63, 0x20, 0x64, 0xa4, 0x75, 0x20, 0x70, 0x68, 0xf8, 0x20, 0x63, 0x68, 0xfc, 0x20, 0x79, 0xaa, 0x75, 0x20, 0x74, 0xd7, 0x20, 0x62, 0xe4, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xe6, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x48, 0x79, 0x0a, 0x4c, 0xd5, 0x70, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kViViscii);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('viscii'));
      expect(candidates.first.language?.iso6391Code, equals('vi'));
    });

    test('detect vi windows-1258', () {
      final detector = UCharDet();
      // dart format off
      final kViWindows1258 = Uint8List.fromList([0x43, 0x68, 0xfd, 0xde, 0x20, 0x51, 0x75, 0xf4, 0xec, 0x63, 0x20, 0x6e, 0x67, 0xfd, 0xde, 0x20, 0x6c, 0xe0, 0x20, 0x68, 0xea, 0xf2, 0x20, 0x63, 0x68, 0xfd, 0xde, 0x20, 0x76, 0x69, 0xea, 0xec, 0x74, 0x20, 0x74, 0x68, 0xf4, 0xec, 0x6e, 0x67, 0x20, 0x6e, 0x68, 0xe2, 0xec, 0x74, 0x20, 0x63, 0x68, 0xed, 0x6e, 0x68, 0x20, 0x74, 0x68, 0xfd, 0xec, 0x63, 0x20, 0x68, 0x69, 0xea, 0xf2, 0x6e, 0x20, 0x6e, 0x61, 0x79, 0x20, 0x63, 0x75, 0xd2, 0x61, 0x20, 0x74, 0x69, 0xea, 0xec, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xea, 0xf2, 0x74, 0x2c, 0x20, 0x73, 0xfd, 0xd2, 0x0a, 0x64, 0x75, 0xf2, 0x6e, 0x67, 0x20, 0x6b, 0x79, 0xec, 0x20, 0x74, 0xfd, 0xf2, 0x20, 0x4c, 0x61, 0x20, 0x54, 0x69, 0x6e, 0x68, 0x2c, 0x20, 0x64, 0xfd, 0xf2, 0x61, 0x20, 0x74, 0x72, 0xea, 0x6e, 0x20, 0x63, 0xe1, 0x63, 0x20, 0x62, 0x61, 0xd2, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xfd, 0xde, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x63, 0x75, 0xd2, 0x61, 0x20, 0x6e, 0x68, 0xf3, 0x6d, 0x20, 0x6e, 0x67, 0xf4, 0x6e, 0x20, 0x6e, 0x67, 0xfd, 0xde, 0x20, 0x52, 0xf4, 0x6d, 0x61, 0x6e, 0x2c, 0x5b, 0x31, 0x5d, 0x20, 0xf0, 0xe3, 0xf2, 0x63, 0x0a, 0x62, 0x69, 0xea, 0xf2, 0x74, 0x20, 0x6c, 0xe0, 0x20, 0x62, 0x61, 0xd2, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xfd, 0xde, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x42, 0xf4, 0xcc, 0x20, 0xd0, 0xe0, 0x6f, 0x20, 0x4e, 0x68, 0x61, 0x2c, 0x5b, 0x32, 0x5d, 0x20, 0x76, 0xf5, 0xec, 0x69, 0x20, 0x63, 0xe1, 0x63, 0x20, 0x64, 0xe2, 0xec, 0x75, 0x20, 0x70, 0x68, 0x75, 0xf2, 0x20, 0x63, 0x68, 0x75, 0xd2, 0x20, 0x79, 0xea, 0xec, 0x75, 0x20, 0x74, 0xfd, 0xcc, 0x20, 0x62, 0x61, 0xd2, 0x6e, 0x67, 0x20, 0x63, 0x68, 0xfd, 0xde, 0x20, 0x63, 0xe1, 0x69, 0x20, 0x48, 0x79, 0x0a, 0x4c, 0x61, 0xf2, 0x70, 0x2e, 0x0a]);
      // dart format on
      final candidates = detector.detect(kViWindows1258);
      expect(candidates.isNotEmpty, isTrue);
      expect(
        candidates.first.encoding.name.toLowerCase(),
        equals('windows-1258'),
      );
      expect(candidates.first.language?.iso6391Code, equals('vi'));
    });

    test('detect zh big5', () {
      final detector = UCharDet();
      // dart format off
      final kZhBig5 = Uint8List.fromList([0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5]);
      // dart format on
      final candidates = detector.detect(kZhBig5);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('big5'));
      expect(candidates.first.language?.iso6391Code, equals('zh'));
    });

    test('detect zh euc-tw', () {
      final detector = UCharDet();
      // dart format off
      final kZhEuctw = Uint8List.fromList([0x45, 0x55, 0x43, 0x2d, 0x54, 0x57, 0xd2, 0xb3, 0xc6, 0xba, 0xfd, 0xa4, 0xcb, 0xf0, 0xc6, 0xee, 0xce, 0xfb, 0xe9, 0xc7, 0xc7, 0xf3, 0xee, 0xbe, 0xee, 0xa3, 0xc5, 0xc9, 0xce, 0xce, 0xc4, 0xe6, 0xc4, 0xa1, 0xa1, 0xa2, 0xc5, 0xe8, 0x43, 0x4e, 0x53, 0x20, 0x31, 0x31, 0x36, 0x34, 0x33, 0xc7, 0xf3, 0xcf, 0xd0, 0x3f, 0xd9, 0xd7, 0x3f, 0xa1, 0xa7, 0xc8, 0xfe, 0xd1, 0xd2, 0xc6, 0xba, 0x8e, 0xa3, 0xbc, 0xe3, 0xdf, 0xdb, 0xe7, 0xb5, 0xcb, 0xf0, 0xc6, 0xee, 0xc4, 0xcb, 0xc4, 0xec, 0xee, 0xa3, 0xa1, 0xa2, 0x45, 0x55, 0x43, 0x2d, 0x54, 0x57, 0xd2, 0xc9, 0xc5, 0xb7, 0xcb, 0xf0, 0xc6, 0xee, 0xa1, 0xa4, 0x0a]);
      // dart format on
      final candidates = detector.detect(kZhEuctw);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('euc-tw'));
      expect(candidates.first.language?.iso6391Code, equals('zh'));
    });

    test('detect zh gb18030', () {
      final detector = UCharDet();
      // dart format off
      final kZhGb18030 = Uint8List.fromList([0xbc, 0xf2, 0xcc, 0xe5, 0xd6, 0xd0, 0xce, 0xc4, 0xd6, 0xd0, 0xbb, 0xaa, 0xc8, 0xcb, 0xc3, 0xf1, 0xb9, 0xb2, 0xba, 0xcd, 0xb9, 0xfa, 0xcd, 0xf2, 0xcb, 0xea]);
      // dart format on
      final candidates = detector.detect(kZhGb18030);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('gb18030'));
      expect(candidates.first.language?.iso6391Code, equals('zh'));
    });

    test('detect zh utf-8', () {
      final detector = UCharDet();
      // dart format off
      final kZhUtf8 = Uint8List.fromList([0xe6, 0xb1, 0x89, 0xe5, 0xad, 0x97, 0xe6, 0xbc, 0xa2, 0xe5, 0xad, 0x97, 0xe7, 0xb5, 0xb1, 0xe4, 0xb8, 0x80, 0xe7, 0xb7, 0xa8, 0xe7, 0xa2, 0xbc, 0xe8, 0x90, 0xac, 0xe5, 0x9c, 0x8b, 0xe7, 0xa2, 0xbc, 0x0a]);
      // dart format on
      final candidates = detector.detect(kZhUtf8);
      expect(candidates.isNotEmpty, isTrue);
      expect(candidates.first.encoding.name.toLowerCase(), equals('utf-8'));
      expect(candidates.first.language?.iso6391Code, equals('zh'));
    });
  });
}
